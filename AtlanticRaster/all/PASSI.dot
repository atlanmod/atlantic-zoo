digraph "KM3 Model in DOT" {
graph[rankdir=BT,labeljust=l,labelloc=t,nodeSep=0.75,compound=true];
 subgraph "cluster_PASSI"{
labelloc=t
color=black
label=PASSI
 subgraph "cluster_Solution Domain"{
labelloc=t
color=black
label=Solution Domain
 node[shape=record];
FIPA-Platform Agent[label="{FIPA-Platform Agent| | }"]
 FIPA-Platform Agent->Agent[arrowhead=none,arrowtail=none,headlabel="agent",taillabel="fipa_platform_AgentA",group=Agent,minlen=2,constraint=false,]
;
 node[shape=record];
FIPA-platform Task[label="{FIPA-platform Task| | }"]
 FIPA-platform Task->FIPA-Platform Agent[arrowhead=diamond,arrowtail=none,headlabel="fipa_platform_Agent",taillabel="fipa_platform_Task[*]",group=FIPA-Platform Agent,minlen=2,constraint=true,]
 FIPA-platform Task->Task[arrowhead=none,arrowtail=none,headlabel="task",taillabel="fipa_platform_TaskT",group=Task,minlen=2,constraint=false,]
;
 node[shape=record];
Service[label="{Service| | }"]
;

} subgraph "cluster_Agency Domain"{
labelloc=t
color=black
label=Agency Domain
 node[shape=record];
Agent[label="{Agent|Name : String| }"]
 Agent->Ontology[arrowhead=vee,arrowtail=none,headlabel="Knowledge",group=Ontology,minlen=2,constraint=false,]
 Agent->Ressource[arrowhead=vee,arrowtail=none,headlabel="resource[*]",group=Ressource,minlen=2,constraint=false,]
 Agent->Non functionnal Requirement[arrowhead=vee,arrowtail=none,headlabel="non_functionnal_Requirement[*]",group=Non functionnal Requirement,minlen=2,constraint=false,]
 Agent->Requirement[arrowhead=vee,arrowtail=none,headlabel="requirement[1-*]",group=Requirement,minlen=2,constraint=false,]
;
 node[shape=record];
Role[label="{Role| | }"]
 Role->Agent[arrowhead=diamond,arrowtail=none,headlabel="agentR",taillabel="role",group=Agent,minlen=2,constraint=true,]
 Role->Service[arrowhead=vee,arrowtail=none,headlabel="service[*]",group=Service,minlen=2,constraint=false,]
 Role->Task[arrowhead=vee,arrowtail=none,headlabel="task[1-*]",group=Task,minlen=2,constraint=false,]
 Role->Scenario[arrowhead=vee,arrowtail=none,headlabel="scenario[1-*]",group=Scenario,minlen=2,constraint=false,]
 Role->Communication[arrowhead=vee,arrowtail=none,headlabel="communication[*]",group=Communication,minlen=2,constraint=false,]
;
 node[shape=record];
Task[label="{Task|Name : String| }"]
;
 node[shape=record];
Communication[label="{Communication|Name : String| }"]
 Communication->Ontology[arrowhead=vee,arrowtail=none,headlabel="Exchanged Knowledge",group=Ontology,minlen=2,constraint=false,]
 Communication->AIP[arrowhead=vee,arrowtail=none,headlabel="aip",group=AIP,minlen=2,constraint=false,]
;
 node[shape=record];
Message[label="{Message| | }"]
 Message->Communication[arrowhead=diamond,arrowtail=none,headlabel="communication",taillabel="message",group=Communication,minlen=2,constraint=true,]
 Message->Performative[arrowhead=vee,arrowtail=none,headlabel="Comm_Act",group=Performative,minlen=2,constraint=false,]
;
 node[shape=record];
AIP[label="{AIP|Name : String| }"]
;
 node[shape=record];
Performative[label="{Performative| | }"]
 Performative->AIP[arrowhead=diamond,arrowtail=none,headlabel="aip",taillabel="performative",group=AIP,minlen=2,constraint=true,]
;

} subgraph "cluster_Problem Domain"{
labelloc=t
color=black
label=Problem Domain
 node[shape=record];
Ressource[label="{Ressource|Name : String| }"]
;
 node[shape=record];
Non functionnal Requirement[label="{Non functionnal Requirement| | }"]
;
 node[shape=record];
Requirement[label="{Requirement| | }"]
;
 node[shape=record];
Scenario[label="{Scenario| | }"]
;
 node[shape=record];
Ontology[label="{Ontology| | }"]
;
 node[shape=record];
Concept[label="{Concept| | }"]
 Concept->Ontology[arrowhead=onormal,group=Ontology,minlen=2,constraint=true,]
;
 node[shape=record];
Action[label="{Action| | }"]
 Action->Ontology[arrowhead=onormal,group=Ontology,minlen=2,constraint=true,]
;
 node[shape=record];
Predicate[label="{Predicate| | }"]
 Predicate->Ontology[arrowhead=onormal,group=Ontology,minlen=2,constraint=true,]
;

}
} subgraph "cluster_PrimitiveTypes"{
labelloc=t
color=black
label=PrimitiveTypes
 node[shape=record];
String[label="{&#171;DataType&#187;\nString|}"]
;

}
}