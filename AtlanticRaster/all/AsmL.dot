digraph "KM3 Model in DOT" {
graph[rankdir=BT,labeljust=l,labelloc=t,nodeSep=0.75,compound=true];
 subgraph "cluster_AsmL"{
labelloc=t
color=black
label=AsmL
 node[shape=record];
LocatedElement[label="{/LocatedElement/|location : String\ncommentsBefore[*] : String\ncommentsAfter[*] : String| }"]
;
 node[shape=record];
Body[label="{Body| | }"]
 Body->LocatedElement[arrowhead=onormal,group=LocatedElement,minlen=2,constraint=true,]
;
 node[shape=record];
InWhereHolds[label="{InWhereHolds| | }"]
 InWhereHolds->Term[arrowhead=vee,arrowtail=diamond,headlabel="var",group=Term,minlen=2,constraint=true,]
 InWhereHolds->Term[arrowhead=vee,arrowtail=diamond,headlabel="in",group=Term,minlen=2,constraint=true,]
 InWhereHolds->Term[arrowhead=vee,arrowtail=diamond,headlabel="where[0-1]",group=Term,minlen=2,constraint=true,]
 InWhereHolds->Term[arrowhead=vee,arrowtail=diamond,headlabel="holds[0-1]",group=Term,minlen=2,constraint=true,]
 InWhereHolds->LocatedElement[arrowhead=onormal,group=LocatedElement,minlen=2,constraint=true,]
;
 node[shape=record];
AsmLFile[label="{AsmLFile| | }"]
 AsmLFile->LocatedElement[arrowhead=onormal,group=LocatedElement,minlen=2,constraint=true,]
;
 node[shape=record];
AsmLElement[label="{/AsmLElement/| | }"]
 AsmLElement->AsmLFile[arrowhead=diamond,arrowtail=none,headlabel="file",taillabel="elements[*]{ordered}",group=AsmLFile,minlen=2,constraint=true,]
 AsmLElement->LocatedElement[arrowhead=onormal,group=LocatedElement,minlen=2,constraint=true,]
;
 node[shape=record];
VarDeclaration[label="{VarDeclaration|isConstant : Boolean\nisDeclaration : Boolean\nisLocal : Boolean\nname : String| }"]
 VarDeclaration->AsmLElement[arrowhead=onormal,group=AsmLElement,minlen=2,constraint=true,]
 VarDeclaration->VarOrCase[arrowhead=onormal,group=VarOrCase,minlen=2,constraint=true,]
 VarDeclaration->VarOrMethod[arrowhead=onormal,group=VarOrMethod,minlen=2,constraint=true,]
;
 node[shape=record];
Namespace[label="{Namespace|name : String| }"]
 Namespace->AsmLElement[arrowhead=onormal,group=AsmLElement,minlen=2,constraint=true,]
;
 node[shape=record];
Structure[label="{Structure|name : String\nsuperStructureName[0-1] : String| }"]
 Structure->AsmLElement[arrowhead=onormal,group=AsmLElement,minlen=2,constraint=true,]
;
 node[shape=record];
VarOrCase[label="{/VarOrCase/| | }"]
 VarOrCase->Structure[arrowhead=diamond,arrowtail=none,headlabel="ownerStructure",taillabel="varOrCase[*]{ordered}",group=Structure,minlen=2,constraint=true,]
 VarOrCase->LocatedElement[arrowhead=onormal,group=LocatedElement,minlen=2,constraint=true,]
;
 node[shape=record];
Case[label="{Case|name : String| }"]
 Case->VarDeclaration[arrowhead=vee,arrowtail=diamond,headlabel="variables[*]{ordered}",group=VarDeclaration,minlen=2,constraint=true,]
 Case->VarOrCase[arrowhead=onormal,group=VarOrCase,minlen=2,constraint=true,]
;
 node[shape=record];
Class[label="{Class|name : String\nisAbstract : Boolean\nsuperClassName[0-1] : String| }"]
 Class->AsmLElement[arrowhead=onormal,group=AsmLElement,minlen=2,constraint=true,]
;
 node[shape=record];
VarOrMethod[label="{VarOrMethod| | }"]
 VarOrMethod->Class[arrowhead=diamond,arrowtail=none,headlabel="ownerClass",taillabel="varOrMethod[*]{ordered}",group=Class,minlen=2,constraint=true,]
 VarOrMethod->LocatedElement[arrowhead=onormal,group=LocatedElement,minlen=2,constraint=true,]
;
 node[shape=record];
Enumeration[label="{Enumeration|name : String| }"]
 Enumeration->Enumerator[arrowhead=vee,arrowtail=diamond,headlabel="enumerators[*]{ordered}",group=Enumerator,minlen=2,constraint=true,]
 Enumeration->AsmLElement[arrowhead=onormal,group=AsmLElement,minlen=2,constraint=true,]
;
 node[shape=record];
Enumerator[label="{Enumerator|name : String| }"]
 Enumerator->Term[arrowhead=vee,arrowtail=diamond,headlabel="value[0-1]",group=Term,minlen=2,constraint=true,]
 Enumerator->LocatedElement[arrowhead=onormal,group=LocatedElement,minlen=2,constraint=true,]
;
 node[shape=record];
Function[label="{/Function/|name : String| }"]
 Function->Body[arrowhead=vee,arrowtail=diamond,headlabel="body",group=Body,minlen=2,constraint=true,]
 Function->AsmLElement[arrowhead=onormal,group=AsmLElement,minlen=2,constraint=true,]
;
 node[shape=record];
Method[label="{Method|isAbstract[0-1] : Boolean\nisShared[0-1] : Boolean\nisEntryPoint[0-1] : Boolean\nisOverride[0-1] : Boolean| }"]
 Method->Function[arrowhead=onormal,group=Function,minlen=2,constraint=true,]
 Method->VarOrMethod[arrowhead=onormal,group=VarOrMethod,minlen=2,constraint=true,]
;
 node[shape=record];
Parameter[label="{Parameter|name : String| }"]
 Parameter->Method[arrowhead=diamond,arrowtail=none,headlabel="ownerMethod",taillabel="parameters[*]{ordered}",group=Method,minlen=2,constraint=true,]
 Parameter->LocatedElement[arrowhead=onormal,group=LocatedElement,minlen=2,constraint=true,]
;
 node[shape=record];
Main[label="{Main| | }"]
 Main->AsmLFile[arrowhead=diamond,arrowtail=none,headlabel="mainFile",taillabel="main",group=AsmLFile,minlen=2,constraint=true,]
 Main->Initially[arrowhead=vee,arrowtail=diamond,headlabel="initialisations[*]{ordered}",group=Initially,minlen=2,constraint=true,]
 Main->Function[arrowhead=onormal,group=Function,minlen=2,constraint=true,]
;
 node[shape=record];
Initially[label="{Initially| | }"]
 Initially->VarTerm[arrowhead=vee,arrowtail=diamond,headlabel="id",group=VarTerm,minlen=2,constraint=true,]
 Initially->Term[arrowhead=vee,arrowtail=diamond,headlabel="val",group=Term,minlen=2,constraint=true,]
 Initially->LocatedElement[arrowhead=onormal,group=LocatedElement,minlen=2,constraint=true,]
;
 node[shape=record];
Rule[label="{/Rule/| | }"]
 Rule->Body[arrowhead=diamond,arrowtail=none,headlabel="ownerBody",taillabel="rules[*]{ordered}",group=Body,minlen=2,constraint=true,]
 Rule->LocatedElement[arrowhead=onormal,group=LocatedElement,minlen=2,constraint=true,]
;
 node[shape=record];
SkipRule[label="{SkipRule| | }"]
 SkipRule->Rule[arrowhead=onormal,group=Rule,minlen=2,constraint=true,]
;
 node[shape=record];
Step[label="{/Step/|name[0-1] : String| }"]
 Step->Rule[arrowhead=onormal,group=Rule,minlen=2,constraint=true,]
;
 node[shape=record];
StepUntilFixPoint[label="{StepUntilFixPoint| | }"]
 StepUntilFixPoint->Step[arrowhead=onormal,group=Step,minlen=2,constraint=true,]
;
 node[shape=record];
StepExpression[label="{/StepExpression/| | }"]
 StepExpression->Term[arrowhead=vee,arrowtail=diamond,headlabel="expression",group=Term,minlen=2,constraint=true,]
 StepExpression->Step[arrowhead=onormal,group=Step,minlen=2,constraint=true,]
;
 node[shape=record];
StepWhile[label="{StepWhile| | }"]
 StepWhile->StepExpression[arrowhead=onormal,group=StepExpression,minlen=2,constraint=true,]
;
 node[shape=record];
StepUntil[label="{StepUntil| | }"]
 StepUntil->StepExpression[arrowhead=onormal,group=StepExpression,minlen=2,constraint=true,]
;
 node[shape=record];
StepForEach[label="{StepForEach| | }"]
 StepForEach->InWhereHolds[arrowhead=vee,arrowtail=diamond,headlabel="expressions[*]",group=InWhereHolds,minlen=2,constraint=true,]
 StepForEach->Step[arrowhead=onormal,group=Step,minlen=2,constraint=true,]
;
 node[shape=record];
MethodInvocation[label="{MethodInvocation| | }"]
 MethodInvocation->MethodCallTerm[arrowhead=vee,arrowtail=diamond,headlabel="called",group=MethodCallTerm,minlen=2,constraint=true,]
 MethodInvocation->Rule[arrowhead=onormal,group=Rule,minlen=2,constraint=true,]
;
 node[shape=record];
UpdateRule[label="{/UpdateRule/| | }"]
 UpdateRule->Term[arrowhead=vee,arrowtail=diamond,headlabel="term",group=Term,minlen=2,constraint=true,]
 UpdateRule->Rule[arrowhead=onormal,group=Rule,minlen=2,constraint=true,]
;
 node[shape=record];
UpdateVarRule[label="{UpdateVarRule| | }"]
 UpdateVarRule->Term[arrowhead=vee,arrowtail=diamond,headlabel="updateVar",group=Term,minlen=2,constraint=true,]
 UpdateVarRule->UpdateRule[arrowhead=onormal,group=UpdateRule,minlen=2,constraint=true,]
;
 node[shape=record];
UpdateFieldRule[label="{UpdateFieldRule| | }"]
 UpdateFieldRule->VarTerm[arrowhead=vee,arrowtail=diamond,headlabel="path[2-*]{ordered}",group=VarTerm,minlen=2,constraint=true,]
 UpdateFieldRule->UpdateRule[arrowhead=onormal,group=UpdateRule,minlen=2,constraint=true,]
;
 node[shape=record];
UpdateMapRule[label="{UpdateMapRule| | }"]
 UpdateMapRule->VarTerm[arrowhead=vee,arrowtail=diamond,headlabel="updateMap",group=VarTerm,minlen=2,constraint=true,]
 UpdateMapRule->Term[arrowhead=vee,arrowtail=diamond,headlabel="parameters[1-*]{ordered}",group=Term,minlen=2,constraint=true,]
 UpdateMapRule->UpdateRule[arrowhead=onormal,group=UpdateRule,minlen=2,constraint=true,]
;
 node[shape=record];
ChooseRule[label="{ChooseRule| | }"]
 ChooseRule->InWhereHolds[arrowhead=vee,arrowtail=diamond,headlabel="expressions[*]",group=InWhereHolds,minlen=2,constraint=true,]
 ChooseRule->Body[arrowhead=vee,arrowtail=diamond,headlabel="ifChoosenRules",group=Body,minlen=2,constraint=true,]
 ChooseRule->Body[arrowhead=vee,arrowtail=diamond,headlabel="ifNotChoosenRule[0-1]",group=Body,minlen=2,constraint=true,]
 ChooseRule->Rule[arrowhead=onormal,group=Rule,minlen=2,constraint=true,]
;
 node[shape=record];
ForallRule[label="{ForallRule| | }"]
 ForallRule->InWhereHolds[arrowhead=vee,arrowtail=diamond,headlabel="expressions[*]",group=InWhereHolds,minlen=2,constraint=true,]
 ForallRule->Body[arrowhead=vee,arrowtail=diamond,headlabel="doRule",group=Body,minlen=2,constraint=true,]
 ForallRule->Rule[arrowhead=onormal,group=Rule,minlen=2,constraint=true,]
;
 node[shape=record];
ConditionalRule[label="{ConditionalRule| | }"]
 ConditionalRule->Term[arrowhead=vee,arrowtail=diamond,headlabel="condition",group=Term,minlen=2,constraint=true,]
 ConditionalRule->Body[arrowhead=vee,arrowtail=diamond,headlabel="thenRule",group=Body,minlen=2,constraint=true,]
 ConditionalRule->Body[arrowhead=vee,arrowtail=diamond,headlabel="elseRule[0-1]",group=Body,minlen=2,constraint=true,]
 ConditionalRule->ElseIf[arrowhead=vee,arrowtail=diamond,headlabel="elseIfRule[0-1]",group=ElseIf,minlen=2,constraint=true,]
 ConditionalRule->Rule[arrowhead=onormal,group=Rule,minlen=2,constraint=true,]
;
 node[shape=record];
ElseIf[label="{ElseIf| | }"]
 ElseIf->ConditionalRule[arrowhead=onormal,group=ConditionalRule,minlen=2,constraint=true,]
;
 node[shape=record];
ReturnRule[label="{ReturnRule| | }"]
 ReturnRule->Term[arrowhead=vee,arrowtail=diamond,headlabel="term",group=Term,minlen=2,constraint=true,]
 ReturnRule->Rule[arrowhead=onormal,group=Rule,minlen=2,constraint=true,]
;
 node[shape=record];
AddRule[label="{AddRule| | }"]
 AddRule->Term[arrowhead=vee,arrowtail=diamond,headlabel="val",group=Term,minlen=2,constraint=true,]
 AddRule->VarTerm[arrowhead=vee,arrowtail=diamond,headlabel="set",group=VarTerm,minlen=2,constraint=true,]
 AddRule->Rule[arrowhead=onormal,group=Rule,minlen=2,constraint=true,]
;
 node[shape=record];
RemoveRule[label="{RemoveRule| | }"]
 RemoveRule->Term[arrowhead=vee,arrowtail=diamond,headlabel="val",group=Term,minlen=2,constraint=true,]
 RemoveRule->VarTerm[arrowhead=vee,arrowtail=diamond,headlabel="set",group=VarTerm,minlen=2,constraint=true,]
 RemoveRule->Rule[arrowhead=onormal,group=Rule,minlen=2,constraint=true,]
;
 node[shape=record];
Type[label="{/Type/|withNull : Boolean| }"]
 Type->VarDeclaration[arrowhead=diamond,arrowtail=none,headlabel="ownerDeclaration[0-1]",taillabel="type",group=VarDeclaration,minlen=2,constraint=true,]
 Type->Method[arrowhead=diamond,arrowtail=none,headlabel="ownerMethod[0-1]",taillabel="returnType[0-1]",group=Method,minlen=2,constraint=true,]
 Type->Parameter[arrowhead=diamond,arrowtail=none,headlabel="ownerParameter[0-1]",taillabel="type",group=Parameter,minlen=2,constraint=true,]
 Type->AsmLElement[arrowhead=onormal,group=AsmLElement,minlen=2,constraint=true,]
;
 node[shape=record];
NamedType[label="{NamedType|name : String| }"]
 NamedType->Type[arrowhead=onormal,group=Type,minlen=2,constraint=true,]
;
 node[shape=record];
MapType[label="{MapType| | }"]
 MapType->Type[arrowhead=vee,arrowtail=diamond,headlabel="ofType",group=Type,minlen=2,constraint=true,]
 MapType->Type[arrowhead=vee,arrowtail=diamond,headlabel="toType",group=Type,minlen=2,constraint=true,]
 MapType->Type[arrowhead=onormal,group=Type,minlen=2,constraint=true,]
;
 node[shape=record];
TupletType[label="{TupletType| | }"]
 TupletType->Type[arrowhead=vee,arrowtail=diamond,headlabel="types[2-*]{ordered}",group=Type,minlen=2,constraint=true,]
 TupletType->Type[arrowhead=onormal,group=Type,minlen=2,constraint=true,]
;
 node[shape=record];
SetType[label="{SetType| | }"]
 SetType->Type[arrowhead=vee,arrowtail=diamond,headlabel="of",group=Type,minlen=2,constraint=true,]
 SetType->Type[arrowhead=onormal,group=Type,minlen=2,constraint=true,]
;
 node[shape=record];
SequenceType[label="{SequenceType| | }"]
 SequenceType->Type[arrowhead=vee,arrowtail=diamond,headlabel="of",group=Type,minlen=2,constraint=true,]
 SequenceType->Type[arrowhead=onormal,group=Type,minlen=2,constraint=true,]
;
 node[shape=record];
Term[label="{/Term/| | }"]
 Term->LocatedElement[arrowhead=onormal,group=LocatedElement,minlen=2,constraint=true,]
;
 node[shape=record];
VarTerm[label="{VarTerm|name : String| }"]
 VarTerm->Term[arrowhead=onormal,group=Term,minlen=2,constraint=true,]
;
 node[shape=record];
Operator[label="{Operator|opName : String| }"]
 Operator->Term[arrowhead=vee,arrowtail=diamond,headlabel="leftExp",group=Term,minlen=2,constraint=true,]
 Operator->Term[arrowhead=vee,arrowtail=diamond,headlabel="rightExp[0-1]",group=Term,minlen=2,constraint=true,]
 Operator->Term[arrowhead=onormal,group=Term,minlen=2,constraint=true,]
;
 node[shape=record];
MapTerm[label="{MapTerm|separator : String| }"]
 MapTerm->Term[arrowhead=vee,arrowtail=diamond,headlabel="ofTerm",group=Term,minlen=2,constraint=true,]
 MapTerm->Term[arrowhead=vee,arrowtail=diamond,headlabel="toTerm",group=Term,minlen=2,constraint=true,]
 MapTerm->Term[arrowhead=onormal,group=Term,minlen=2,constraint=true,]
;
 node[shape=record];
TulpletTerm[label="{TulpletTerm| | }"]
 TulpletTerm->Term[arrowhead=vee,arrowtail=diamond,headlabel="terms[2-*]{ordered}",group=Term,minlen=2,constraint=true,]
 TulpletTerm->Term[arrowhead=onormal,group=Term,minlen=2,constraint=true,]
;
 node[shape=record];
MethodCallTerm[label="{MethodCallTerm|name : String| }"]
 MethodCallTerm->Term[arrowhead=vee,arrowtail=diamond,headlabel="parameters[*]{ordered}",group=Term,minlen=2,constraint=true,]
 MethodCallTerm->Term[arrowhead=onormal,group=Term,minlen=2,constraint=true,]
;
 node[shape=record];
NewInstance[label="{NewInstance| | }"]
 NewInstance->MethodCallTerm[arrowhead=onormal,group=MethodCallTerm,minlen=2,constraint=true,]
;
 node[shape=record];
PredicateTerm[label="{PredicateTerm| | }"]
 PredicateTerm->InWhereHolds[arrowhead=vee,arrowtail=diamond,headlabel="expressions[*]",group=InWhereHolds,minlen=2,constraint=true,]
 PredicateTerm->Term[arrowhead=onormal,group=Term,minlen=2,constraint=true,]
;
 node[shape=record];
ForAllTerm[label="{ForAllTerm| | }"]
 ForAllTerm->PredicateTerm[arrowhead=onormal,group=PredicateTerm,minlen=2,constraint=true,]
;
 node[shape=record];
ExistsTerm[label="{ExistsTerm|isUnique : Boolean| }"]
 ExistsTerm->PredicateTerm[arrowhead=onormal,group=PredicateTerm,minlen=2,constraint=true,]
;
 node[shape=record];
AnyIn[label="{AnyIn| | }"]
 AnyIn->PredicateTerm[arrowhead=onormal,group=PredicateTerm,minlen=2,constraint=true,]
;
 node[shape=record];
SetTerm[label="{/SetTerm/| | }"]
 SetTerm->Term[arrowhead=onormal,group=Term,minlen=2,constraint=true,]
;
 node[shape=record];
EnumerateSet[label="{EnumerateSet| | }"]
 EnumerateSet->Term[arrowhead=vee,arrowtail=diamond,headlabel="vals[*]",group=Term,minlen=2,constraint=true,]
 EnumerateSet->SetTerm[arrowhead=onormal,group=SetTerm,minlen=2,constraint=true,]
;
 node[shape=record];
RangeSet[label="{RangeSet| | }"]
 RangeSet->Term[arrowhead=vee,arrowtail=diamond,headlabel="minval",group=Term,minlen=2,constraint=true,]
 RangeSet->Term[arrowhead=vee,arrowtail=diamond,headlabel="maxval",group=Term,minlen=2,constraint=true,]
 RangeSet->SetTerm[arrowhead=onormal,group=SetTerm,minlen=2,constraint=true,]
;
 node[shape=record];
AlgorithmSet[label="{AlgorithmSet| | }"]
 AlgorithmSet->InWhereHolds[arrowhead=vee,arrowtail=diamond,headlabel="expressions[*]",group=InWhereHolds,minlen=2,constraint=true,]
 AlgorithmSet->SetTerm[arrowhead=onormal,group=SetTerm,minlen=2,constraint=true,]
;
 node[shape=record];
SequenceTerm[label="{/SequenceTerm/| | }"]
 SequenceTerm->Term[arrowhead=onormal,group=Term,minlen=2,constraint=true,]
;
 node[shape=record];
EnumerateSequence[label="{EnumerateSequence| | }"]
 EnumerateSequence->Term[arrowhead=vee,arrowtail=diamond,headlabel="vals[*]{ordered}",group=Term,minlen=2,constraint=true,]
 EnumerateSequence->SequenceTerm[arrowhead=onormal,group=SequenceTerm,minlen=2,constraint=true,]
;
 node[shape=record];
RangeSequence[label="{RangeSequence| | }"]
 RangeSequence->Term[arrowhead=vee,arrowtail=diamond,headlabel="minval",group=Term,minlen=2,constraint=true,]
 RangeSequence->Term[arrowhead=vee,arrowtail=diamond,headlabel="maxval",group=Term,minlen=2,constraint=true,]
 RangeSequence->SequenceTerm[arrowhead=onormal,group=SequenceTerm,minlen=2,constraint=true,]
;
 node[shape=record];
Constant[label="{/Constant/| | }"]
 Constant->Term[arrowhead=onormal,group=Term,minlen=2,constraint=true,]
;
 node[shape=record];
BooleanConstant[label="{BooleanConstant|val : Boolean| }"]
 BooleanConstant->Constant[arrowhead=onormal,group=Constant,minlen=2,constraint=true,]
;
 node[shape=record];
IntegerConstant[label="{IntegerConstant|val : Integer| }"]
 IntegerConstant->Constant[arrowhead=onormal,group=Constant,minlen=2,constraint=true,]
;
 node[shape=record];
StringConstant[label="{StringConstant|val : String| }"]
 StringConstant->Constant[arrowhead=onormal,group=Constant,minlen=2,constraint=true,]
;
 node[shape=record];
NullConstant[label="{NullConstant| | }"]
 NullConstant->Constant[arrowhead=onormal,group=Constant,minlen=2,constraint=true,]
;

} subgraph "cluster_PrimitiveTypes"{
labelloc=t
color=black
label=PrimitiveTypes
 node[shape=record];
String[label="{&#171;DataType&#187;\nString|}"]
;
 node[shape=record];
Integer[label="{&#171;DataType&#187;\nInteger|}"]
;
 node[shape=record];
Boolean[label="{&#171;DataType&#187;\nBoolean|}"]
;

}
}