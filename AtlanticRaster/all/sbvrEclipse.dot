digraph "KM3 Model in DOT" {
graph[rankdir=BT,labeljust=l,labelloc=t,nodeSep=0.75,compound=true];
 subgraph "cluster_SBVR"{
labelloc=t
color=black
label=SBVR
 node[shape=record];
Actuality[label="{Actuality| | }"]
 Actuality->StateOfAffairs[arrowhead=onormal,group=StateOfAffairs,minlen=2,constraint=true,]
;
 node[shape=record];
StateOfAffairs[label="{StateOfAffairs| | }"]
 StateOfAffairs->Thing[arrowhead=onormal,group=Thing,minlen=2,constraint=true,]
;
 node[shape=record];
Thing[label="{Thing| | }"]
 Thing->Name[arrowhead=vee,arrowtail=none,headlabel="name[*]",group=Name,minlen=2,constraint=false,]
;
 node[shape=record];
Name[label="{Name| | }"]
 Name->Designation[arrowhead=onormal,group=Designation,minlen=2,constraint=true,]
;
 node[shape=record];
Designation[label="{Designation|implicitlyIsUnderstood[0-1] : Boolean|getSignifierText() : String\nsetSignifierText(value : String)\n}"]
 Designation->Expression[arrowhead=vee,arrowtail=none,headlabel="signifier",group=Expression,minlen=2,constraint=false,]
 Designation->Representation[arrowhead=onormal,group=Representation,minlen=2,constraint=true,]
;
 node[shape=record];
Representation[label="{Representation| | }"]
 Representation->Meaning[arrowhead=vee,arrowtail=none,headlabel="meaning",group=Meaning,minlen=2,constraint=false,]
 Representation->Expression[arrowhead=vee,arrowtail=none,headlabel="expression",group=Expression,minlen=2,constraint=false,]
 Representation->Actuality[arrowhead=onormal,group=Actuality,minlen=2,constraint=true,]
;
 node[shape=record];
Meaning[label="{Meaning| | }"]
 Meaning->Representation[arrowhead=vee,arrowtail=none,headlabel="representation[*]",group=Representation,minlen=2,constraint=false,]
 Meaning->Thing[arrowhead=onormal,group=Thing,minlen=2,constraint=true,]
;
 node[shape=record];
Expression[label="{Expression| | }"]
 Expression->BindableTarget[arrowhead=onormal,group=BindableTarget,minlen=2,constraint=true,]
;
 node[shape=record];
BindableTarget[label="{BindableTarget| | }"]
 BindableTarget->Thing[arrowhead=onormal,group=Thing,minlen=2,constraint=true,]
;
 node[shape=record];
AdoptedDefinition[label="{AdoptedDefinition| | }"]
 AdoptedDefinition->Definition[arrowhead=onormal,group=Definition,minlen=2,constraint=true,]
;
 node[shape=record];
Definition[label="{Definition| | }"]
 Definition->Representation[arrowhead=onormal,group=Representation,minlen=2,constraint=true,]
;
 node[shape=record];
Advice[label="{Advice| | }"]
 Advice->ElementOfGuidance[arrowhead=onormal,group=ElementOfGuidance,minlen=2,constraint=true,]
;
 node[shape=record];
ElementOfGuidance[label="{ElementOfGuidance|isPracticable[0-1] : Boolean| }"]
 ElementOfGuidance->Proposition[arrowhead=onormal,group=Proposition,minlen=2,constraint=true,]
;
 node[shape=record];
Proposition[label="{Proposition|isFalse[0-1] : Boolean\nisTrue[0-1] : Boolean\nisPossiblyTrue[0-1] : Boolean\nisObligatedToBeTrue[0-1] : Boolean\nisPermittedToBeTrue[0-1] : Boolean\nisNecessarilyTrue[0-1] : Boolean| }"]
 Proposition->Statement[arrowhead=vee,arrowtail=none,headlabel="statement[*]",group=Statement,minlen=2,constraint=false,]
 Proposition->Meaning[arrowhead=onormal,group=Meaning,minlen=2,constraint=true,]
;
 node[shape=record];
Statement[label="{Statement| | }"]
 Statement->Representation[arrowhead=onormal,group=Representation,minlen=2,constraint=true,]
;
 node[shape=record];
AdviceOfContingency[label="{AdviceOfContingency| | }"]
 AdviceOfContingency->AdviceOfPossibility[arrowhead=onormal,group=AdviceOfPossibility,minlen=2,constraint=true,]
;
 node[shape=record];
AdviceOfPossibility[label="{AdviceOfPossibility| | }"]
 AdviceOfPossibility->Advice[arrowhead=onormal,group=Advice,minlen=2,constraint=true,]
;
 node[shape=record];
AdviceOfOptionality[label="{AdviceOfOptionality| | }"]
 AdviceOfOptionality->AdviceOfPermission[arrowhead=onormal,group=AdviceOfPermission,minlen=2,constraint=true,]
;
 node[shape=record];
AdviceOfPermission[label="{AdviceOfPermission| | }"]
 AdviceOfPermission->Advice[arrowhead=onormal,group=Advice,minlen=2,constraint=true,]
;
 node[shape=record];
AdviceStatement[label="{AdviceStatement| | }"]
 AdviceStatement->GuidanceStatement[arrowhead=onormal,group=GuidanceStatement,minlen=2,constraint=true,]
;
 node[shape=record];
GuidanceStatement[label="{GuidanceStatement| | }"]
 GuidanceStatement->Statement[arrowhead=onormal,group=Statement,minlen=2,constraint=true,]
;
 node[shape=record];
AggregationFormulation[label="{AggregationFormulation| | }"]
 AggregationFormulation->ProjectingFormulation[arrowhead=onormal,group=ProjectingFormulation,minlen=2,constraint=true,]
;
 node[shape=record];
ProjectingFormulation[label="{ProjectingFormulation| | }"]
 ProjectingFormulation->Projection[arrowhead=vee,arrowtail=none,headlabel="projection",group=Projection,minlen=2,constraint=false,]
 ProjectingFormulation->LogicalFormulation[arrowhead=onormal,group=LogicalFormulation,minlen=2,constraint=true,]
;
 node[shape=record];
LogicalFormulation[label="{LogicalFormulation| | }"]
 LogicalFormulation->SemanticFormulation[arrowhead=onormal,group=SemanticFormulation,minlen=2,constraint=true,]
;
 node[shape=record];
SemanticFormulation[label="{SemanticFormulation| | }"]
 SemanticFormulation->Thing[arrowhead=onormal,group=Thing,minlen=2,constraint=true,]
;
 node[shape=record];
Projection[label="{Projection| | }"]
 Projection->LogicalFormulation[arrowhead=vee,arrowtail=none,headlabel="constrainingFormulation[0-1]",group=LogicalFormulation,minlen=2,constraint=false,]
 Projection->Variable[arrowhead=vee,arrowtail=none,headlabel="projectionVariable[1-*]",group=Variable,minlen=2,constraint=false,]
 Projection->AuxiliaryVariable[arrowhead=vee,arrowtail=none,headlabel="auxiliaryVariable[*]",group=AuxiliaryVariable,minlen=2,constraint=false,]
 Projection->SemanticFormulation[arrowhead=onormal,group=SemanticFormulation,minlen=2,constraint=true,]
;
 node[shape=record];
Variable[label="{Variable|isUnitary[0-1] : Boolean| }"]
 Variable->LogicalFormulation[arrowhead=vee,arrowtail=none,headlabel="restrictingFormulation[0-1]",group=LogicalFormulation,minlen=2,constraint=false,]
 Variable->PositiveInteger[arrowhead=vee,arrowtail=none,headlabel="projectionPosition[0-1]",group=PositiveInteger,minlen=2,constraint=false,]
 Variable->Concept[arrowhead=vee,arrowtail=none,headlabel="rangedoverConcept[0-1]",group=Concept,minlen=2,constraint=false,]
 Variable->BindableTarget[arrowhead=onormal,group=BindableTarget,minlen=2,constraint=true,]
;
 node[shape=record];
PositiveInteger[label="{PositiveInteger| | }"]
 PositiveInteger->NonnegativeInteger[arrowhead=onormal,group=NonnegativeInteger,minlen=2,constraint=true,]
;
 node[shape=record];
NonnegativeInteger[label="{NonnegativeInteger| | }"]
 NonnegativeInteger->Integer[arrowhead=onormal,group=Integer,minlen=2,constraint=true,]
;
 node[shape=record];
Integer[label="{Integer|value[0-1] : integer| }"]
 Integer->Number[arrowhead=onormal,group=Number,minlen=2,constraint=true,]
;
 node[shape=record];
Number[label="{Number| | }"]
 Number->Quantity[arrowhead=onormal,group=Quantity,minlen=2,constraint=true,]
;
 node[shape=record];
Quantity[label="{Quantity| | }"]
 Quantity->NounConcept[arrowhead=onormal,group=NounConcept,minlen=2,constraint=true,]
;
 node[shape=record];
NounConcept[label="{NounConcept| | }"]
 NounConcept->Concept[arrowhead=onormal,group=Concept,minlen=2,constraint=true,]
;
 node[shape=record];
Concept[label="{Concept| | }"]
 Concept->AttributiveNamespace[arrowhead=vee,arrowtail=none,headlabel="attributiveNamespace[*]",group=AttributiveNamespace,minlen=2,constraint=false,]
 Concept->Definition[arrowhead=vee,arrowtail=none,headlabel="definition[*]",group=Definition,minlen=2,constraint=false,]
 Concept->Concept[arrowhead=vee,arrowtail=none,headlabel="moreGeneralConcept[*]",group=Concept,minlen=2,constraint=false,]
 Concept->Concept[arrowhead=vee,arrowtail=none,headlabel="category[*]",group=Concept,minlen=2,constraint=false,]
 Concept->Characteristic[arrowhead=vee,arrowtail=none,headlabel="essentialCharacteristic[*]",group=Characteristic,minlen=2,constraint=false,]
 Concept->Thing[arrowhead=vee,arrowtail=none,headlabel="instance[*]",group=Thing,minlen=2,constraint=false,]
 Concept->ReferenceScheme[arrowhead=vee,arrowtail=none,headlabel="referenceScheme[*]",group=ReferenceScheme,minlen=2,constraint=false,]
 Concept->Characteristic[arrowhead=vee,arrowtail=none,headlabel="impliedCharacteristic[*]",group=Characteristic,minlen=2,constraint=false,]
 Concept->Characteristic[arrowhead=vee,arrowtail=none,headlabel="necessaryCharacteristic[*]",group=Characteristic,minlen=2,constraint=false,]
 Concept->Designation[arrowhead=vee,arrowtail=none,headlabel="designation[*]",group=Designation,minlen=2,constraint=false,]
 Concept->Set[arrowhead=vee,arrowtail=none,headlabel="extension",group=Set,minlen=2,constraint=false,]
 Concept->Meaning[arrowhead=onormal,group=Meaning,minlen=2,constraint=true,]
;
 node[shape=record];
AttributiveNamespace[label="{AttributiveNamespace| | }"]
 AttributiveNamespace->Namespace[arrowhead=onormal,group=Namespace,minlen=2,constraint=true,]
;
 node[shape=record];
Namespace[label="{Namespace| | }"]
 Namespace->Uri[arrowhead=vee,arrowtail=none,headlabel="uri[*]",group=Uri,minlen=2,constraint=false,]
 Namespace->Thing[arrowhead=onormal,group=Thing,minlen=2,constraint=true,]
;
 node[shape=record];
Uri[label="{Uri| | }"]
 Uri->Text[arrowhead=onormal,group=Text,minlen=2,constraint=true,]
;
 node[shape=record];
Text[label="{Text|value[0-1] : String| }"]
 Text->Expression[arrowhead=onormal,group=Expression,minlen=2,constraint=true,]
;
 node[shape=record];
Characteristic[label="{Characteristic| | }"]
 Characteristic->FactType[arrowhead=onormal,group=FactType,minlen=2,constraint=true,]
;
 node[shape=record];
FactType[label="{FactType| | }"]
 FactType->FactTypeForm[arrowhead=vee,arrowtail=none,headlabel="factTypeForm[*]",group=FactTypeForm,minlen=2,constraint=false,]
 FactType->FactTypeRole[arrowhead=vee,arrowtail=none,headlabel="role[1-*]",group=FactTypeRole,minlen=2,constraint=false,]
 FactType->Concept[arrowhead=onormal,group=Concept,minlen=2,constraint=true,]
;
 node[shape=record];
FactTypeForm[label="{FactTypeForm| | }"]
 FactTypeForm->Placeholder[arrowhead=vee,arrowtail=none,headlabel="placeholder[1-*]",group=Placeholder,minlen=2,constraint=false,]
 FactTypeForm->Representation[arrowhead=onormal,group=Representation,minlen=2,constraint=true,]
;
 node[shape=record];
Placeholder[label="{Placeholder| | }"]
 Placeholder->PositiveInteger[arrowhead=vee,arrowtail=none,headlabel="startingCharacterPosition[0-1]",group=PositiveInteger,minlen=2,constraint=false,]
 Placeholder->Designation[arrowhead=onormal,group=Designation,minlen=2,constraint=true,]
;
 node[shape=record];
FactTypeRole[label="{FactTypeRole| | }"]
 FactTypeRole->RoleBinding[arrowhead=vee,arrowtail=none,headlabel="roleBinding[*]",group=RoleBinding,minlen=2,constraint=false,]
 FactTypeRole->Role[arrowhead=onormal,group=Role,minlen=2,constraint=true,]
;
 node[shape=record];
Role[label="{Role| | }"]
 Role->NounConcept[arrowhead=onormal,group=NounConcept,minlen=2,constraint=true,]
;
 node[shape=record];
RoleBinding[label="{RoleBinding| | }"]
 RoleBinding->Thing[arrowhead=onormal,group=Thing,minlen=2,constraint=true,]
;
 node[shape=record];
ReferenceScheme[label="{ReferenceScheme| | }"]
 ReferenceScheme->FactTypeRole[arrowhead=vee,arrowtail=none,headlabel="simplyUsedRole[*]",group=FactTypeRole,minlen=2,constraint=false,]
 ReferenceScheme->Characteristic[arrowhead=vee,arrowtail=none,headlabel="identifyingCharacteristic[*]",group=Characteristic,minlen=2,constraint=false,]
 ReferenceScheme->FactTypeRole[arrowhead=vee,arrowtail=none,headlabel="extensionallyUsedRole[*]",group=FactTypeRole,minlen=2,constraint=false,]
 ReferenceScheme->Thing[arrowhead=onormal,group=Thing,minlen=2,constraint=true,]
;
 node[shape=record];
Set[label="{Set| | }"]
 Set->NonnegativeInteger[arrowhead=vee,arrowtail=none,headlabel="cardinality[0-1]",group=NonnegativeInteger,minlen=2,constraint=false,]
 Set->Thing[arrowhead=vee,arrowtail=none,headlabel="element[*]",group=Thing,minlen=2,constraint=false,]
 Set->Thing[arrowhead=onormal,group=Thing,minlen=2,constraint=true,]
;
 node[shape=record];
AuxiliaryVariable[label="{AuxiliaryVariable| | }"]
 AuxiliaryVariable->Variable[arrowhead=onormal,group=Variable,minlen=2,constraint=true,]
;
 node[shape=record];
AnswerNominalization[label="{AnswerNominalization| | }"]
 AnswerNominalization->ProjectingFormulation[arrowhead=onormal,group=ProjectingFormulation,minlen=2,constraint=true,]
;
 node[shape=record];
AssociativeFactType[label="{AssociativeFactType| | }"]
 AssociativeFactType->FactType[arrowhead=onormal,group=FactType,minlen=2,constraint=true,]
;
 node[shape=record];
AssortmentFactType[label="{AssortmentFactType| | }"]
 AssortmentFactType->FactType[arrowhead=onormal,group=FactType,minlen=2,constraint=true,]
;
 node[shape=record];
AtleastnQuantification[label="{AtleastnQuantification| | }"]
 AtleastnQuantification->NonnegativeInteger[arrowhead=vee,arrowtail=none,headlabel="minimumCardinality",group=NonnegativeInteger,minlen=2,constraint=false,]
 AtleastnQuantification->Quantification[arrowhead=onormal,group=Quantification,minlen=2,constraint=true,]
;
 node[shape=record];
Quantification[label="{Quantification| | }"]
 Quantification->LogicalFormulation[arrowhead=vee,arrowtail=none,headlabel="scopeFormulation[0-1]",group=LogicalFormulation,minlen=2,constraint=false,]
 Quantification->LogicalFormulation[arrowhead=onormal,group=LogicalFormulation,minlen=2,constraint=true,]
;
 node[shape=record];
AtmostnQuantification[label="{AtmostnQuantification| | }"]
 AtmostnQuantification->NonnegativeInteger[arrowhead=vee,arrowtail=none,headlabel="maximumCardinality",group=NonnegativeInteger,minlen=2,constraint=false,]
 AtmostnQuantification->Quantification[arrowhead=onormal,group=Quantification,minlen=2,constraint=true,]
;
 node[shape=record];
AtmostoneQuantification[label="{AtmostoneQuantification| | }"]
 AtmostoneQuantification->AtmostnQuantification[arrowhead=onormal,group=AtmostnQuantification,minlen=2,constraint=true,]
;
 node[shape=record];
AtomicFormulation[label="{AtomicFormulation| | }"]
 AtomicFormulation->RoleBinding[arrowhead=vee,arrowtail=none,headlabel="roleBinding[*]",group=RoleBinding,minlen=2,constraint=false,]
 AtomicFormulation->LogicalFormulation[arrowhead=onormal,group=LogicalFormulation,minlen=2,constraint=true,]
;
 node[shape=record];
BagProjection[label="{BagProjection| | }"]
 BagProjection->Projection[arrowhead=onormal,group=Projection,minlen=2,constraint=true,]
;
 node[shape=record];
BinaryFactType[label="{BinaryFactType| | }"]
 BinaryFactType->FactType[arrowhead=onormal,group=FactType,minlen=2,constraint=true,]
;
 node[shape=record];
BinaryLogicalOperation[label="{BinaryLogicalOperation| | }"]
 BinaryLogicalOperation->LogicalFormulation[arrowhead=vee,arrowtail=none,headlabel="logicalOperand2[*]",group=LogicalFormulation,minlen=2,constraint=false,]
 BinaryLogicalOperation->LogicalFormulation[arrowhead=vee,arrowtail=none,headlabel="logicalOperand1[*]",group=LogicalFormulation,minlen=2,constraint=false,]
 BinaryLogicalOperation->LogicalOperation[arrowhead=onormal,group=LogicalOperation,minlen=2,constraint=true,]
;
 node[shape=record];
LogicalOperation[label="{LogicalOperation| | }"]
 LogicalOperation->LogicalFormulation[arrowhead=vee,arrowtail=none,headlabel="logicalOperand",group=LogicalFormulation,minlen=2,constraint=false,]
 LogicalOperation->LogicalFormulation[arrowhead=onormal,group=LogicalFormulation,minlen=2,constraint=true,]
;
 node[shape=record];
BodyOfSharedConcepts[label="{BodyOfSharedConcepts| | }"]
 BodyOfSharedConcepts->Thing[arrowhead=onormal,group=Thing,minlen=2,constraint=true,]
;
 node[shape=record];
BodyOfSharedGuidance[label="{BodyOfSharedGuidance| | }"]
 BodyOfSharedGuidance->Thing[arrowhead=onormal,group=Thing,minlen=2,constraint=true,]
;
 node[shape=record];
BodyOfSharedMeanings[label="{BodyOfSharedMeanings| | }"]
 BodyOfSharedMeanings->FactType[arrowhead=vee,arrowtail=none,headlabel="elementaryFactType[*]",group=FactType,minlen=2,constraint=false,]
 BodyOfSharedMeanings->Set[arrowhead=onormal,group=Set,minlen=2,constraint=true,]
;
 node[shape=record];
BusinessPolicy[label="{BusinessPolicy| | }"]
 BusinessPolicy->ElementOfGovernance[arrowhead=onormal,group=ElementOfGovernance,minlen=2,constraint=true,]
;
 node[shape=record];
ElementOfGovernance[label="{ElementOfGovernance|isDirectlyEnforceable[0-1] : Boolean| }"]
 ElementOfGovernance->ElementOfGuidance[arrowhead=onormal,group=ElementOfGuidance,minlen=2,constraint=true,]
;
 node[shape=record];
BusinessPolicyStatement[label="{BusinessPolicyStatement| | }"]
 BusinessPolicyStatement->GuidanceStatement[arrowhead=onormal,group=GuidanceStatement,minlen=2,constraint=true,]
;
 node[shape=record];
BusinessRule[label="{BusinessRule| | }"]
 BusinessRule->ElementOfGuidance[arrowhead=onormal,group=ElementOfGuidance,minlen=2,constraint=true,]
 BusinessRule->Rule[arrowhead=onormal,group=Rule,minlen=2,constraint=true,]
;
 node[shape=record];
Rule[label="{Rule| | }"]
 Rule->Proposition[arrowhead=onormal,group=Proposition,minlen=2,constraint=true,]
;
 node[shape=record];
BusinessVocabulary[label="{BusinessVocabulary| | }"]
 BusinessVocabulary->Vocabulary[arrowhead=onormal,group=Vocabulary,minlen=2,constraint=true,]
;
 node[shape=record];
Vocabulary[label="{Vocabulary| | }"]
 Vocabulary->Set[arrowhead=onormal,group=Set,minlen=2,constraint=true,]
;
 node[shape=record];
CategorizationFactType[label="{CategorizationFactType| | }"]
 CategorizationFactType->SpecializationFactType[arrowhead=onormal,group=SpecializationFactType,minlen=2,constraint=true,]
;
 node[shape=record];
SpecializationFactType[label="{SpecializationFactType| | }"]
 SpecializationFactType->FactType[arrowhead=onormal,group=FactType,minlen=2,constraint=true,]
;
 node[shape=record];
CategorizationScheme[label="{CategorizationScheme| | }"]
 CategorizationScheme->Thing[arrowhead=onormal,group=Thing,minlen=2,constraint=true,]
;
 node[shape=record];
CategorizationType[label="{CategorizationType| | }"]
 CategorizationType->Concept[arrowhead=onormal,group=Concept,minlen=2,constraint=true,]
;
 node[shape=record];
CharacteristicType[label="{CharacteristicType| | }"]
 CharacteristicType->ConceptType[arrowhead=onormal,group=ConceptType,minlen=2,constraint=true,]
;
 node[shape=record];
ConceptType[label="{ConceptType| | }"]
 ConceptType->ObjectType[arrowhead=onormal,group=ObjectType,minlen=2,constraint=true,]
;
 node[shape=record];
ObjectType[label="{ObjectType| | }"]
 ObjectType->CategorizationScheme[arrowhead=vee,arrowtail=none,headlabel="categorizationScheme[*]",group=CategorizationScheme,minlen=2,constraint=false,]
 ObjectType->CategorizationType[arrowhead=vee,arrowtail=none,headlabel="categorizationType[*]",group=CategorizationType,minlen=2,constraint=false,]
 ObjectType->Concept[arrowhead=onormal,group=Concept,minlen=2,constraint=true,]
;
 node[shape=record];
ClosedLogicalFormulation[label="{ClosedLogicalFormulation| | }"]
 ClosedLogicalFormulation->ClosedSemanticFormulation[arrowhead=onormal,group=ClosedSemanticFormulation,minlen=2,constraint=true,]
 ClosedLogicalFormulation->LogicalFormulation[arrowhead=onormal,group=LogicalFormulation,minlen=2,constraint=true,]
;
 node[shape=record];
ClosedSemanticFormulation[label="{ClosedSemanticFormulation| | }"]
 ClosedSemanticFormulation->SemanticFormulation[arrowhead=onormal,group=SemanticFormulation,minlen=2,constraint=true,]
;
 node[shape=record];
ClosedProjection[label="{ClosedProjection| | }"]
 ClosedProjection->Projection[arrowhead=onormal,group=Projection,minlen=2,constraint=true,]
;
 node[shape=record];
CommunicationContent[label="{CommunicationContent| | }"]
 CommunicationContent->Representation[arrowhead=onormal,group=Representation,minlen=2,constraint=true,]
;
 node[shape=record];
Community[label="{Community| | }"]
 Community->Uri[arrowhead=vee,arrowtail=none,headlabel="uri[*]",group=Uri,minlen=2,constraint=false,]
 Community->Community[arrowhead=vee,arrowtail=none,headlabel="subcommunity[*]",group=Community,minlen=2,constraint=false,]
 Community->Thing[arrowhead=onormal,group=Thing,minlen=2,constraint=true,]
;
 node[shape=record];
ConceptOfThingAsComposite[label="{ConceptOfThingAsComposite| | }"]
 ConceptOfThingAsComposite->Concept[arrowhead=onormal,group=Concept,minlen=2,constraint=true,]
;
 node[shape=record];
ConceptOfThingAsContinuant[label="{ConceptOfThingAsContinuant| | }"]
 ConceptOfThingAsContinuant->Concept[arrowhead=onormal,group=Concept,minlen=2,constraint=true,]
;
 node[shape=record];
ConceptOfThingAsDeveloped[label="{ConceptOfThingAsDeveloped| | }"]
 ConceptOfThingAsDeveloped->Concept[arrowhead=onormal,group=Concept,minlen=2,constraint=true,]
;
 node[shape=record];
ConceptOfThingAsOccurrent[label="{ConceptOfThingAsOccurrent| | }"]
 ConceptOfThingAsOccurrent->Concept[arrowhead=onormal,group=Concept,minlen=2,constraint=true,]
;
 node[shape=record];
ConceptOfThingAsPrimitive[label="{ConceptOfThingAsPrimitive| | }"]
 ConceptOfThingAsPrimitive->Concept[arrowhead=onormal,group=Concept,minlen=2,constraint=true,]
;
 node[shape=record];
ConceptOfThingAsUnitary[label="{ConceptOfThingAsUnitary| | }"]
 ConceptOfThingAsUnitary->Concept[arrowhead=onormal,group=Concept,minlen=2,constraint=true,]
;
 node[shape=record];
ConceptOfThingExistingDependently[label="{ConceptOfThingExistingDependently| | }"]
 ConceptOfThingExistingDependently->Concept[arrowhead=onormal,group=Concept,minlen=2,constraint=true,]
;
 node[shape=record];
ConceptOfThingExistingIndependently[label="{ConceptOfThingExistingIndependently| | }"]
 ConceptOfThingExistingIndependently->Concept[arrowhead=onormal,group=Concept,minlen=2,constraint=true,]
;
 node[shape=record];
ConceptualSchema[label="{ConceptualSchema| | }"]
 ConceptualSchema->Thing[arrowhead=onormal,group=Thing,minlen=2,constraint=true,]
;
 node[shape=record];
Conjunction[label="{Conjunction| | }"]
 Conjunction->BinaryLogicalOperation[arrowhead=onormal,group=BinaryLogicalOperation,minlen=2,constraint=true,]
;
 node[shape=record];
ContextOfThing[label="{ContextOfThing| | }"]
 ContextOfThing->Segmentation[arrowhead=onormal,group=Segmentation,minlen=2,constraint=true,]
;
 node[shape=record];
Segmentation[label="{Segmentation| | }"]
 Segmentation->CategorizationScheme[arrowhead=onormal,group=CategorizationScheme,minlen=2,constraint=true,]
;
 node[shape=record];
ContextualizationFactType[label="{ContextualizationFactType| | }"]
 ContextualizationFactType->SpecializationFactType[arrowhead=onormal,group=SpecializationFactType,minlen=2,constraint=true,]
;
 node[shape=record];
ContextualizedConcept[label="{ContextualizedConcept| | }"]
 ContextualizedConcept->NounConcept[arrowhead=onormal,group=NounConcept,minlen=2,constraint=true,]
;
 node[shape=record];
ContingencyStatement[label="{ContingencyStatement| | }"]
 ContingencyStatement->StatementOfAdviceOfPossibility[arrowhead=onormal,group=StatementOfAdviceOfPossibility,minlen=2,constraint=true,]
;
 node[shape=record];
StatementOfAdviceOfPossibility[label="{StatementOfAdviceOfPossibility| | }"]
 StatementOfAdviceOfPossibility->AdviceStatement[arrowhead=onormal,group=AdviceStatement,minlen=2,constraint=true,]
;
 node[shape=record];
DefiniteDescription[label="{DefiniteDescription| | }"]
 DefiniteDescription->IntensionalDefinition[arrowhead=onormal,group=IntensionalDefinition,minlen=2,constraint=true,]
;
 node[shape=record];
IntensionalDefinition[label="{IntensionalDefinition| | }"]
 IntensionalDefinition->Definition[arrowhead=onormal,group=Definition,minlen=2,constraint=true,]
;
 node[shape=record];
DerivableConcept[label="{DerivableConcept| | }"]
 DerivableConcept->Concept[arrowhead=onormal,group=Concept,minlen=2,constraint=true,]
;
 node[shape=record];
Description[label="{Description| | }"]
 Description->Representation[arrowhead=onormal,group=Representation,minlen=2,constraint=true,]
;
 node[shape=record];
DescriptiveExample[label="{DescriptiveExample| | }"]
 DescriptiveExample->Representation[arrowhead=onormal,group=Representation,minlen=2,constraint=true,]
;
 node[shape=record];
Disjunction[label="{Disjunction| | }"]
 Disjunction->BinaryLogicalOperation[arrowhead=onormal,group=BinaryLogicalOperation,minlen=2,constraint=true,]
;
 node[shape=record];
Equivalence[label="{Equivalence| | }"]
 Equivalence->BinaryLogicalOperation[arrowhead=onormal,group=BinaryLogicalOperation,minlen=2,constraint=true,]
;
 node[shape=record];
ExactlynQuantification[label="{ExactlynQuantification| | }"]
 ExactlynQuantification->NonnegativeInteger[arrowhead=vee,arrowtail=none,headlabel="cardinality",group=NonnegativeInteger,minlen=2,constraint=false,]
 ExactlynQuantification->Quantification[arrowhead=onormal,group=Quantification,minlen=2,constraint=true,]
;
 node[shape=record];
ExactlyoneQuantification[label="{ExactlyoneQuantification| | }"]
 ExactlyoneQuantification->ExactlynQuantification[arrowhead=onormal,group=ExactlynQuantification,minlen=2,constraint=true,]
;
 node[shape=record];
ExclusiveDisjunction[label="{ExclusiveDisjunction| | }"]
 ExclusiveDisjunction->BinaryLogicalOperation[arrowhead=onormal,group=BinaryLogicalOperation,minlen=2,constraint=true,]
;
 node[shape=record];
ExistentialQuantification[label="{ExistentialQuantification| | }"]
 ExistentialQuantification->AtleastnQuantification[arrowhead=onormal,group=AtleastnQuantification,minlen=2,constraint=true,]
;
 node[shape=record];
ExplicitnessOfRepresentation[label="{ExplicitnessOfRepresentation| | }"]
 ExplicitnessOfRepresentation->CategorizationScheme[arrowhead=onormal,group=CategorizationScheme,minlen=2,constraint=true,]
;
 node[shape=record];
ExtensionalDefinition[label="{ExtensionalDefinition| | }"]
 ExtensionalDefinition->Definition[arrowhead=onormal,group=Definition,minlen=2,constraint=true,]
;
 node[shape=record];
Facet[label="{Facet| | }"]
 Facet->ContextualizedConcept[arrowhead=onormal,group=ContextualizedConcept,minlen=2,constraint=true,]
;
 node[shape=record];
Fact[label="{Fact| | }"]
 Fact->Proposition[arrowhead=onormal,group=Proposition,minlen=2,constraint=true,]
;
 node[shape=record];
FactModel[label="{FactModel| | }"]
 FactModel->Thing[arrowhead=onormal,group=Thing,minlen=2,constraint=true,]
;
 node[shape=record];
FactSymbol[label="{FactSymbol| | }"]
 FactSymbol->Designation[arrowhead=onormal,group=Designation,minlen=2,constraint=true,]
;
 node[shape=record];
FactTypeHasFactInFactModel[label="{FactTypeHasFactInFactModel| | }"]
 FactTypeHasFactInFactModel->FactType[arrowhead=vee,arrowtail=none,headlabel="factType",group=FactType,minlen=2,constraint=false,]
 FactTypeHasFactInFactModel->Fact[arrowhead=vee,arrowtail=none,headlabel="fact",group=Fact,minlen=2,constraint=false,]
 FactTypeHasFactInFactModel->FactModel[arrowhead=vee,arrowtail=none,headlabel="factModel",group=FactModel,minlen=2,constraint=false,]
;
 node[shape=record];
FactTypeNominalization[label="{FactTypeNominalization| | }"]
 FactTypeNominalization->ProjectingFormulation[arrowhead=onormal,group=ProjectingFormulation,minlen=2,constraint=true,]
;
 node[shape=record];
FactTypeRoleDesignation[label="{FactTypeRoleDesignation| | }"]
 FactTypeRoleDesignation->Designation[arrowhead=onormal,group=Designation,minlen=2,constraint=true,]
;
 node[shape=record];
FactTypeTemplating[label="{FactTypeTemplating| | }"]
 FactTypeTemplating->CategorizationScheme[arrowhead=onormal,group=CategorizationScheme,minlen=2,constraint=true,]
;
 node[shape=record];
FormalRepresentation[label="{FormalRepresentation| | }"]
 FormalRepresentation->Representation[arrowhead=onormal,group=Representation,minlen=2,constraint=true,]
;
 node[shape=record];
FundamentalConcept[label="{FundamentalConcept| | }"]
 FundamentalConcept->ObjectType[arrowhead=onormal,group=ObjectType,minlen=2,constraint=true,]
;
 node[shape=record];
Icon[label="{Icon| | }"]
 Icon->NonverbalDesignation[arrowhead=onormal,group=NonverbalDesignation,minlen=2,constraint=true,]
;
 node[shape=record];
NonverbalDesignation[label="{NonverbalDesignation| | }"]
 NonverbalDesignation->Designation[arrowhead=onormal,group=Designation,minlen=2,constraint=true,]
;
 node[shape=record];
Implication[label="{Implication| | }"]
 Implication->LogicalFormulation[arrowhead=vee,arrowtail=none,headlabel="consequent[*]",group=LogicalFormulation,minlen=2,constraint=false,]
 Implication->LogicalFormulation[arrowhead=vee,arrowtail=none,headlabel="antecedent[*]",group=LogicalFormulation,minlen=2,constraint=false,]
 Implication->BinaryLogicalOperation[arrowhead=onormal,group=BinaryLogicalOperation,minlen=2,constraint=true,]
;
 node[shape=record];
ImpossibilityStatement[label="{ImpossibilityStatement| | }"]
 ImpossibilityStatement->StructuralRuleStatement[arrowhead=onormal,group=StructuralRuleStatement,minlen=2,constraint=true,]
;
 node[shape=record];
StructuralRuleStatement[label="{StructuralRuleStatement| | }"]
 StructuralRuleStatement->RuleStatement[arrowhead=onormal,group=RuleStatement,minlen=2,constraint=true,]
;
 node[shape=record];
RuleStatement[label="{RuleStatement| | }"]
 RuleStatement->GuidanceStatement[arrowhead=onormal,group=GuidanceStatement,minlen=2,constraint=true,]
;
 node[shape=record];
IndividualConcept[label="{IndividualConcept| | }"]
 IndividualConcept->NounConcept[arrowhead=onormal,group=NounConcept,minlen=2,constraint=true,]
 IndividualConcept->BindableTarget[arrowhead=onormal,group=BindableTarget,minlen=2,constraint=true,]
;
 node[shape=record];
InformalRepresentation[label="{InformalRepresentation| | }"]
 InformalRepresentation->Representation[arrowhead=onormal,group=Representation,minlen=2,constraint=true,]
;
 node[shape=record];
InstantiationFormulation[label="{InstantiationFormulation| | }"]
 InstantiationFormulation->LogicalFormulation[arrowhead=onormal,group=LogicalFormulation,minlen=2,constraint=true,]
;
 node[shape=record];
IsfacetofFactType[label="{IsfacetofFactType| | }"]
 IsfacetofFactType->ContextualizationFactType[arrowhead=onormal,group=ContextualizationFactType,minlen=2,constraint=true,]
;
 node[shape=record];
IspropertyofFactType[label="{IspropertyofFactType| | }"]
 IspropertyofFactType->AssociativeFactType[arrowhead=onormal,group=AssociativeFactType,minlen=2,constraint=true,]
;
 node[shape=record];
IsroleofFactType[label="{IsroleofFactType| | }"]
 IsroleofFactType->FactType[arrowhead=onormal,group=FactType,minlen=2,constraint=true,]
;
 node[shape=record];
KindOfGuidanceStatement[label="{KindOfGuidanceStatement| | }"]
 KindOfGuidanceStatement->CategorizationScheme[arrowhead=onormal,group=CategorizationScheme,minlen=2,constraint=true,]
;
 node[shape=record];
Language[label="{Language| | }"]
 Language->Thing[arrowhead=onormal,group=Thing,minlen=2,constraint=true,]
;
 node[shape=record];
LevelOfEnforcement[label="{LevelOfEnforcement| | }"]
 LevelOfEnforcement->Thing[arrowhead=onormal,group=Thing,minlen=2,constraint=true,]
;
 node[shape=record];
LogicalFormulationKind[label="{LogicalFormulationKind| | }"]
 LogicalFormulationKind->ObjectType[arrowhead=onormal,group=ObjectType,minlen=2,constraint=true,]
;
 node[shape=record];
LogicalNegation[label="{LogicalNegation| | }"]
 LogicalNegation->LogicalOperation[arrowhead=onormal,group=LogicalOperation,minlen=2,constraint=true,]
;
 node[shape=record];
ModalFormulation[label="{ModalFormulation| | }"]
 ModalFormulation->LogicalFormulation[arrowhead=onormal,group=LogicalFormulation,minlen=2,constraint=true,]
;
 node[shape=record];
NandFormulation[label="{NandFormulation| | }"]
 NandFormulation->BinaryLogicalOperation[arrowhead=onormal,group=BinaryLogicalOperation,minlen=2,constraint=true,]
;
 node[shape=record];
NecessityFormulation[label="{NecessityFormulation| | }"]
 NecessityFormulation->ModalFormulation[arrowhead=onormal,group=ModalFormulation,minlen=2,constraint=true,]
;
 node[shape=record];
NecessityStatement[label="{NecessityStatement| | }"]
 NecessityStatement->StructuralRuleStatement[arrowhead=onormal,group=StructuralRuleStatement,minlen=2,constraint=true,]
;
 node[shape=record];
NonnecessityStatement[label="{NonnecessityStatement| | }"]
 NonnecessityStatement->StatementOfAdviceOfPossibility[arrowhead=onormal,group=StatementOfAdviceOfPossibility,minlen=2,constraint=true,]
;
 node[shape=record];
NonobligationStatement[label="{NonobligationStatement| | }"]
 NonobligationStatement->StatementOfAdviceOfPermission[arrowhead=onormal,group=StatementOfAdviceOfPermission,minlen=2,constraint=true,]
;
 node[shape=record];
StatementOfAdviceOfPermission[label="{StatementOfAdviceOfPermission| | }"]
 StatementOfAdviceOfPermission->AdviceStatement[arrowhead=onormal,group=AdviceStatement,minlen=2,constraint=true,]
;
 node[shape=record];
NorFormulation[label="{NorFormulation| | }"]
 NorFormulation->BinaryLogicalOperation[arrowhead=onormal,group=BinaryLogicalOperation,minlen=2,constraint=true,]
;
 node[shape=record];
Note[label="{Note| | }"]
 Note->Representation[arrowhead=onormal,group=Representation,minlen=2,constraint=true,]
;
 node[shape=record];
NounConceptNominalization[label="{NounConceptNominalization| | }"]
 NounConceptNominalization->ProjectingFormulation[arrowhead=onormal,group=ProjectingFormulation,minlen=2,constraint=true,]
;
 node[shape=record];
NounForm[label="{NounForm| | }"]
 NounForm->FactTypeForm[arrowhead=onormal,group=FactTypeForm,minlen=2,constraint=true,]
;
 node[shape=record];
NumericRangeQuantification[label="{NumericRangeQuantification| | }"]
 NumericRangeQuantification->NonnegativeInteger[arrowhead=vee,arrowtail=none,headlabel="maximumCardinality",group=NonnegativeInteger,minlen=2,constraint=false,]
 NumericRangeQuantification->NonnegativeInteger[arrowhead=vee,arrowtail=none,headlabel="minimumCardinality",group=NonnegativeInteger,minlen=2,constraint=false,]
 NumericRangeQuantification->Quantification[arrowhead=onormal,group=Quantification,minlen=2,constraint=true,]
;
 node[shape=record];
Objectification[label="{Objectification| | }"]
 Objectification->LogicalFormulation[arrowhead=onormal,group=LogicalFormulation,minlen=2,constraint=true,]
;
 node[shape=record];
ObligationFormulation[label="{ObligationFormulation| | }"]
 ObligationFormulation->ModalFormulation[arrowhead=onormal,group=ModalFormulation,minlen=2,constraint=true,]
;
 node[shape=record];
ObligationStatement[label="{ObligationStatement| | }"]
 ObligationStatement->OperativeBusinessRuleStatement[arrowhead=onormal,group=OperativeBusinessRuleStatement,minlen=2,constraint=true,]
;
 node[shape=record];
OperativeBusinessRuleStatement[label="{OperativeBusinessRuleStatement| | }"]
 OperativeBusinessRuleStatement->RuleStatement[arrowhead=onormal,group=RuleStatement,minlen=2,constraint=true,]
;
 node[shape=record];
OperativeBusinessRule[label="{OperativeBusinessRule| | }"]
 OperativeBusinessRule->LevelOfEnforcement[arrowhead=vee,arrowtail=none,headlabel="levelOfEnforcement[*]",group=LevelOfEnforcement,minlen=2,constraint=false,]
 OperativeBusinessRule->ElementOfGovernance[arrowhead=onormal,group=ElementOfGovernance,minlen=2,constraint=true,]
 OperativeBusinessRule->BusinessRule[arrowhead=onormal,group=BusinessRule,minlen=2,constraint=true,]
;
 node[shape=record];
OptionalityStatement[label="{OptionalityStatement| | }"]
 OptionalityStatement->StatementOfAdviceOfPermission[arrowhead=onormal,group=StatementOfAdviceOfPermission,minlen=2,constraint=true,]
;
 node[shape=record];
OwnedDefinition[label="{OwnedDefinition| | }"]
 OwnedDefinition->Definition[arrowhead=onormal,group=Definition,minlen=2,constraint=true,]
;
 node[shape=record];
PartitiveFactType[label="{PartitiveFactType| | }"]
 PartitiveFactType->BinaryFactType[arrowhead=onormal,group=BinaryFactType,minlen=2,constraint=true,]
;
 node[shape=record];
PermissibilityFormulation[label="{PermissibilityFormulation| | }"]
 PermissibilityFormulation->ModalFormulation[arrowhead=onormal,group=ModalFormulation,minlen=2,constraint=true,]
;
 node[shape=record];
PermissionStatement[label="{PermissionStatement| | }"]
 PermissionStatement->StatementOfAdviceOfPermission[arrowhead=onormal,group=StatementOfAdviceOfPermission,minlen=2,constraint=true,]
;
 node[shape=record];
PossibilityFormulation[label="{PossibilityFormulation| | }"]
 PossibilityFormulation->ModalFormulation[arrowhead=onormal,group=ModalFormulation,minlen=2,constraint=true,]
;
 node[shape=record];
PossibilityStatement[label="{PossibilityStatement| | }"]
 PossibilityStatement->StatementOfAdviceOfPossibility[arrowhead=onormal,group=StatementOfAdviceOfPossibility,minlen=2,constraint=true,]
;
 node[shape=record];
PreferredDesignation[label="{PreferredDesignation| | }"]
 PreferredDesignation->Designation[arrowhead=onormal,group=Designation,minlen=2,constraint=true,]
;
 node[shape=record];
ProhibitedDesignation[label="{ProhibitedDesignation| | }"]
 ProhibitedDesignation->Designation[arrowhead=onormal,group=Designation,minlen=2,constraint=true,]
;
 node[shape=record];
ProhibitionStatement[label="{ProhibitionStatement| | }"]
 ProhibitionStatement->OperativeBusinessRuleStatement[arrowhead=onormal,group=OperativeBusinessRuleStatement,minlen=2,constraint=true,]
;
 node[shape=record];
PropositionNominalization[label="{PropositionNominalization| | }"]
 PropositionNominalization->LogicalFormulation[arrowhead=onormal,group=LogicalFormulation,minlen=2,constraint=true,]
;
 node[shape=record];
Question[label="{Question| | }"]
 Question->Meaning[arrowhead=onormal,group=Meaning,minlen=2,constraint=true,]
;
 node[shape=record];
QuestionNominalization[label="{QuestionNominalization| | }"]
 QuestionNominalization->ProjectingFormulation[arrowhead=onormal,group=ProjectingFormulation,minlen=2,constraint=true,]
;
 node[shape=record];
RealworldNumericalCorrespondence[label="{RealworldNumericalCorrespondence| | }"]
 RealworldNumericalCorrespondence->CategorizationScheme[arrowhead=onormal,group=CategorizationScheme,minlen=2,constraint=true,]
;
 node[shape=record];
Reference[label="{Reference| | }"]
 Reference->Representation[arrowhead=onormal,group=Representation,minlen=2,constraint=true,]
;
 node[shape=record];
RepresentationFormality[label="{RepresentationFormality| | }"]
 RepresentationFormality->Segmentation[arrowhead=onormal,group=Segmentation,minlen=2,constraint=true,]
;
 node[shape=record];
Res[label="{Res| | }"]
 Res->Thing[arrowhead=onormal,group=Thing,minlen=2,constraint=true,]
;
 node[shape=record];
RestrictedPermissionStatement[label="{RestrictedPermissionStatement| | }"]
 RestrictedPermissionStatement->OperativeBusinessRuleStatement[arrowhead=onormal,group=OperativeBusinessRuleStatement,minlen=2,constraint=true,]
;
 node[shape=record];
RestrictedPossibilityStatement[label="{RestrictedPossibilityStatement| | }"]
 RestrictedPossibilityStatement->StructuralRuleStatement[arrowhead=onormal,group=StructuralRuleStatement,minlen=2,constraint=true,]
;
 node[shape=record];
Rulebook[label="{Rulebook| | }"]
 Rulebook->Set[arrowhead=onormal,group=Set,minlen=2,constraint=true,]
;
 node[shape=record];
SemanticCommunity[label="{SemanticCommunity| | }"]
 SemanticCommunity->SpeechCommunity[arrowhead=vee,arrowtail=none,headlabel="speechCommunity[*]",group=SpeechCommunity,minlen=2,constraint=false,]
 SemanticCommunity->Community[arrowhead=onormal,group=Community,minlen=2,constraint=true,]
;
 node[shape=record];
SpeechCommunity[label="{SpeechCommunity| | }"]
 SpeechCommunity->Community[arrowhead=onormal,group=Community,minlen=2,constraint=true,]
;
 node[shape=record];
SententialForm[label="{SententialForm| | }"]
 SententialForm->FactTypeForm[arrowhead=onormal,group=FactTypeForm,minlen=2,constraint=true,]
;
 node[shape=record];
SetProjection[label="{SetProjection| | }"]
 SetProjection->Projection[arrowhead=onormal,group=Projection,minlen=2,constraint=true,]
;
 node[shape=record];
Situation[label="{Situation| | }"]
 Situation->Thing[arrowhead=onormal,group=Thing,minlen=2,constraint=true,]
;
 node[shape=record];
SituationalRole[label="{SituationalRole| | }"]
 SituationalRole->ObjectType[arrowhead=onormal,group=ObjectType,minlen=2,constraint=true,]
 SituationalRole->Role[arrowhead=onormal,group=Role,minlen=2,constraint=true,]
;
 node[shape=record];
SpeechCommunityAdoptsAdoptedDefinitionCitingReference[label="{SpeechCommunityAdoptsAdoptedDefinitionCitingReference| | }"]
 SpeechCommunityAdoptsAdoptedDefinitionCitingReference->SpeechCommunity[arrowhead=vee,arrowtail=none,headlabel="speechCommunity",group=SpeechCommunity,minlen=2,constraint=false,]
 SpeechCommunityAdoptsAdoptedDefinitionCitingReference->AdoptedDefinition[arrowhead=vee,arrowtail=none,headlabel="adoptedDefinition",group=AdoptedDefinition,minlen=2,constraint=false,]
 SpeechCommunityAdoptsAdoptedDefinitionCitingReference->Reference[arrowhead=vee,arrowtail=none,headlabel="reference",group=Reference,minlen=2,constraint=false,]
;
 node[shape=record];
StateOfAffairsInvolvesThingInRole[label="{StateOfAffairsInvolvesThingInRole| | }"]
 StateOfAffairsInvolvesThingInRole->StateOfAffairs[arrowhead=vee,arrowtail=none,headlabel="stateOfAffairs",group=StateOfAffairs,minlen=2,constraint=false,]
 StateOfAffairsInvolvesThingInRole->Thing[arrowhead=vee,arrowtail=none,headlabel="thing",group=Thing,minlen=2,constraint=false,]
 StateOfAffairsInvolvesThingInRole->Role[arrowhead=vee,arrowtail=none,headlabel="role",group=Role,minlen=2,constraint=false,]
;
 node[shape=record];
StructuralBusinessRule[label="{StructuralBusinessRule| | }"]
 StructuralBusinessRule->BusinessRule[arrowhead=onormal,group=BusinessRule,minlen=2,constraint=true,]
 StructuralBusinessRule->StructuralRule[arrowhead=onormal,group=StructuralRule,minlen=2,constraint=true,]
;
 node[shape=record];
StructuralRule[label="{StructuralRule| | }"]
 StructuralRule->Rule[arrowhead=onormal,group=Rule,minlen=2,constraint=true,]
;
 node[shape=record];
SubjectField[label="{SubjectField| | }"]
 SubjectField->Thing[arrowhead=onormal,group=Thing,minlen=2,constraint=true,]
;
 node[shape=record];
Term[label="{Term| | }"]
 Term->Designation[arrowhead=onormal,group=Designation,minlen=2,constraint=true,]
;
 node[shape=record];
TerminologicalDictionary[label="{TerminologicalDictionary| | }"]
 TerminologicalDictionary->Uri[arrowhead=vee,arrowtail=diamond,headlabel="uri[*]",group=Uri,minlen=2,constraint=true,]
 TerminologicalDictionary->Thing[arrowhead=onormal,group=Thing,minlen=2,constraint=true,]
;
 node[shape=record];
ThingInContext[label="{ThingInContext| | }"]
 ThingInContext->Segmentation[arrowhead=onormal,group=Segmentation,minlen=2,constraint=true,]
;
 node[shape=record];
UniversalQuantification[label="{UniversalQuantification| | }"]
 UniversalQuantification->Quantification[arrowhead=onormal,group=Quantification,minlen=2,constraint=true,]
;
 node[shape=record];
Viewpoint[label="{Viewpoint| | }"]
 Viewpoint->Thing[arrowhead=onormal,group=Thing,minlen=2,constraint=true,]
;
 node[shape=record];
VocabularyNamespace[label="{VocabularyNamespace| | }"]
 VocabularyNamespace->Namespace[arrowhead=onormal,group=Namespace,minlen=2,constraint=true,]
;
 node[shape=record];
WhetherornotFormulation[label="{WhetherornotFormulation| | }"]
 WhetherornotFormulation->LogicalFormulation[arrowhead=vee,arrowtail=none,headlabel="inconsequent[*]",group=LogicalFormulation,minlen=2,constraint=false,]
 WhetherornotFormulation->LogicalFormulation[arrowhead=vee,arrowtail=none,headlabel="consequent[*]",group=LogicalFormulation,minlen=2,constraint=false,]
 WhetherornotFormulation->BinaryLogicalOperation[arrowhead=onormal,group=BinaryLogicalOperation,minlen=2,constraint=true,]
;
 node[shape=record];
AtleastnQuantificationHasMinimumCardinality[label="{AtleastnQuantificationHasMinimumCardinality| | }"]
 AtleastnQuantificationHasMinimumCardinality->AtleastnQuantification[arrowhead=vee,arrowtail=none,headlabel="atleastnQuantification",group=AtleastnQuantification,minlen=2,constraint=false,]
 AtleastnQuantificationHasMinimumCardinality->NonnegativeInteger[arrowhead=vee,arrowtail=none,headlabel="minimumCardinality",group=NonnegativeInteger,minlen=2,constraint=false,]
;
 node[shape=record];
AtmostnQuantificationHasMaximumCardinality[label="{AtmostnQuantificationHasMaximumCardinality| | }"]
 AtmostnQuantificationHasMaximumCardinality->AtmostnQuantification[arrowhead=vee,arrowtail=none,headlabel="atmostnQuantification",group=AtmostnQuantification,minlen=2,constraint=false,]
 AtmostnQuantificationHasMaximumCardinality->NonnegativeInteger[arrowhead=vee,arrowtail=none,headlabel="maximumCardinality",group=NonnegativeInteger,minlen=2,constraint=false,]
;
 node[shape=record];
AtomicFormulationIsBasedOnFactType[label="{AtomicFormulationIsBasedOnFactType| | }"]
 AtomicFormulationIsBasedOnFactType->AtomicFormulation[arrowhead=vee,arrowtail=none,headlabel="atomicFormulation",group=AtomicFormulation,minlen=2,constraint=false,]
 AtomicFormulationIsBasedOnFactType->FactType[arrowhead=vee,arrowtail=none,headlabel="factType",group=FactType,minlen=2,constraint=false,]
;
 node[shape=record];
AttributiveNamespaceIsForSubjectConcept[label="{AttributiveNamespaceIsForSubjectConcept| | }"]
 AttributiveNamespaceIsForSubjectConcept->AttributiveNamespace[arrowhead=vee,arrowtail=none,headlabel="attributiveNamespace",group=AttributiveNamespace,minlen=2,constraint=false,]
 AttributiveNamespaceIsForSubjectConcept->Concept[arrowhead=vee,arrowtail=none,headlabel="subjectConcept",group=Concept,minlen=2,constraint=false,]
;
 node[shape=record];
AttributiveNamespaceIsWithinVocabularyNamespace[label="{AttributiveNamespaceIsWithinVocabularyNamespace| | }"]
 AttributiveNamespaceIsWithinVocabularyNamespace->AttributiveNamespace[arrowhead=vee,arrowtail=none,headlabel="attributiveNamespace",group=AttributiveNamespace,minlen=2,constraint=false,]
 AttributiveNamespaceIsWithinVocabularyNamespace->VocabularyNamespace[arrowhead=vee,arrowtail=none,headlabel="vocabularyNamespace",group=VocabularyNamespace,minlen=2,constraint=false,]
;
 node[shape=record];
BinaryLogicalOperationHasLogicalOperand1[label="{BinaryLogicalOperationHasLogicalOperand1| | }"]
 BinaryLogicalOperationHasLogicalOperand1->BinaryLogicalOperation[arrowhead=vee,arrowtail=none,headlabel="binaryLogicalOperation",group=BinaryLogicalOperation,minlen=2,constraint=false,]
 BinaryLogicalOperationHasLogicalOperand1->LogicalFormulation[arrowhead=vee,arrowtail=none,headlabel="logicalOperand1",group=LogicalFormulation,minlen=2,constraint=false,]
;
 node[shape=record];
BinaryLogicalOperationHasLogicalOperand2[label="{BinaryLogicalOperationHasLogicalOperand2| | }"]
 BinaryLogicalOperationHasLogicalOperand2->BinaryLogicalOperation[arrowhead=vee,arrowtail=none,headlabel="binaryLogicalOperation",group=BinaryLogicalOperation,minlen=2,constraint=false,]
 BinaryLogicalOperationHasLogicalOperand2->LogicalFormulation[arrowhead=vee,arrowtail=none,headlabel="logicalOperand2",group=LogicalFormulation,minlen=2,constraint=false,]
;
 node[shape=record];
BodyOfSharedMeaningsIncludesBodyOfSharedConcepts[label="{BodyOfSharedMeaningsIncludesBodyOfSharedConcepts| | }"]
 BodyOfSharedMeaningsIncludesBodyOfSharedConcepts->BodyOfSharedMeanings[arrowhead=vee,arrowtail=none,headlabel="bodyOfSharedMeanings",group=BodyOfSharedMeanings,minlen=2,constraint=false,]
 BodyOfSharedMeaningsIncludesBodyOfSharedConcepts->BodyOfSharedConcepts[arrowhead=vee,arrowtail=none,headlabel="bodyOfSharedConcepts",group=BodyOfSharedConcepts,minlen=2,constraint=false,]
;
 node[shape=record];
BodyOfSharedMeaningsIncludesBodyOfSharedGuidance[label="{BodyOfSharedMeaningsIncludesBodyOfSharedGuidance| | }"]
 BodyOfSharedMeaningsIncludesBodyOfSharedGuidance->BodyOfSharedMeanings[arrowhead=vee,arrowtail=none,headlabel="bodyOfSharedMeanings",group=BodyOfSharedMeanings,minlen=2,constraint=false,]
 BodyOfSharedMeaningsIncludesBodyOfSharedGuidance->BodyOfSharedGuidance[arrowhead=vee,arrowtail=none,headlabel="bodyOfSharedGuidance",group=BodyOfSharedGuidance,minlen=2,constraint=false,]
;
 node[shape=record];
BodyOfSharedMeaningsUnitesSemanticCommunity[label="{BodyOfSharedMeaningsUnitesSemanticCommunity| | }"]
 BodyOfSharedMeaningsUnitesSemanticCommunity->BodyOfSharedMeanings[arrowhead=vee,arrowtail=none,headlabel="bodyOfSharedMeanings",group=BodyOfSharedMeanings,minlen=2,constraint=false,]
 BodyOfSharedMeaningsUnitesSemanticCommunity->SemanticCommunity[arrowhead=vee,arrowtail=none,headlabel="semanticCommunity",group=SemanticCommunity,minlen=2,constraint=false,]
;
 node[shape=record];
BodyOfSharedMeanings1ContainsBodyOfSharedMeanings2[label="{BodyOfSharedMeanings1ContainsBodyOfSharedMeanings2| | }"]
 BodyOfSharedMeanings1ContainsBodyOfSharedMeanings2->BodyOfSharedMeanings[arrowhead=vee,arrowtail=none,headlabel="bodyOfSharedMeanings1",group=BodyOfSharedMeanings,minlen=2,constraint=false,]
 BodyOfSharedMeanings1ContainsBodyOfSharedMeanings2->BodyOfSharedMeanings[arrowhead=vee,arrowtail=none,headlabel="bodyOfSharedMeanings2",group=BodyOfSharedMeanings,minlen=2,constraint=false,]
;
 node[shape=record];
BusinessPolicyIsBasisForAdvice[label="{BusinessPolicyIsBasisForAdvice| | }"]
 BusinessPolicyIsBasisForAdvice->BusinessPolicy[arrowhead=vee,arrowtail=none,headlabel="businessPolicy",group=BusinessPolicy,minlen=2,constraint=false,]
 BusinessPolicyIsBasisForAdvice->Advice[arrowhead=vee,arrowtail=none,headlabel="advice",group=Advice,minlen=2,constraint=false,]
;
 node[shape=record];
BusinessRuleIsDerivedFromBusinessPolicy[label="{BusinessRuleIsDerivedFromBusinessPolicy| | }"]
 BusinessRuleIsDerivedFromBusinessPolicy->BusinessRule[arrowhead=vee,arrowtail=none,headlabel="businessRule",group=BusinessRule,minlen=2,constraint=false,]
 BusinessRuleIsDerivedFromBusinessPolicy->BusinessPolicy[arrowhead=vee,arrowtail=none,headlabel="businessPolicy",group=BusinessPolicy,minlen=2,constraint=false,]
;
 node[shape=record];
CategorizationSchemeContainsCategory[label="{CategorizationSchemeContainsCategory| | }"]
 CategorizationSchemeContainsCategory->CategorizationScheme[arrowhead=vee,arrowtail=none,headlabel="categorizationScheme",group=CategorizationScheme,minlen=2,constraint=false,]
 CategorizationSchemeContainsCategory->Concept[arrowhead=vee,arrowtail=none,headlabel="category",group=Concept,minlen=2,constraint=false,]
;
 node[shape=record];
CategorizationSchemeIsForGeneralConcept[label="{CategorizationSchemeIsForGeneralConcept| | }"]
 CategorizationSchemeIsForGeneralConcept->CategorizationScheme[arrowhead=vee,arrowtail=none,headlabel="categorizationScheme",group=CategorizationScheme,minlen=2,constraint=false,]
 CategorizationSchemeIsForGeneralConcept->ObjectType[arrowhead=vee,arrowtail=none,headlabel="generalConcept",group=ObjectType,minlen=2,constraint=false,]
;
 node[shape=record];
CategorizationTypeIsForGeneralConcept[label="{CategorizationTypeIsForGeneralConcept| | }"]
 CategorizationTypeIsForGeneralConcept->CategorizationType[arrowhead=vee,arrowtail=none,headlabel="categorizationType",group=CategorizationType,minlen=2,constraint=false,]
 CategorizationTypeIsForGeneralConcept->ObjectType[arrowhead=vee,arrowtail=none,headlabel="generalConcept",group=ObjectType,minlen=2,constraint=false,]
;
 node[shape=record];
ClosedLogicalFormulationFormalizesStatement[label="{ClosedLogicalFormulationFormalizesStatement| | }"]
 ClosedLogicalFormulationFormalizesStatement->ClosedLogicalFormulation[arrowhead=vee,arrowtail=none,headlabel="closedLogicalFormulation",group=ClosedLogicalFormulation,minlen=2,constraint=false,]
 ClosedLogicalFormulationFormalizesStatement->Statement[arrowhead=vee,arrowtail=none,headlabel="statement",group=Statement,minlen=2,constraint=false,]
;
 node[shape=record];
ClosedLogicalFormulationMeansProposition[label="{ClosedLogicalFormulationMeansProposition| | }"]
 ClosedLogicalFormulationMeansProposition->ClosedLogicalFormulation[arrowhead=vee,arrowtail=none,headlabel="closedLogicalFormulation",group=ClosedLogicalFormulation,minlen=2,constraint=false,]
 ClosedLogicalFormulationMeansProposition->Proposition[arrowhead=vee,arrowtail=none,headlabel="proposition",group=Proposition,minlen=2,constraint=false,]
;
 node[shape=record];
ClosedProjectionDefinesFactType[label="{ClosedProjectionDefinesFactType| | }"]
 ClosedProjectionDefinesFactType->ClosedProjection[arrowhead=vee,arrowtail=none,headlabel="closedProjection",group=ClosedProjection,minlen=2,constraint=false,]
 ClosedProjectionDefinesFactType->FactType[arrowhead=vee,arrowtail=none,headlabel="factType",group=FactType,minlen=2,constraint=false,]
;
 node[shape=record];
ClosedProjectionDefinesNounConcept[label="{ClosedProjectionDefinesNounConcept| | }"]
 ClosedProjectionDefinesNounConcept->ClosedProjection[arrowhead=vee,arrowtail=none,headlabel="closedProjection",group=ClosedProjection,minlen=2,constraint=false,]
 ClosedProjectionDefinesNounConcept->NounConcept[arrowhead=vee,arrowtail=none,headlabel="nounConcept",group=NounConcept,minlen=2,constraint=false,]
;
 node[shape=record];
ClosedProjectionFormalizesDefinition[label="{ClosedProjectionFormalizesDefinition| | }"]
 ClosedProjectionFormalizesDefinition->ClosedProjection[arrowhead=vee,arrowtail=none,headlabel="closedProjection",group=ClosedProjection,minlen=2,constraint=false,]
 ClosedProjectionFormalizesDefinition->Definition[arrowhead=vee,arrowtail=none,headlabel="definition",group=Definition,minlen=2,constraint=false,]
;
 node[shape=record];
ClosedProjectionMeansQuestion[label="{ClosedProjectionMeansQuestion| | }"]
 ClosedProjectionMeansQuestion->ClosedProjection[arrowhead=vee,arrowtail=none,headlabel="closedProjection",group=ClosedProjection,minlen=2,constraint=false,]
 ClosedProjectionMeansQuestion->Question[arrowhead=vee,arrowtail=none,headlabel="question",group=Question,minlen=2,constraint=false,]
;
 node[shape=record];
ClosedSemanticFormulationFormulatesMeaning[label="{ClosedSemanticFormulationFormulatesMeaning| | }"]
 ClosedSemanticFormulationFormulatesMeaning->ClosedSemanticFormulation[arrowhead=vee,arrowtail=none,headlabel="closedSemanticFormulation",group=ClosedSemanticFormulation,minlen=2,constraint=false,]
 ClosedSemanticFormulationFormulatesMeaning->Meaning[arrowhead=vee,arrowtail=none,headlabel="meaning",group=Meaning,minlen=2,constraint=false,]
;
 node[shape=record];
CommunicationContentIsComposedOfRepresentation[label="{CommunicationContentIsComposedOfRepresentation| | }"]
 CommunicationContentIsComposedOfRepresentation->CommunicationContent[arrowhead=vee,arrowtail=none,headlabel="communicationContent",group=CommunicationContent,minlen=2,constraint=false,]
 CommunicationContentIsComposedOfRepresentation->Representation[arrowhead=vee,arrowtail=none,headlabel="representation",group=Representation,minlen=2,constraint=false,]
;
 node[shape=record];
CommunityHasSubcommunity[label="{CommunityHasSubcommunity| | }"]
 CommunityHasSubcommunity->Community[arrowhead=vee,arrowtail=none,headlabel="community",group=Community,minlen=2,constraint=false,]
 CommunityHasSubcommunity->Community[arrowhead=vee,arrowtail=none,headlabel="subcommunity",group=Community,minlen=2,constraint=false,]
;
 node[shape=record];
CommunityHasUri[label="{CommunityHasUri| | }"]
 CommunityHasUri->Community[arrowhead=vee,arrowtail=none,headlabel="community",group=Community,minlen=2,constraint=false,]
 CommunityHasUri->Uri[arrowhead=vee,arrowtail=none,headlabel="uri",group=Uri,minlen=2,constraint=false,]
;
 node[shape=record];
ConceptHasDefinition[label="{ConceptHasDefinition| | }"]
 ConceptHasDefinition->Concept[arrowhead=vee,arrowtail=none,headlabel="concept",group=Concept,minlen=2,constraint=false,]
 ConceptHasDefinition->Definition[arrowhead=vee,arrowtail=none,headlabel="definition",group=Definition,minlen=2,constraint=false,]
;
 node[shape=record];
ConceptHasDesignation[label="{ConceptHasDesignation| | }"]
 ConceptHasDesignation->Concept[arrowhead=vee,arrowtail=none,headlabel="concept",group=Concept,minlen=2,constraint=false,]
 ConceptHasDesignation->Designation[arrowhead=vee,arrowtail=none,headlabel="designation",group=Designation,minlen=2,constraint=false,]
;
 node[shape=record];
ConceptHasExtension[label="{ConceptHasExtension| | }"]
 ConceptHasExtension->Concept[arrowhead=vee,arrowtail=none,headlabel="concept",group=Concept,minlen=2,constraint=false,]
 ConceptHasExtension->Set[arrowhead=vee,arrowtail=none,headlabel="extension",group=Set,minlen=2,constraint=false,]
;
 node[shape=record];
ConceptHasImpliedCharacteristic[label="{ConceptHasImpliedCharacteristic| | }"]
 ConceptHasImpliedCharacteristic->Concept[arrowhead=vee,arrowtail=none,headlabel="concept",group=Concept,minlen=2,constraint=false,]
 ConceptHasImpliedCharacteristic->Characteristic[arrowhead=vee,arrowtail=none,headlabel="impliedCharacteristic",group=Characteristic,minlen=2,constraint=false,]
;
 node[shape=record];
ConceptHasInstance[label="{ConceptHasInstance| | }"]
 ConceptHasInstance->Concept[arrowhead=vee,arrowtail=none,headlabel="concept",group=Concept,minlen=2,constraint=false,]
 ConceptHasInstance->Thing[arrowhead=vee,arrowtail=none,headlabel="instance",group=Thing,minlen=2,constraint=false,]
;
 node[shape=record];
ConceptHasNecessaryCharacteristic[label="{ConceptHasNecessaryCharacteristic| | }"]
 ConceptHasNecessaryCharacteristic->Concept[arrowhead=vee,arrowtail=none,headlabel="concept",group=Concept,minlen=2,constraint=false,]
 ConceptHasNecessaryCharacteristic->Characteristic[arrowhead=vee,arrowtail=none,headlabel="necessaryCharacteristic",group=Characteristic,minlen=2,constraint=false,]
;
 node[shape=record];
ConceptHasSharedUnderstandingBySemanticCommunity[label="{ConceptHasSharedUnderstandingBySemanticCommunity| | }"]
 ConceptHasSharedUnderstandingBySemanticCommunity->Concept[arrowhead=vee,arrowtail=none,headlabel="concept",group=Concept,minlen=2,constraint=false,]
 ConceptHasSharedUnderstandingBySemanticCommunity->SemanticCommunity[arrowhead=vee,arrowtail=none,headlabel="semanticCommunity",group=SemanticCommunity,minlen=2,constraint=false,]
;
 node[shape=record];
ConceptIncorporatesCharacteristic[label="{ConceptIncorporatesCharacteristic| | }"]
 ConceptIncorporatesCharacteristic->Concept[arrowhead=vee,arrowtail=none,headlabel="concept",group=Concept,minlen=2,constraint=false,]
 ConceptIncorporatesCharacteristic->Characteristic[arrowhead=vee,arrowtail=none,headlabel="characteristic",group=Characteristic,minlen=2,constraint=false,]
;
 node[shape=record];
ConceptIsClosedInConceptualSchema[label="{ConceptIsClosedInConceptualSchema| | }"]
 ConceptIsClosedInConceptualSchema->Concept[arrowhead=vee,arrowtail=none,headlabel="concept",group=Concept,minlen=2,constraint=false,]
 ConceptIsClosedInConceptualSchema->ConceptualSchema[arrowhead=vee,arrowtail=none,headlabel="conceptualSchema",group=ConceptualSchema,minlen=2,constraint=false,]
;
 node[shape=record];
ConceptIsIncludedInBodyOfSharedConcepts[label="{ConceptIsIncludedInBodyOfSharedConcepts| | }"]
 ConceptIsIncludedInBodyOfSharedConcepts->Concept[arrowhead=vee,arrowtail=none,headlabel="concept",group=Concept,minlen=2,constraint=false,]
 ConceptIsIncludedInBodyOfSharedConcepts->BodyOfSharedConcepts[arrowhead=vee,arrowtail=none,headlabel="bodyOfSharedConcepts",group=BodyOfSharedConcepts,minlen=2,constraint=false,]
;
 node[shape=record];
Concept1IsCoextensiveWithConcept2[label="{Concept1IsCoextensiveWithConcept2| | }"]
 Concept1IsCoextensiveWithConcept2->Concept[arrowhead=vee,arrowtail=none,headlabel="concept1",group=Concept,minlen=2,constraint=false,]
 Concept1IsCoextensiveWithConcept2->Concept[arrowhead=vee,arrowtail=none,headlabel="concept2",group=Concept,minlen=2,constraint=false,]
;
 node[shape=record];
Concept1SpecializesConcept2[label="{Concept1SpecializesConcept2| | }"]
 Concept1SpecializesConcept2->Concept[arrowhead=vee,arrowtail=none,headlabel="concept1",group=Concept,minlen=2,constraint=false,]
 Concept1SpecializesConcept2->Concept[arrowhead=vee,arrowtail=none,headlabel="concept2",group=Concept,minlen=2,constraint=false,]
;
 node[shape=record];
ConceptualSchemaIncludesConcept[label="{ConceptualSchemaIncludesConcept| | }"]
 ConceptualSchemaIncludesConcept->ConceptualSchema[arrowhead=vee,arrowtail=none,headlabel="conceptualSchema",group=ConceptualSchema,minlen=2,constraint=false,]
 ConceptualSchemaIncludesConcept->Concept[arrowhead=vee,arrowtail=none,headlabel="concept",group=Concept,minlen=2,constraint=false,]
;
 node[shape=record];
ConceptualSchemaIncludesFact[label="{ConceptualSchemaIncludesFact| | }"]
 ConceptualSchemaIncludesFact->ConceptualSchema[arrowhead=vee,arrowtail=none,headlabel="conceptualSchema",group=ConceptualSchema,minlen=2,constraint=false,]
 ConceptualSchemaIncludesFact->Fact[arrowhead=vee,arrowtail=none,headlabel="fact",group=Fact,minlen=2,constraint=false,]
;
 node[shape=record];
DefinitionServesAsDesignation[label="{DefinitionServesAsDesignation| | }"]
 DefinitionServesAsDesignation->Definition[arrowhead=vee,arrowtail=none,headlabel="definition",group=Definition,minlen=2,constraint=false,]
 DefinitionServesAsDesignation->Designation[arrowhead=vee,arrowtail=none,headlabel="designation",group=Designation,minlen=2,constraint=false,]
;
 node[shape=record];
DescriptionPortraysMeaning[label="{DescriptionPortraysMeaning| | }"]
 DescriptionPortraysMeaning->Description[arrowhead=vee,arrowtail=none,headlabel="description",group=Description,minlen=2,constraint=false,]
 DescriptionPortraysMeaning->Meaning[arrowhead=vee,arrowtail=none,headlabel="meaning",group=Meaning,minlen=2,constraint=false,]
;
 node[shape=record];
DescriptiveExampleIllustratesMeaning[label="{DescriptiveExampleIllustratesMeaning| | }"]
 DescriptiveExampleIllustratesMeaning->DescriptiveExample[arrowhead=vee,arrowtail=none,headlabel="descriptiveExample",group=DescriptiveExample,minlen=2,constraint=false,]
 DescriptiveExampleIllustratesMeaning->Meaning[arrowhead=vee,arrowtail=none,headlabel="meaning",group=Meaning,minlen=2,constraint=false,]
;
 node[shape=record];
DesignationHasSignifier[label="{DesignationHasSignifier| | }"]
 DesignationHasSignifier->Designation[arrowhead=vee,arrowtail=none,headlabel="designation",group=Designation,minlen=2,constraint=false,]
 DesignationHasSignifier->Expression[arrowhead=vee,arrowtail=none,headlabel="signifier",group=Expression,minlen=2,constraint=false,]
;
 node[shape=record];
DesignationIsInNamespace[label="{DesignationIsInNamespace| | }"]
 DesignationIsInNamespace->Designation[arrowhead=vee,arrowtail=none,headlabel="designation",group=Designation,minlen=2,constraint=false,]
 DesignationIsInNamespace->Namespace[arrowhead=vee,arrowtail=none,headlabel="namespace",group=Namespace,minlen=2,constraint=false,]
;
 node[shape=record];
ElementOfGuidanceAuthorizesStateOfAffairs[label="{ElementOfGuidanceAuthorizesStateOfAffairs| | }"]
 ElementOfGuidanceAuthorizesStateOfAffairs->ElementOfGuidance[arrowhead=vee,arrowtail=none,headlabel="elementOfGuidance",group=ElementOfGuidance,minlen=2,constraint=false,]
 ElementOfGuidanceAuthorizesStateOfAffairs->StateOfAffairs[arrowhead=vee,arrowtail=none,headlabel="stateOfAffairs",group=StateOfAffairs,minlen=2,constraint=false,]
;
 node[shape=record];
ElementOfGuidanceIsIncludedInBodyOfSharedGuidance[label="{ElementOfGuidanceIsIncludedInBodyOfSharedGuidance| | }"]
 ElementOfGuidanceIsIncludedInBodyOfSharedGuidance->ElementOfGuidance[arrowhead=vee,arrowtail=none,headlabel="elementOfGuidance",group=ElementOfGuidance,minlen=2,constraint=false,]
 ElementOfGuidanceIsIncludedInBodyOfSharedGuidance->BodyOfSharedGuidance[arrowhead=vee,arrowtail=none,headlabel="bodyOfSharedGuidance",group=BodyOfSharedGuidance,minlen=2,constraint=false,]
;
 node[shape=record];
ElementOfGuidanceObligatesStateOfAffairs[label="{ElementOfGuidanceObligatesStateOfAffairs| | }"]
 ElementOfGuidanceObligatesStateOfAffairs->ElementOfGuidance[arrowhead=vee,arrowtail=none,headlabel="elementOfGuidance",group=ElementOfGuidance,minlen=2,constraint=false,]
 ElementOfGuidanceObligatesStateOfAffairs->StateOfAffairs[arrowhead=vee,arrowtail=none,headlabel="stateOfAffairs",group=StateOfAffairs,minlen=2,constraint=false,]
;
 node[shape=record];
ElementOfGuidanceProhibitsStateOfAffairs[label="{ElementOfGuidanceProhibitsStateOfAffairs| | }"]
 ElementOfGuidanceProhibitsStateOfAffairs->ElementOfGuidance[arrowhead=vee,arrowtail=none,headlabel="elementOfGuidance",group=ElementOfGuidance,minlen=2,constraint=false,]
 ElementOfGuidanceProhibitsStateOfAffairs->StateOfAffairs[arrowhead=vee,arrowtail=none,headlabel="stateOfAffairs",group=StateOfAffairs,minlen=2,constraint=false,]
;
 node[shape=record];
ExactlynQuantificationHasCardinality[label="{ExactlynQuantificationHasCardinality| | }"]
 ExactlynQuantificationHasCardinality->ExactlynQuantification[arrowhead=vee,arrowtail=none,headlabel="exactlynQuantification",group=ExactlynQuantification,minlen=2,constraint=false,]
 ExactlynQuantificationHasCardinality->NonnegativeInteger[arrowhead=vee,arrowtail=none,headlabel="cardinality",group=NonnegativeInteger,minlen=2,constraint=false,]
;
 node[shape=record];
ExpressionRepresentsMeaning[label="{ExpressionRepresentsMeaning| | }"]
 ExpressionRepresentsMeaning->Expression[arrowhead=vee,arrowtail=none,headlabel="expression",group=Expression,minlen=2,constraint=false,]
 ExpressionRepresentsMeaning->Meaning[arrowhead=vee,arrowtail=none,headlabel="meaning",group=Meaning,minlen=2,constraint=false,]
;
 node[shape=record];
FactModelIncludesFact[label="{FactModelIncludesFact| | }"]
 FactModelIncludesFact->FactModel[arrowhead=vee,arrowtail=none,headlabel="factModel",group=FactModel,minlen=2,constraint=false,]
 FactModelIncludesFact->Fact[arrowhead=vee,arrowtail=none,headlabel="fact",group=Fact,minlen=2,constraint=false,]
;
 node[shape=record];
FactModelIsBasedOnConceptualSchema[label="{FactModelIsBasedOnConceptualSchema| | }"]
 FactModelIsBasedOnConceptualSchema->FactModel[arrowhead=vee,arrowtail=none,headlabel="factModel",group=FactModel,minlen=2,constraint=false,]
 FactModelIsBasedOnConceptualSchema->ConceptualSchema[arrowhead=vee,arrowtail=none,headlabel="conceptualSchema",group=ConceptualSchema,minlen=2,constraint=false,]
;
 node[shape=record];
FactTypeFormDemonstratesDesignation[label="{FactTypeFormDemonstratesDesignation| | }"]
 FactTypeFormDemonstratesDesignation->FactTypeForm[arrowhead=vee,arrowtail=none,headlabel="factTypeForm",group=FactTypeForm,minlen=2,constraint=false,]
 FactTypeFormDemonstratesDesignation->Designation[arrowhead=vee,arrowtail=none,headlabel="designation",group=Designation,minlen=2,constraint=false,]
;
 node[shape=record];
FactTypeFormIncorporatesFactSymbol[label="{FactTypeFormIncorporatesFactSymbol| | }"]
 FactTypeFormIncorporatesFactSymbol->FactTypeForm[arrowhead=vee,arrowtail=none,headlabel="factTypeForm",group=FactTypeForm,minlen=2,constraint=false,]
 FactTypeFormIncorporatesFactSymbol->FactSymbol[arrowhead=vee,arrowtail=none,headlabel="factSymbol",group=FactSymbol,minlen=2,constraint=false,]
;
 node[shape=record];
FactTypeFormIsInNamespace[label="{FactTypeFormIsInNamespace| | }"]
 FactTypeFormIsInNamespace->FactTypeForm[arrowhead=vee,arrowtail=none,headlabel="factTypeForm",group=FactTypeForm,minlen=2,constraint=false,]
 FactTypeFormIsInNamespace->Namespace[arrowhead=vee,arrowtail=none,headlabel="namespace",group=Namespace,minlen=2,constraint=false,]
;
 node[shape=record];
FactTypeHasFactTypeForm[label="{FactTypeHasFactTypeForm| | }"]
 FactTypeHasFactTypeForm->FactType[arrowhead=vee,arrowtail=none,headlabel="factType",group=FactType,minlen=2,constraint=false,]
 FactTypeHasFactTypeForm->FactTypeForm[arrowhead=vee,arrowtail=none,headlabel="factTypeForm",group=FactTypeForm,minlen=2,constraint=false,]
;
 node[shape=record];
FactTypeInternallyIsClosedInConceptualSchema[label="{FactTypeInternallyIsClosedInConceptualSchema| | }"]
 FactTypeInternallyIsClosedInConceptualSchema->FactType[arrowhead=vee,arrowtail=none,headlabel="factType",group=FactType,minlen=2,constraint=false,]
 FactTypeInternallyIsClosedInConceptualSchema->ConceptualSchema[arrowhead=vee,arrowtail=none,headlabel="conceptualSchema",group=ConceptualSchema,minlen=2,constraint=false,]
;
 node[shape=record];
FactTypeIsElementaryInBodyOfSharedMeanings[label="{FactTypeIsElementaryInBodyOfSharedMeanings| | }"]
 FactTypeIsElementaryInBodyOfSharedMeanings->FactType[arrowhead=vee,arrowtail=none,headlabel="factType",group=FactType,minlen=2,constraint=false,]
 FactTypeIsElementaryInBodyOfSharedMeanings->BodyOfSharedMeanings[arrowhead=vee,arrowtail=none,headlabel="bodyOfSharedMeanings",group=BodyOfSharedMeanings,minlen=2,constraint=false,]
;
 node[shape=record];
FactTypeRoleHasRoleBinding[label="{FactTypeRoleHasRoleBinding| | }"]
 FactTypeRoleHasRoleBinding->FactTypeRole[arrowhead=vee,arrowtail=none,headlabel="factTypeRole",group=FactTypeRole,minlen=2,constraint=false,]
 FactTypeRoleHasRoleBinding->RoleBinding[arrowhead=vee,arrowtail=none,headlabel="roleBinding",group=RoleBinding,minlen=2,constraint=false,]
;
 node[shape=record];
FactTypeRoleIsInFactType[label="{FactTypeRoleIsInFactType| | }"]
 FactTypeRoleIsInFactType->FactTypeRole[arrowhead=vee,arrowtail=none,headlabel="factTypeRole",group=FactTypeRole,minlen=2,constraint=false,]
 FactTypeRoleIsInFactType->FactType[arrowhead=vee,arrowtail=none,headlabel="factType",group=FactType,minlen=2,constraint=false,]
;
 node[shape=record];
ImplicationHasAntecedent[label="{ImplicationHasAntecedent| | }"]
 ImplicationHasAntecedent->Implication[arrowhead=vee,arrowtail=none,headlabel="implication",group=Implication,minlen=2,constraint=false,]
 ImplicationHasAntecedent->LogicalFormulation[arrowhead=vee,arrowtail=none,headlabel="antecedent",group=LogicalFormulation,minlen=2,constraint=false,]
;
 node[shape=record];
ImplicationHasConsequent[label="{ImplicationHasConsequent| | }"]
 ImplicationHasConsequent->Implication[arrowhead=vee,arrowtail=none,headlabel="implication",group=Implication,minlen=2,constraint=false,]
 ImplicationHasConsequent->LogicalFormulation[arrowhead=vee,arrowtail=none,headlabel="consequent",group=LogicalFormulation,minlen=2,constraint=false,]
;
 node[shape=record];
InstantiationFormulationBindsToBindableTarget[label="{InstantiationFormulationBindsToBindableTarget| | }"]
 InstantiationFormulationBindsToBindableTarget->InstantiationFormulation[arrowhead=vee,arrowtail=none,headlabel="instantiationFormulation",group=InstantiationFormulation,minlen=2,constraint=false,]
 InstantiationFormulationBindsToBindableTarget->BindableTarget[arrowhead=vee,arrowtail=none,headlabel="bindableTarget",group=BindableTarget,minlen=2,constraint=false,]
;
 node[shape=record];
InstantiationFormulationConsidersConcept[label="{InstantiationFormulationConsidersConcept| | }"]
 InstantiationFormulationConsidersConcept->InstantiationFormulation[arrowhead=vee,arrowtail=none,headlabel="instantiationFormulation",group=InstantiationFormulation,minlen=2,constraint=false,]
 InstantiationFormulationConsidersConcept->Concept[arrowhead=vee,arrowtail=none,headlabel="concept",group=Concept,minlen=2,constraint=false,]
;
 node[shape=record];
IntensionalDefinitionUsesDelimitingCharacteristic[label="{IntensionalDefinitionUsesDelimitingCharacteristic| | }"]
 IntensionalDefinitionUsesDelimitingCharacteristic->IntensionalDefinition[arrowhead=vee,arrowtail=none,headlabel="intensionalDefinition",group=IntensionalDefinition,minlen=2,constraint=false,]
 IntensionalDefinitionUsesDelimitingCharacteristic->Characteristic[arrowhead=vee,arrowtail=none,headlabel="delimitingCharacteristic",group=Characteristic,minlen=2,constraint=false,]
;
 node[shape=record];
LogicalFormulationConstrainsProjection[label="{LogicalFormulationConstrainsProjection| | }"]
 LogicalFormulationConstrainsProjection->LogicalFormulation[arrowhead=vee,arrowtail=none,headlabel="logicalFormulation",group=LogicalFormulation,minlen=2,constraint=false,]
 LogicalFormulationConstrainsProjection->Projection[arrowhead=vee,arrowtail=none,headlabel="projection",group=Projection,minlen=2,constraint=false,]
;
 node[shape=record];
LogicalFormulationRestrictsVariable[label="{LogicalFormulationRestrictsVariable| | }"]
 LogicalFormulationRestrictsVariable->LogicalFormulation[arrowhead=vee,arrowtail=none,headlabel="logicalFormulation",group=LogicalFormulation,minlen=2,constraint=false,]
 LogicalFormulationRestrictsVariable->Variable[arrowhead=vee,arrowtail=none,headlabel="variable",group=Variable,minlen=2,constraint=false,]
;
 node[shape=record];
LogicalOperationHasLogicalOperand[label="{LogicalOperationHasLogicalOperand| | }"]
 LogicalOperationHasLogicalOperand->LogicalOperation[arrowhead=vee,arrowtail=none,headlabel="logicalOperation",group=LogicalOperation,minlen=2,constraint=false,]
 LogicalOperationHasLogicalOperand->LogicalFormulation[arrowhead=vee,arrowtail=none,headlabel="logicalOperand",group=LogicalFormulation,minlen=2,constraint=false,]
;
 node[shape=record];
MeaningCorrespondsToThing[label="{MeaningCorrespondsToThing| | }"]
 MeaningCorrespondsToThing->Meaning[arrowhead=vee,arrowtail=none,headlabel="meaning",group=Meaning,minlen=2,constraint=false,]
 MeaningCorrespondsToThing->Thing[arrowhead=vee,arrowtail=none,headlabel="thing",group=Thing,minlen=2,constraint=false,]
;
 node[shape=record];
ModalFormulationEmbedsLogicalFormulation[label="{ModalFormulationEmbedsLogicalFormulation| | }"]
 ModalFormulationEmbedsLogicalFormulation->ModalFormulation[arrowhead=vee,arrowtail=none,headlabel="modalFormulation",group=ModalFormulation,minlen=2,constraint=false,]
 ModalFormulationEmbedsLogicalFormulation->LogicalFormulation[arrowhead=vee,arrowtail=none,headlabel="logicalFormulation",group=LogicalFormulation,minlen=2,constraint=false,]
;
 node[shape=record];
NameReferencesThing[label="{NameReferencesThing| | }"]
 NameReferencesThing->Name[arrowhead=vee,arrowtail=none,headlabel="name",group=Name,minlen=2,constraint=false,]
 NameReferencesThing->Thing[arrowhead=vee,arrowtail=none,headlabel="thing",group=Thing,minlen=2,constraint=false,]
;
 node[shape=record];
NamespaceHasUri[label="{NamespaceHasUri| | }"]
 NamespaceHasUri->Namespace[arrowhead=vee,arrowtail=none,headlabel="namespace",group=Namespace,minlen=2,constraint=false,]
 NamespaceHasUri->Uri[arrowhead=vee,arrowtail=none,headlabel="uri",group=Uri,minlen=2,constraint=false,]
;
 node[shape=record];
Namespace1IncorporatesNamespace2[label="{Namespace1IncorporatesNamespace2| | }"]
 Namespace1IncorporatesNamespace2->Namespace[arrowhead=vee,arrowtail=none,headlabel="namespace1",group=Namespace,minlen=2,constraint=false,]
 Namespace1IncorporatesNamespace2->Namespace[arrowhead=vee,arrowtail=none,headlabel="namespace2",group=Namespace,minlen=2,constraint=false,]
;
 node[shape=record];
NoteCommentsOnMeaning[label="{NoteCommentsOnMeaning| | }"]
 NoteCommentsOnMeaning->Note[arrowhead=vee,arrowtail=none,headlabel="note",group=Note,minlen=2,constraint=false,]
 NoteCommentsOnMeaning->Meaning[arrowhead=vee,arrowtail=none,headlabel="meaning",group=Meaning,minlen=2,constraint=false,]
;
 node[shape=record];
NumericRangeQuantificationHasMaximumCardinality[label="{NumericRangeQuantificationHasMaximumCardinality| | }"]
 NumericRangeQuantificationHasMaximumCardinality->NumericRangeQuantification[arrowhead=vee,arrowtail=none,headlabel="numericRangeQuantification",group=NumericRangeQuantification,minlen=2,constraint=false,]
 NumericRangeQuantificationHasMaximumCardinality->NonnegativeInteger[arrowhead=vee,arrowtail=none,headlabel="maximumCardinality",group=NonnegativeInteger,minlen=2,constraint=false,]
;
 node[shape=record];
NumericRangeQuantificationHasMinimumCardinality[label="{NumericRangeQuantificationHasMinimumCardinality| | }"]
 NumericRangeQuantificationHasMinimumCardinality->NumericRangeQuantification[arrowhead=vee,arrowtail=none,headlabel="numericRangeQuantification",group=NumericRangeQuantification,minlen=2,constraint=false,]
 NumericRangeQuantificationHasMinimumCardinality->NonnegativeInteger[arrowhead=vee,arrowtail=none,headlabel="minimumCardinality",group=NonnegativeInteger,minlen=2,constraint=false,]
;
 node[shape=record];
ObjectificationBindsToBindableTarget[label="{ObjectificationBindsToBindableTarget| | }"]
 ObjectificationBindsToBindableTarget->Objectification[arrowhead=vee,arrowtail=none,headlabel="objectification",group=Objectification,minlen=2,constraint=false,]
 ObjectificationBindsToBindableTarget->BindableTarget[arrowhead=vee,arrowtail=none,headlabel="bindableTarget",group=BindableTarget,minlen=2,constraint=false,]
;
 node[shape=record];
ObjectificationConsidersLogicalFormulation[label="{ObjectificationConsidersLogicalFormulation| | }"]
 ObjectificationConsidersLogicalFormulation->Objectification[arrowhead=vee,arrowtail=none,headlabel="objectification",group=Objectification,minlen=2,constraint=false,]
 ObjectificationConsidersLogicalFormulation->LogicalFormulation[arrowhead=vee,arrowtail=none,headlabel="logicalFormulation",group=LogicalFormulation,minlen=2,constraint=false,]
;
 node[shape=record];
OperativeBusinessRuleHasLevelOfEnforcement[label="{OperativeBusinessRuleHasLevelOfEnforcement| | }"]
 OperativeBusinessRuleHasLevelOfEnforcement->OperativeBusinessRule[arrowhead=vee,arrowtail=none,headlabel="operativeBusinessRule",group=OperativeBusinessRule,minlen=2,constraint=false,]
 OperativeBusinessRuleHasLevelOfEnforcement->LevelOfEnforcement[arrowhead=vee,arrowtail=none,headlabel="levelOfEnforcement",group=LevelOfEnforcement,minlen=2,constraint=false,]
;
 node[shape=record];
PlaceholderIsAtStartingCharacterPosition[label="{PlaceholderIsAtStartingCharacterPosition| | }"]
 PlaceholderIsAtStartingCharacterPosition->Placeholder[arrowhead=vee,arrowtail=none,headlabel="placeholder",group=Placeholder,minlen=2,constraint=false,]
 PlaceholderIsAtStartingCharacterPosition->PositiveInteger[arrowhead=vee,arrowtail=none,headlabel="startingCharacterPosition",group=PositiveInteger,minlen=2,constraint=false,]
;
 node[shape=record];
PlaceholderIsInFactTypeForm[label="{PlaceholderIsInFactTypeForm| | }"]
 PlaceholderIsInFactTypeForm->Placeholder[arrowhead=vee,arrowtail=none,headlabel="placeholder",group=Placeholder,minlen=2,constraint=false,]
 PlaceholderIsInFactTypeForm->FactTypeForm[arrowhead=vee,arrowtail=none,headlabel="factTypeForm",group=FactTypeForm,minlen=2,constraint=false,]
;
 node[shape=record];
PlaceholderUsesDesignation[label="{PlaceholderUsesDesignation| | }"]
 PlaceholderUsesDesignation->Placeholder[arrowhead=vee,arrowtail=none,headlabel="placeholder",group=Placeholder,minlen=2,constraint=false,]
 PlaceholderUsesDesignation->Designation[arrowhead=vee,arrowtail=none,headlabel="designation",group=Designation,minlen=2,constraint=false,]
;
 node[shape=record];
ProjectingFormulationBindsToBindableTarget[label="{ProjectingFormulationBindsToBindableTarget| | }"]
 ProjectingFormulationBindsToBindableTarget->ProjectingFormulation[arrowhead=vee,arrowtail=none,headlabel="projectingFormulation",group=ProjectingFormulation,minlen=2,constraint=false,]
 ProjectingFormulationBindsToBindableTarget->BindableTarget[arrowhead=vee,arrowtail=none,headlabel="bindableTarget",group=BindableTarget,minlen=2,constraint=false,]
;
 node[shape=record];
ProjectingFormulationHasProjection[label="{ProjectingFormulationHasProjection| | }"]
 ProjectingFormulationHasProjection->ProjectingFormulation[arrowhead=vee,arrowtail=none,headlabel="projectingFormulation",group=ProjectingFormulation,minlen=2,constraint=false,]
 ProjectingFormulationHasProjection->Projection[arrowhead=vee,arrowtail=none,headlabel="projection",group=Projection,minlen=2,constraint=false,]
;
 node[shape=record];
ProjectionHasAuxiliaryVariable[label="{ProjectionHasAuxiliaryVariable| | }"]
 ProjectionHasAuxiliaryVariable->Projection[arrowhead=vee,arrowtail=none,headlabel="projection",group=Projection,minlen=2,constraint=false,]
 ProjectionHasAuxiliaryVariable->AuxiliaryVariable[arrowhead=vee,arrowtail=none,headlabel="auxiliaryVariable",group=AuxiliaryVariable,minlen=2,constraint=false,]
;
 node[shape=record];
ProjectionIsOnVariable[label="{ProjectionIsOnVariable| | }"]
 ProjectionIsOnVariable->Projection[arrowhead=vee,arrowtail=none,headlabel="projection",group=Projection,minlen=2,constraint=false,]
 ProjectionIsOnVariable->Variable[arrowhead=vee,arrowtail=none,headlabel="variable",group=Variable,minlen=2,constraint=false,]
;
 node[shape=record];
PropositionIsBasedOnFactType[label="{PropositionIsBasedOnFactType| | }"]
 PropositionIsBasedOnFactType->Proposition[arrowhead=vee,arrowtail=none,headlabel="proposition",group=Proposition,minlen=2,constraint=false,]
 PropositionIsBasedOnFactType->FactType[arrowhead=vee,arrowtail=none,headlabel="factType",group=FactType,minlen=2,constraint=false,]
;
 node[shape=record];
PropositionNominalizationBindsToBindableTarget[label="{PropositionNominalizationBindsToBindableTarget| | }"]
 PropositionNominalizationBindsToBindableTarget->PropositionNominalization[arrowhead=vee,arrowtail=none,headlabel="propositionNominalization",group=PropositionNominalization,minlen=2,constraint=false,]
 PropositionNominalizationBindsToBindableTarget->BindableTarget[arrowhead=vee,arrowtail=none,headlabel="bindableTarget",group=BindableTarget,minlen=2,constraint=false,]
;
 node[shape=record];
PropositionNominalizationConsidersLogicalFormulation[label="{PropositionNominalizationConsidersLogicalFormulation| | }"]
 PropositionNominalizationConsidersLogicalFormulation->PropositionNominalization[arrowhead=vee,arrowtail=none,headlabel="propositionNominalization",group=PropositionNominalization,minlen=2,constraint=false,]
 PropositionNominalizationConsidersLogicalFormulation->LogicalFormulation[arrowhead=vee,arrowtail=none,headlabel="logicalFormulation",group=LogicalFormulation,minlen=2,constraint=false,]
;
 node[shape=record];
QuantificationIntroducesVariable[label="{QuantificationIntroducesVariable| | }"]
 QuantificationIntroducesVariable->Quantification[arrowhead=vee,arrowtail=none,headlabel="quantification",group=Quantification,minlen=2,constraint=false,]
 QuantificationIntroducesVariable->Variable[arrowhead=vee,arrowtail=none,headlabel="variable",group=Variable,minlen=2,constraint=false,]
;
 node[shape=record];
QuantificationScopesOverLogicalFormulation[label="{QuantificationScopesOverLogicalFormulation| | }"]
 QuantificationScopesOverLogicalFormulation->Quantification[arrowhead=vee,arrowtail=none,headlabel="quantification",group=Quantification,minlen=2,constraint=false,]
 QuantificationScopesOverLogicalFormulation->LogicalFormulation[arrowhead=vee,arrowtail=none,headlabel="logicalFormulation",group=LogicalFormulation,minlen=2,constraint=false,]
;
 node[shape=record];
Quantity1EqualsQuantity2[label="{Quantity1EqualsQuantity2| | }"]
 Quantity1EqualsQuantity2->Quantity[arrowhead=vee,arrowtail=none,headlabel="quantity1",group=Quantity,minlen=2,constraint=false,]
 Quantity1EqualsQuantity2->Quantity[arrowhead=vee,arrowtail=none,headlabel="quantity2",group=Quantity,minlen=2,constraint=false,]
;
 node[shape=record];
Quantity1IsLessThanQuantity2[label="{Quantity1IsLessThanQuantity2| | }"]
 Quantity1IsLessThanQuantity2->Quantity[arrowhead=vee,arrowtail=none,headlabel="quantity1",group=Quantity,minlen=2,constraint=false,]
 Quantity1IsLessThanQuantity2->Quantity[arrowhead=vee,arrowtail=none,headlabel="quantity2",group=Quantity,minlen=2,constraint=false,]
;
 node[shape=record];
ReferencePointsToInformationSource[label="{ReferencePointsToInformationSource| | }"]
 ReferencePointsToInformationSource->Reference[arrowhead=vee,arrowtail=none,headlabel="reference",group=Reference,minlen=2,constraint=false,]
 ReferencePointsToInformationSource->CommunicationContent[arrowhead=vee,arrowtail=none,headlabel="informationSource",group=CommunicationContent,minlen=2,constraint=false,]
;
 node[shape=record];
ReferenceSchemeExtensionallyUsesFactTypeRole[label="{ReferenceSchemeExtensionallyUsesFactTypeRole| | }"]
 ReferenceSchemeExtensionallyUsesFactTypeRole->ReferenceScheme[arrowhead=vee,arrowtail=none,headlabel="referenceScheme",group=ReferenceScheme,minlen=2,constraint=false,]
 ReferenceSchemeExtensionallyUsesFactTypeRole->FactTypeRole[arrowhead=vee,arrowtail=none,headlabel="factTypeRole",group=FactTypeRole,minlen=2,constraint=false,]
;
 node[shape=record];
ReferenceSchemeIsForConcept[label="{ReferenceSchemeIsForConcept| | }"]
 ReferenceSchemeIsForConcept->ReferenceScheme[arrowhead=vee,arrowtail=none,headlabel="referenceScheme",group=ReferenceScheme,minlen=2,constraint=false,]
 ReferenceSchemeIsForConcept->Concept[arrowhead=vee,arrowtail=none,headlabel="concept",group=Concept,minlen=2,constraint=false,]
;
 node[shape=record];
ReferenceSchemeSimplyUsesFactTypeRole[label="{ReferenceSchemeSimplyUsesFactTypeRole| | }"]
 ReferenceSchemeSimplyUsesFactTypeRole->ReferenceScheme[arrowhead=vee,arrowtail=none,headlabel="referenceScheme",group=ReferenceScheme,minlen=2,constraint=false,]
 ReferenceSchemeSimplyUsesFactTypeRole->FactTypeRole[arrowhead=vee,arrowtail=none,headlabel="factTypeRole",group=FactTypeRole,minlen=2,constraint=false,]
;
 node[shape=record];
ReferenceSchemeUsesCharacteristic[label="{ReferenceSchemeUsesCharacteristic| | }"]
 ReferenceSchemeUsesCharacteristic->ReferenceScheme[arrowhead=vee,arrowtail=none,headlabel="referenceScheme",group=ReferenceScheme,minlen=2,constraint=false,]
 ReferenceSchemeUsesCharacteristic->Characteristic[arrowhead=vee,arrowtail=none,headlabel="characteristic",group=Characteristic,minlen=2,constraint=false,]
;
 node[shape=record];
ReferenceSupportsMeaning[label="{ReferenceSupportsMeaning| | }"]
 ReferenceSupportsMeaning->Reference[arrowhead=vee,arrowtail=none,headlabel="reference",group=Reference,minlen=2,constraint=false,]
 ReferenceSupportsMeaning->Meaning[arrowhead=vee,arrowtail=none,headlabel="meaning",group=Meaning,minlen=2,constraint=false,]
;
 node[shape=record];
RepresentationHasExpression[label="{RepresentationHasExpression| | }"]
 RepresentationHasExpression->Representation[arrowhead=vee,arrowtail=none,headlabel="representation",group=Representation,minlen=2,constraint=false,]
 RepresentationHasExpression->Expression[arrowhead=vee,arrowtail=none,headlabel="expression",group=Expression,minlen=2,constraint=false,]
;
 node[shape=record];
RepresentationIsInDesignationContext[label="{RepresentationIsInDesignationContext| | }"]
 RepresentationIsInDesignationContext->Representation[arrowhead=vee,arrowtail=none,headlabel="representation",group=Representation,minlen=2,constraint=false,]
 RepresentationIsInDesignationContext->Concept[arrowhead=vee,arrowtail=none,headlabel="designationContext",group=Concept,minlen=2,constraint=false,]
;
 node[shape=record];
RepresentationIsInSubjectField[label="{RepresentationIsInSubjectField| | }"]
 RepresentationIsInSubjectField->Representation[arrowhead=vee,arrowtail=none,headlabel="representation",group=Representation,minlen=2,constraint=false,]
 RepresentationIsInSubjectField->SubjectField[arrowhead=vee,arrowtail=none,headlabel="subjectField",group=SubjectField,minlen=2,constraint=false,]
;
 node[shape=record];
RepresentationRepresentsMeaning[label="{RepresentationRepresentsMeaning| | }"]
 RepresentationRepresentsMeaning->Representation[arrowhead=vee,arrowtail=none,headlabel="representation",group=Representation,minlen=2,constraint=false,]
 RepresentationRepresentsMeaning->Meaning[arrowhead=vee,arrowtail=none,headlabel="meaning",group=Meaning,minlen=2,constraint=false,]
;
 node[shape=record];
RepresentationUsesVocabulary[label="{RepresentationUsesVocabulary| | }"]
 RepresentationUsesVocabulary->Representation[arrowhead=vee,arrowtail=none,headlabel="representation",group=Representation,minlen=2,constraint=false,]
 RepresentationUsesVocabulary->Vocabulary[arrowhead=vee,arrowtail=none,headlabel="vocabulary",group=Vocabulary,minlen=2,constraint=false,]
;
 node[shape=record];
ResIsSensoryManifestationOfSignifier[label="{ResIsSensoryManifestationOfSignifier| | }"]
 ResIsSensoryManifestationOfSignifier->Res[arrowhead=vee,arrowtail=none,headlabel="res",group=Res,minlen=2,constraint=false,]
 ResIsSensoryManifestationOfSignifier->Expression[arrowhead=vee,arrowtail=none,headlabel="signifier",group=Expression,minlen=2,constraint=false,]
;
 node[shape=record];
RoleBindingBindsToBindableTarget[label="{RoleBindingBindsToBindableTarget| | }"]
 RoleBindingBindsToBindableTarget->RoleBinding[arrowhead=vee,arrowtail=none,headlabel="roleBinding",group=RoleBinding,minlen=2,constraint=false,]
 RoleBindingBindsToBindableTarget->BindableTarget[arrowhead=vee,arrowtail=none,headlabel="bindableTarget",group=BindableTarget,minlen=2,constraint=false,]
;
 node[shape=record];
RoleBindingOccursInAtomicFormulation[label="{RoleBindingOccursInAtomicFormulation| | }"]
 RoleBindingOccursInAtomicFormulation->RoleBinding[arrowhead=vee,arrowtail=none,headlabel="roleBinding",group=RoleBinding,minlen=2,constraint=false,]
 RoleBindingOccursInAtomicFormulation->AtomicFormulation[arrowhead=vee,arrowtail=none,headlabel="atomicFormulation",group=AtomicFormulation,minlen=2,constraint=false,]
;
 node[shape=record];
RoleRangesOverObjectType[label="{RoleRangesOverObjectType| | }"]
 RoleRangesOverObjectType->Role[arrowhead=vee,arrowtail=none,headlabel="role",group=Role,minlen=2,constraint=false,]
 RoleRangesOverObjectType->ObjectType[arrowhead=vee,arrowtail=none,headlabel="objectType",group=ObjectType,minlen=2,constraint=false,]
;
 node[shape=record];
RulebookIncludesRepresentation[label="{RulebookIncludesRepresentation| | }"]
 RulebookIncludesRepresentation->Rulebook[arrowhead=vee,arrowtail=none,headlabel="rulebook",group=Rulebook,minlen=2,constraint=false,]
 RulebookIncludesRepresentation->Representation[arrowhead=vee,arrowtail=none,headlabel="representation",group=Representation,minlen=2,constraint=false,]
;
 node[shape=record];
SemanticCommunityHasSpeechCommunity[label="{SemanticCommunityHasSpeechCommunity| | }"]
 SemanticCommunityHasSpeechCommunity->SemanticCommunity[arrowhead=vee,arrowtail=none,headlabel="semanticCommunity",group=SemanticCommunity,minlen=2,constraint=false,]
 SemanticCommunityHasSpeechCommunity->SpeechCommunity[arrowhead=vee,arrowtail=none,headlabel="speechCommunity",group=SpeechCommunity,minlen=2,constraint=false,]
;
 node[shape=record];
SetHasCardinality[label="{SetHasCardinality| | }"]
 SetHasCardinality->Set[arrowhead=vee,arrowtail=none,headlabel="set",group=Set,minlen=2,constraint=false,]
 SetHasCardinality->NonnegativeInteger[arrowhead=vee,arrowtail=none,headlabel="cardinality",group=NonnegativeInteger,minlen=2,constraint=false,]
;
 node[shape=record];
SpeechCommunityDeterminesRulebook[label="{SpeechCommunityDeterminesRulebook| | }"]
 SpeechCommunityDeterminesRulebook->SpeechCommunity[arrowhead=vee,arrowtail=none,headlabel="speechCommunity",group=SpeechCommunity,minlen=2,constraint=false,]
 SpeechCommunityDeterminesRulebook->Rulebook[arrowhead=vee,arrowtail=none,headlabel="rulebook",group=Rulebook,minlen=2,constraint=false,]
;
 node[shape=record];
SpeechCommunityOwnsOwnedDefinition[label="{SpeechCommunityOwnsOwnedDefinition| | }"]
 SpeechCommunityOwnsOwnedDefinition->SpeechCommunity[arrowhead=vee,arrowtail=none,headlabel="speechCommunity",group=SpeechCommunity,minlen=2,constraint=false,]
 SpeechCommunityOwnsOwnedDefinition->OwnedDefinition[arrowhead=vee,arrowtail=none,headlabel="ownedDefinition",group=OwnedDefinition,minlen=2,constraint=false,]
;
 node[shape=record];
SpeechCommunityOwnsVocabulary[label="{SpeechCommunityOwnsVocabulary| | }"]
 SpeechCommunityOwnsVocabulary->SpeechCommunity[arrowhead=vee,arrowtail=none,headlabel="speechCommunity",group=SpeechCommunity,minlen=2,constraint=false,]
 SpeechCommunityOwnsVocabulary->Vocabulary[arrowhead=vee,arrowtail=none,headlabel="vocabulary",group=Vocabulary,minlen=2,constraint=false,]
;
 node[shape=record];
SpeechCommunityRegulatesItsUsageOfSignifier[label="{SpeechCommunityRegulatesItsUsageOfSignifier| | }"]
 SpeechCommunityRegulatesItsUsageOfSignifier->SpeechCommunity[arrowhead=vee,arrowtail=none,headlabel="speechCommunity",group=SpeechCommunity,minlen=2,constraint=false,]
 SpeechCommunityRegulatesItsUsageOfSignifier->Expression[arrowhead=vee,arrowtail=none,headlabel="signifier",group=Expression,minlen=2,constraint=false,]
;
 node[shape=record];
SpeechCommunityUsesLanguage[label="{SpeechCommunityUsesLanguage| | }"]
 SpeechCommunityUsesLanguage->SpeechCommunity[arrowhead=vee,arrowtail=none,headlabel="speechCommunity",group=SpeechCommunity,minlen=2,constraint=false,]
 SpeechCommunityUsesLanguage->Language[arrowhead=vee,arrowtail=none,headlabel="language",group=Language,minlen=2,constraint=false,]
;
 node[shape=record];
SpeechCommunityUsesVocabulary[label="{SpeechCommunityUsesVocabulary| | }"]
 SpeechCommunityUsesVocabulary->SpeechCommunity[arrowhead=vee,arrowtail=none,headlabel="speechCommunity",group=SpeechCommunity,minlen=2,constraint=false,]
 SpeechCommunityUsesVocabulary->Vocabulary[arrowhead=vee,arrowtail=none,headlabel="vocabulary",group=Vocabulary,minlen=2,constraint=false,]
;
 node[shape=record];
StatementExpressesProposition[label="{StatementExpressesProposition| | }"]
 StatementExpressesProposition->Statement[arrowhead=vee,arrowtail=none,headlabel="statement",group=Statement,minlen=2,constraint=false,]
 StatementExpressesProposition->Proposition[arrowhead=vee,arrowtail=none,headlabel="proposition",group=Proposition,minlen=2,constraint=false,]
;
 node[shape=record];
TermDenotesThing[label="{TermDenotesThing| | }"]
 TermDenotesThing->Term[arrowhead=vee,arrowtail=none,headlabel="term",group=Term,minlen=2,constraint=false,]
 TermDenotesThing->Thing[arrowhead=vee,arrowtail=none,headlabel="thing",group=Thing,minlen=2,constraint=false,]
;
 node[shape=record];
TerminologicalDictionaryExpressesBodyOfSharedMeanings[label="{TerminologicalDictionaryExpressesBodyOfSharedMeanings| | }"]
 TerminologicalDictionaryExpressesBodyOfSharedMeanings->TerminologicalDictionary[arrowhead=vee,arrowtail=none,headlabel="terminologicalDictionary",group=TerminologicalDictionary,minlen=2,constraint=false,]
 TerminologicalDictionaryExpressesBodyOfSharedMeanings->BodyOfSharedMeanings[arrowhead=vee,arrowtail=none,headlabel="bodyOfSharedMeanings",group=BodyOfSharedMeanings,minlen=2,constraint=false,]
;
 node[shape=record];
TerminologicalDictionaryHasUri[label="{TerminologicalDictionaryHasUri| | }"]
 TerminologicalDictionaryHasUri->TerminologicalDictionary[arrowhead=vee,arrowtail=none,headlabel="terminologicalDictionary",group=TerminologicalDictionary,minlen=2,constraint=false,]
 TerminologicalDictionaryHasUri->Uri[arrowhead=vee,arrowtail=none,headlabel="uri",group=Uri,minlen=2,constraint=false,]
;
 node[shape=record];
TerminologicalDictionaryPresentsVocabulary[label="{TerminologicalDictionaryPresentsVocabulary| | }"]
 TerminologicalDictionaryPresentsVocabulary->TerminologicalDictionary[arrowhead=vee,arrowtail=none,headlabel="terminologicalDictionary",group=TerminologicalDictionary,minlen=2,constraint=false,]
 TerminologicalDictionaryPresentsVocabulary->Vocabulary[arrowhead=vee,arrowtail=none,headlabel="vocabulary",group=Vocabulary,minlen=2,constraint=false,]
;
 node[shape=record];
ThingIsInSet[label="{ThingIsInSet| | }"]
 ThingIsInSet->Thing[arrowhead=vee,arrowtail=none,headlabel="thing",group=Thing,minlen=2,constraint=false,]
 ThingIsInSet->Set[arrowhead=vee,arrowtail=none,headlabel="set",group=Set,minlen=2,constraint=false,]
;
 node[shape=record];
Thing1IsThing2[label="{Thing1IsThing2| | }"]
 Thing1IsThing2->Thing[arrowhead=vee,arrowtail=none,headlabel="thing1",group=Thing,minlen=2,constraint=false,]
 Thing1IsThing2->Thing[arrowhead=vee,arrowtail=none,headlabel="thing2",group=Thing,minlen=2,constraint=false,]
;
 node[shape=record];
VariableHasProjectionPosition[label="{VariableHasProjectionPosition| | }"]
 VariableHasProjectionPosition->Variable[arrowhead=vee,arrowtail=none,headlabel="variable",group=Variable,minlen=2,constraint=false,]
 VariableHasProjectionPosition->PositiveInteger[arrowhead=vee,arrowtail=none,headlabel="projectionPosition",group=PositiveInteger,minlen=2,constraint=false,]
;
 node[shape=record];
VariableIsFreesWithinSemanticFormulation[label="{VariableIsFreesWithinSemanticFormulation| | }"]
 VariableIsFreesWithinSemanticFormulation->Variable[arrowhead=vee,arrowtail=none,headlabel="variable",group=Variable,minlen=2,constraint=false,]
 VariableIsFreesWithinSemanticFormulation->SemanticFormulation[arrowhead=vee,arrowtail=none,headlabel="semanticFormulation",group=SemanticFormulation,minlen=2,constraint=false,]
;
 node[shape=record];
VariableMapsToFactTypeRole[label="{VariableMapsToFactTypeRole| | }"]
 VariableMapsToFactTypeRole->Variable[arrowhead=vee,arrowtail=none,headlabel="variable",group=Variable,minlen=2,constraint=false,]
 VariableMapsToFactTypeRole->FactTypeRole[arrowhead=vee,arrowtail=none,headlabel="factTypeRole",group=FactTypeRole,minlen=2,constraint=false,]
;
 node[shape=record];
VariableRangesOverConcept[label="{VariableRangesOverConcept| | }"]
 VariableRangesOverConcept->Variable[arrowhead=vee,arrowtail=none,headlabel="variable",group=Variable,minlen=2,constraint=false,]
 VariableRangesOverConcept->Concept[arrowhead=vee,arrowtail=none,headlabel="concept",group=Concept,minlen=2,constraint=false,]
;
 node[shape=record];
VocabularyIsDesignedForSpeechCommunity[label="{VocabularyIsDesignedForSpeechCommunity| | }"]
 VocabularyIsDesignedForSpeechCommunity->Vocabulary[arrowhead=vee,arrowtail=none,headlabel="vocabulary",group=Vocabulary,minlen=2,constraint=false,]
 VocabularyIsDesignedForSpeechCommunity->SpeechCommunity[arrowhead=vee,arrowtail=none,headlabel="speechCommunity",group=SpeechCommunity,minlen=2,constraint=false,]
;
 node[shape=record];
VocabularyIsExpressedInLanguage[label="{VocabularyIsExpressedInLanguage| | }"]
 VocabularyIsExpressedInLanguage->Vocabulary[arrowhead=vee,arrowtail=none,headlabel="vocabulary",group=Vocabulary,minlen=2,constraint=false,]
 VocabularyIsExpressedInLanguage->Language[arrowhead=vee,arrowtail=none,headlabel="language",group=Language,minlen=2,constraint=false,]
;
 node[shape=record];
VocabularyIsUsedToExpressBodyOfSharedMeanings[label="{VocabularyIsUsedToExpressBodyOfSharedMeanings| | }"]
 VocabularyIsUsedToExpressBodyOfSharedMeanings->Vocabulary[arrowhead=vee,arrowtail=none,headlabel="vocabulary",group=Vocabulary,minlen=2,constraint=false,]
 VocabularyIsUsedToExpressBodyOfSharedMeanings->BodyOfSharedMeanings[arrowhead=vee,arrowtail=none,headlabel="bodyOfSharedMeanings",group=BodyOfSharedMeanings,minlen=2,constraint=false,]
;
 node[shape=record];
VocabularyNamespaceIsDerivedFromVocabulary[label="{VocabularyNamespaceIsDerivedFromVocabulary| | }"]
 VocabularyNamespaceIsDerivedFromVocabulary->VocabularyNamespace[arrowhead=vee,arrowtail=none,headlabel="vocabularyNamespace",group=VocabularyNamespace,minlen=2,constraint=false,]
 VocabularyNamespaceIsDerivedFromVocabulary->Vocabulary[arrowhead=vee,arrowtail=none,headlabel="vocabulary",group=Vocabulary,minlen=2,constraint=false,]
;
 node[shape=record];
VocabularyNamespaceIsForLanguage[label="{VocabularyNamespaceIsForLanguage| | }"]
 VocabularyNamespaceIsForLanguage->VocabularyNamespace[arrowhead=vee,arrowtail=none,headlabel="vocabularyNamespace",group=VocabularyNamespace,minlen=2,constraint=false,]
 VocabularyNamespaceIsForLanguage->Language[arrowhead=vee,arrowtail=none,headlabel="language",group=Language,minlen=2,constraint=false,]
;
 node[shape=record];
VocabularyNamespaceIsSpecificToDesignationContext[label="{VocabularyNamespaceIsSpecificToDesignationContext| | }"]
 VocabularyNamespaceIsSpecificToDesignationContext->VocabularyNamespace[arrowhead=vee,arrowtail=none,headlabel="vocabularyNamespace",group=VocabularyNamespace,minlen=2,constraint=false,]
 VocabularyNamespaceIsSpecificToDesignationContext->Concept[arrowhead=vee,arrowtail=none,headlabel="designationContext",group=Concept,minlen=2,constraint=false,]
;
 node[shape=record];
VocabularyNamespaceIsSpecificToSubjectField[label="{VocabularyNamespaceIsSpecificToSubjectField| | }"]
 VocabularyNamespaceIsSpecificToSubjectField->VocabularyNamespace[arrowhead=vee,arrowtail=none,headlabel="vocabularyNamespace",group=VocabularyNamespace,minlen=2,constraint=false,]
 VocabularyNamespaceIsSpecificToSubjectField->SubjectField[arrowhead=vee,arrowtail=none,headlabel="subjectField",group=SubjectField,minlen=2,constraint=false,]
;
 node[shape=record];
Vocabulary1IncorporatesVocabulary2[label="{Vocabulary1IncorporatesVocabulary2| | }"]
 Vocabulary1IncorporatesVocabulary2->Vocabulary[arrowhead=vee,arrowtail=none,headlabel="vocabulary1",group=Vocabulary,minlen=2,constraint=false,]
 Vocabulary1IncorporatesVocabulary2->Vocabulary[arrowhead=vee,arrowtail=none,headlabel="vocabulary2",group=Vocabulary,minlen=2,constraint=false,]
;
 node[shape=record];
WhetherornotFormulationHasConsequent[label="{WhetherornotFormulationHasConsequent| | }"]
 WhetherornotFormulationHasConsequent->WhetherornotFormulation[arrowhead=vee,arrowtail=none,headlabel="whetherornotFormulation",group=WhetherornotFormulation,minlen=2,constraint=false,]
 WhetherornotFormulationHasConsequent->LogicalFormulation[arrowhead=vee,arrowtail=none,headlabel="consequent",group=LogicalFormulation,minlen=2,constraint=false,]
;
 node[shape=record];
WhetherornotFormulationHasInconsequent[label="{WhetherornotFormulationHasInconsequent| | }"]
 WhetherornotFormulationHasInconsequent->WhetherornotFormulation[arrowhead=vee,arrowtail=none,headlabel="whetherornotFormulation",group=WhetherornotFormulation,minlen=2,constraint=false,]
 WhetherornotFormulationHasInconsequent->LogicalFormulation[arrowhead=vee,arrowtail=none,headlabel="inconsequent",group=LogicalFormulation,minlen=2,constraint=false,]
;

} subgraph "cluster_PrimitiveTypes"{
labelloc=t
color=black
label=PrimitiveTypes
 node[shape=record];
Boolean[label="{&#171;DataType&#187;\nBoolean|}"]
;
 node[shape=record];
integer[label="{&#171;DataType&#187;\ninteger|}"]
;
 node[shape=record];
String[label="{&#171;DataType&#187;\nString|}"]
;
 node[shape=record];
Double[label="{&#171;DataType&#187;\nDouble|}"]
;

}
}