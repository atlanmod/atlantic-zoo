digraph "KM3 Model in DOT" {
graph[rankdir=BT,labeljust=l,labelloc=t,nodeSep=0.75,compound=true];
 subgraph "cluster_UML"{
labelloc=t
color=black
label=UML

} subgraph "cluster_Common_Behavior"{
labelloc=t
color=black
label=Common_Behavior
 node[shape=record];
Instance[label="{/Instance/| | }"]
 Instance->Instance[arrowhead=vee,arrowtail=diamond,headlabel="ownedInstance[*]",group=Instance,minlen=2,constraint=true,]
 Instance->Classifier[arrowhead=vee,arrowtail=none,headlabel="classifier[1-*]",group=Classifier,minlen=2,constraint=false,]
 Instance->Link[arrowhead=vee,arrowtail=diamond,headlabel="ownedLink[*]",group=Link,minlen=2,constraint=true,]
 Instance->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
Signal[label="{Signal| | }"]
 Signal->Classifier[arrowhead=onormal,group=Classifier,minlen=2,constraint=true,]
;
 node[shape=record];
Action[label="{/Action/|isAsynchronous : Boolean| }"]
 Action->ActionSequence[arrowhead=diamond,arrowtail=none,headlabel="actionSequence[0-1]",taillabel="action[*]{ordered}",group=ActionSequence,minlen=2,constraint=true,]
 Action->IterationExpression[arrowhead=vee,arrowtail=none,headlabel="recurrence[0-1]",group=IterationExpression,minlen=2,constraint=false,]
 Action->ObjectSetExpression[arrowhead=vee,arrowtail=none,headlabel="target[0-1]",group=ObjectSetExpression,minlen=2,constraint=false,]
 Action->ActionExpression[arrowhead=vee,arrowtail=none,headlabel="script[0-1]",group=ActionExpression,minlen=2,constraint=false,]
 Action->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
CreateAction[label="{CreateAction| | }"]
 CreateAction->Classifier[arrowhead=vee,arrowtail=none,headlabel="instantiation",group=Classifier,minlen=2,constraint=false,]
 CreateAction->Action[arrowhead=onormal,group=Action,minlen=2,constraint=true,]
;
 node[shape=record];
DestroyAction[label="{DestroyAction| | }"]
 DestroyAction->Action[arrowhead=onormal,group=Action,minlen=2,constraint=true,]
;
 node[shape=record];
UninterpretedAction[label="{UninterpretedAction| | }"]
 UninterpretedAction->Action[arrowhead=onormal,group=Action,minlen=2,constraint=true,]
;
 node[shape=record];
AttributeLink[label="{AttributeLink| | }"]
 AttributeLink->Instance[arrowhead=diamond,arrowtail=none,headlabel="instance[0-1]",taillabel="slot[*]",group=Instance,minlen=2,constraint=true,]
 AttributeLink->Instance[arrowhead=vee,arrowtail=none,headlabel="value",group=Instance,minlen=2,constraint=false,]
 AttributeLink->LinkEnd[arrowhead=diamond,arrowtail=none,headlabel="linkEnd[0-1]",taillabel="qualifiedValue[*]{ordered}",group=LinkEnd,minlen=2,constraint=true,]
 AttributeLink->Attribute[arrowhead=vee,arrowtail=none,headlabel="attribute",group=Attribute,minlen=2,constraint=false,]
 AttributeLink->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
Object[label="{Object| | }"]
 Object->Instance[arrowhead=onormal,group=Instance,minlen=2,constraint=true,]
;
 node[shape=record];
Link[label="{Link| | }"]
 Link->Association[arrowhead=vee,arrowtail=none,headlabel="association",group=Association,minlen=2,constraint=false,]
 Link->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
LinkObject[label="{LinkObject| | }"]
 LinkObject->Object[arrowhead=onormal,group=Object,minlen=2,constraint=true,]
 LinkObject->Link[arrowhead=onormal,group=Link,minlen=2,constraint=true,]
;
 node[shape=record];
DataValue[label="{DataValue| | }"]
 DataValue->Instance[arrowhead=onormal,group=Instance,minlen=2,constraint=true,]
;
 node[shape=record];
CallAction[label="{CallAction| | }"]
 CallAction->Operation[arrowhead=vee,arrowtail=none,headlabel="operation",group=Operation,minlen=2,constraint=false,]
 CallAction->Action[arrowhead=onormal,group=Action,minlen=2,constraint=true,]
;
 node[shape=record];
SendAction[label="{SendAction| | }"]
 SendAction->Signal[arrowhead=vee,arrowtail=none,headlabel="signal",group=Signal,minlen=2,constraint=false,]
 SendAction->Action[arrowhead=onormal,group=Action,minlen=2,constraint=true,]
;
 node[shape=record];
ActionSequence[label="{ActionSequence| | }"]
 ActionSequence->Action[arrowhead=onormal,group=Action,minlen=2,constraint=true,]
;
 node[shape=record];
Argument[label="{Argument| | }"]
 Argument->Action[arrowhead=diamond,arrowtail=none,headlabel="action[0-1]",taillabel="actualArgument[*]{ordered}",group=Action,minlen=2,constraint=true,]
 Argument->Expression[arrowhead=vee,arrowtail=none,headlabel="value",group=Expression,minlen=2,constraint=false,]
 Argument->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
Reception[label="{Reception|specification[0-1] : String\nisRoot : Boolean\nisLeaf : Boolean\nisAbstract : Boolean| }"]
 Reception->Signal[arrowhead=vee,arrowtail=none,headlabel="signal",group=Signal,minlen=2,constraint=false,]
 Reception->BehavioralFeature[arrowhead=onormal,group=BehavioralFeature,minlen=2,constraint=true,]
;
 node[shape=record];
LinkEnd[label="{LinkEnd| | }"]
 LinkEnd->Link[arrowhead=diamond,arrowtail=none,headlabel="link",taillabel="connection[2-*]",group=Link,minlen=2,constraint=true,]
 LinkEnd->Instance[arrowhead=none,arrowtail=none,headlabel="instance",taillabel="linkEnd[*]",group=Instance,minlen=2,constraint=false,]
 LinkEnd->AssociationEnd[arrowhead=vee,arrowtail=none,headlabel="associationEnd",group=AssociationEnd,minlen=2,constraint=false,]
 LinkEnd->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
ReturnAction[label="{ReturnAction| | }"]
 ReturnAction->Action[arrowhead=onormal,group=Action,minlen=2,constraint=true,]
;
 node[shape=record];
TerminateAction[label="{TerminateAction| | }"]
 TerminateAction->Action[arrowhead=onormal,group=Action,minlen=2,constraint=true,]
;
 node[shape=record];
Stimulus[label="{Stimulus| | }"]
 Stimulus->Instance[arrowhead=vee,arrowtail=none,headlabel="argument[*]{ordered}",group=Instance,minlen=2,constraint=false,]
 Stimulus->Link[arrowhead=vee,arrowtail=none,headlabel="communicationLink[0-1]",group=Link,minlen=2,constraint=false,]
 Stimulus->Instance[arrowhead=vee,arrowtail=none,headlabel="receiver",group=Instance,minlen=2,constraint=false,]
 Stimulus->Action[arrowhead=vee,arrowtail=none,headlabel="dispatchAction",group=Action,minlen=2,constraint=false,]
 Stimulus->Instance[arrowhead=vee,arrowtail=none,headlabel="sender",group=Instance,minlen=2,constraint=false,]
 Stimulus->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
Exception[label="{Exception| | }"]
 Exception->Signal[arrowhead=onormal,group=Signal,minlen=2,constraint=true,]
;
 node[shape=record];
ComponentInstance[label="{ComponentInstance| | }"]
 ComponentInstance->Instance[arrowhead=none,arrowtail=none,headlabel="resident[*]",taillabel="componentInstance[0-1]",group=Instance,minlen=2,constraint=false,]
 ComponentInstance->NodeInstance[arrowhead=none,arrowtail=none,headlabel="nodeInstance[0-1]",taillabel="resident[*]",group=NodeInstance,minlen=2,constraint=false,]
 ComponentInstance->Instance[arrowhead=onormal,group=Instance,minlen=2,constraint=true,]
;
 node[shape=record];
NodeInstance[label="{NodeInstance| | }"]
 NodeInstance->Instance[arrowhead=onormal,group=Instance,minlen=2,constraint=true,]
;
 node[shape=record];
SubsystemInstance[label="{SubsystemInstance| | }"]
 SubsystemInstance->Instance[arrowhead=onormal,group=Instance,minlen=2,constraint=true,]
;

} subgraph "cluster_Data_Types"{
labelloc=t
color=black
label=Data_Types
 node[shape=record];
Multiplicity[label="{Multiplicity| | }"]
;
 node[shape=record];
MultiplicityRange[label="{MultiplicityRange|lower : Integer\nupper : Integer| }"]
 MultiplicityRange->Multiplicity[arrowhead=diamond,arrowtail=none,headlabel="multiplicity",taillabel="range[1-*]",group=Multiplicity,minlen=2,constraint=true,]
;
 node[shape=record];
Expression[label="{Expression|language[0-1] : String\nbody : String| }"]
;
 node[shape=record];
BooleanExpression[label="{BooleanExpression| | }"]
 BooleanExpression->Expression[arrowhead=onormal,group=Expression,minlen=2,constraint=true,]
;
 node[shape=record];
TypeExpression[label="{TypeExpression| | }"]
 TypeExpression->Expression[arrowhead=onormal,group=Expression,minlen=2,constraint=true,]
;
 node[shape=record];
MappingExpression[label="{MappingExpression| | }"]
 MappingExpression->Expression[arrowhead=onormal,group=Expression,minlen=2,constraint=true,]
;
 node[shape=record];
ProcedureExpression[label="{ProcedureExpression| | }"]
 ProcedureExpression->Expression[arrowhead=onormal,group=Expression,minlen=2,constraint=true,]
;
 node[shape=record];
ObjectSetExpression[label="{ObjectSetExpression| | }"]
 ObjectSetExpression->Expression[arrowhead=onormal,group=Expression,minlen=2,constraint=true,]
;
 node[shape=record];
ActionExpression[label="{ActionExpression| | }"]
 ActionExpression->Expression[arrowhead=onormal,group=Expression,minlen=2,constraint=true,]
;
 node[shape=record];
IterationExpression[label="{IterationExpression| | }"]
 IterationExpression->Expression[arrowhead=onormal,group=Expression,minlen=2,constraint=true,]
;
 node[shape=record];
TimeExpression[label="{TimeExpression| | }"]
 TimeExpression->Expression[arrowhead=onormal,group=Expression,minlen=2,constraint=true,]
;
 node[shape=record];
ArgListsExpression[label="{ArgListsExpression| | }"]
 ArgListsExpression->Expression[arrowhead=onormal,group=Expression,minlen=2,constraint=true,]
;

} subgraph "cluster_Model_Management"{
labelloc=t
color=black
label=Model_Management
 node[shape=record];
Package[label="{Package| | }"]
 Package->GeneralizableElement[arrowhead=onormal,group=GeneralizableElement,minlen=2,constraint=true,]
 Package->Namespace[arrowhead=onormal,group=Namespace,minlen=2,constraint=true,]
;
 node[shape=record];
Model[label="{Model| | }"]
 Model->Package[arrowhead=onormal,group=Package,minlen=2,constraint=true,]
;
 node[shape=record];
Subsystem[label="{Subsystem|isInstantiable : Boolean| }"]
 Subsystem->Package[arrowhead=onormal,group=Package,minlen=2,constraint=true,]
 Subsystem->Classifier[arrowhead=onormal,group=Classifier,minlen=2,constraint=true,]
;
 node[shape=record];
ElementImport[label="{ElementImport|visibility[0-1] : VisibilityKind\nalias[0-1] : String\nisSpecification : Boolean| }"]
 ElementImport->Package[arrowhead=diamond,arrowtail=none,headlabel="package",taillabel="elementImport[*]",group=Package,minlen=2,constraint=true,]
 ElementImport->ModelElement[arrowhead=vee,arrowtail=none,headlabel="importedElement",group=ModelElement,minlen=2,constraint=false,]
;

} subgraph "cluster_Core"{
labelloc=t
color=black
label=Core
 node[shape=record];
Element[label="{/Element/| | }"]
;
 node[shape=record];
ModelElement[label="{/ModelElement/|name[0-1] : String\nvisibility[0-1] : VisibilityKind\nisSpecification : Boolean| }"]
 ModelElement->Dependency[arrowhead=none,arrowtail=none,headlabel="clientDependency[*]",taillabel="client[1-*]",group=Dependency,minlen=2,constraint=false,]
 ModelElement->Stereotype[arrowhead=vee,arrowtail=none,headlabel="stereotype[*]",group=Stereotype,minlen=2,constraint=false,]
 ModelElement->Comment[arrowhead=none,arrowtail=none,headlabel="comment[*]",taillabel="annotatedElement[*]",group=Comment,minlen=2,constraint=false,]
 ModelElement->Flow[arrowhead=none,arrowtail=none,headlabel="sourceFlow[*]",taillabel="source[*]",group=Flow,minlen=2,constraint=false,]
 ModelElement->Flow[arrowhead=none,arrowtail=none,headlabel="targetFlow[*]",taillabel="target[*]",group=Flow,minlen=2,constraint=false,]
 ModelElement->Namespace[arrowhead=diamond,arrowtail=none,headlabel="namespace[0-1]",taillabel="ownedElement[*]",group=Namespace,minlen=2,constraint=true,]
 ModelElement->Element[arrowhead=onormal,group=Element,minlen=2,constraint=true,]
;
 node[shape=record];
GeneralizableElement[label="{/GeneralizableElement/|isRoot : Boolean\nisLeaf : Boolean\nisAbstract : Boolean| }"]
 GeneralizableElement->Generalization[arrowhead=none,arrowtail=none,headlabel="generalization[*]",taillabel="child",group=Generalization,minlen=2,constraint=false,]
 GeneralizableElement->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
Namespace[label="{/Namespace/| | }"]
 Namespace->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
Classifier[label="{/Classifier/| | }"]
 Classifier->GeneralizableElement[arrowhead=onormal,group=GeneralizableElement,minlen=2,constraint=true,]
 Classifier->Namespace[arrowhead=onormal,group=Namespace,minlen=2,constraint=true,]
;
 node[shape=record];
Class[label="{Class|isActive : Boolean| }"]
 Class->Classifier[arrowhead=onormal,group=Classifier,minlen=2,constraint=true,]
;
 node[shape=record];
DataType[label="{DataType| | }"]
 DataType->Classifier[arrowhead=onormal,group=Classifier,minlen=2,constraint=true,]
;
 node[shape=record];
Feature[label="{/Feature/|ownerScope : ScopeKind| }"]
 Feature->Classifier[arrowhead=diamond,arrowtail=none,headlabel="owner[0-1]",taillabel="feature[*]{ordered}",group=Classifier,minlen=2,constraint=true,]
 Feature->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
StructuralFeature[label="{/StructuralFeature/|changeability[0-1] : ChangeableKind\ntargetScope[0-1] : ScopeKind\nordering[0-1] : OrderingKind| }"]
 StructuralFeature->Classifier[arrowhead=vee,arrowtail=none,headlabel="type",group=Classifier,minlen=2,constraint=false,]
 StructuralFeature->Multiplicity[arrowhead=vee,arrowtail=none,headlabel="multiplicity[0-1]",group=Multiplicity,minlen=2,constraint=false,]
 StructuralFeature->Feature[arrowhead=onormal,group=Feature,minlen=2,constraint=true,]
;
 node[shape=record];
AssociationEnd[label="{AssociationEnd|isNavigable : Boolean\nordering[0-1] : OrderingKind\naggregation[0-1] : AggregationKind\ntargetScope[0-1] : ScopeKind\nchangeability[0-1] : ChangeableKind| }"]
 AssociationEnd->Association[arrowhead=diamond,arrowtail=none,headlabel="association",taillabel="connection[2-*]{ordered}",group=Association,minlen=2,constraint=true,]
 AssociationEnd->Classifier[arrowhead=vee,arrowtail=none,headlabel="specification[*]",group=Classifier,minlen=2,constraint=false,]
 AssociationEnd->Classifier[arrowhead=vee,arrowtail=none,headlabel="participant",group=Classifier,minlen=2,constraint=false,]
 AssociationEnd->Multiplicity[arrowhead=vee,arrowtail=none,headlabel="multiplicity[0-1]",group=Multiplicity,minlen=2,constraint=false,]
 AssociationEnd->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
Interface[label="{Interface| | }"]
 Interface->Classifier[arrowhead=onormal,group=Classifier,minlen=2,constraint=true,]
;
 node[shape=record];
Constraint[label="{Constraint| | }"]
 Constraint->ModelElement[arrowhead=none,arrowtail=none,headlabel="constrainedElement[*]{ordered}",taillabel="constraint[*]",group=ModelElement,minlen=2,constraint=false,]
 Constraint->BooleanExpression[arrowhead=vee,arrowtail=none,headlabel="body[0-1]",group=BooleanExpression,minlen=2,constraint=false,]
 Constraint->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
Relationship[label="{/Relationship/| | }"]
 Relationship->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
Association[label="{Association| | }"]
 Association->GeneralizableElement[arrowhead=onormal,group=GeneralizableElement,minlen=2,constraint=true,]
 Association->Relationship[arrowhead=onormal,group=Relationship,minlen=2,constraint=true,]
;
 node[shape=record];
Attribute[label="{Attribute| | }"]
 Attribute->AssociationEnd[arrowhead=diamond,arrowtail=none,headlabel="associationEnd[0-1]",taillabel="qualifier[*]{ordered}",group=AssociationEnd,minlen=2,constraint=true,]
 Attribute->Expression[arrowhead=vee,arrowtail=none,headlabel="initialValue[0-1]",group=Expression,minlen=2,constraint=false,]
 Attribute->StructuralFeature[arrowhead=onormal,group=StructuralFeature,minlen=2,constraint=true,]
;
 node[shape=record];
BehavioralFeature[label="{/BehavioralFeature/|isQuery : Boolean| }"]
 BehavioralFeature->Feature[arrowhead=onormal,group=Feature,minlen=2,constraint=true,]
;
 node[shape=record];
Operation[label="{Operation|concurrency[0-1] : CallConcurrencyKind\nisRoot : Boolean\nisLeaf : Boolean\nisAbstract : Boolean\nspecification[0-1] : String| }"]
 Operation->BehavioralFeature[arrowhead=onormal,group=BehavioralFeature,minlen=2,constraint=true,]
;
 node[shape=record];
Parameter[label="{Parameter|kind : ParameterDirectionKind| }"]
 Parameter->Classifier[arrowhead=vee,arrowtail=none,headlabel="type",group=Classifier,minlen=2,constraint=false,]
 Parameter->BehavioralFeature[arrowhead=diamond,arrowtail=none,headlabel="behavioralFeature[0-1]",taillabel="parameter[*]{ordered}",group=BehavioralFeature,minlen=2,constraint=true,]
 Parameter->Expression[arrowhead=vee,arrowtail=none,headlabel="defaultValue[0-1]",group=Expression,minlen=2,constraint=false,]
 Parameter->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
Method[label="{Method| | }"]
 Method->Operation[arrowhead=vee,arrowtail=none,headlabel="specification",group=Operation,minlen=2,constraint=false,]
 Method->ProcedureExpression[arrowhead=vee,arrowtail=none,headlabel="body",group=ProcedureExpression,minlen=2,constraint=false,]
 Method->BehavioralFeature[arrowhead=onormal,group=BehavioralFeature,minlen=2,constraint=true,]
;
 node[shape=record];
Generalization[label="{Generalization|discriminator[0-1] : String| }"]
 Generalization->GeneralizableElement[arrowhead=vee,arrowtail=none,headlabel="parent",group=GeneralizableElement,minlen=2,constraint=false,]
 Generalization->Classifier[arrowhead=none,arrowtail=none,headlabel="powertype[0-1]",taillabel="powertypeRange[*]",group=Classifier,minlen=2,constraint=false,]
 Generalization->Relationship[arrowhead=onormal,group=Relationship,minlen=2,constraint=true,]
;
 node[shape=record];
AssociationClass[label="{AssociationClass| | }"]
 AssociationClass->Association[arrowhead=onormal,group=Association,minlen=2,constraint=true,]
 AssociationClass->Class[arrowhead=onormal,group=Class,minlen=2,constraint=true,]
;
 node[shape=record];
Dependency[label="{Dependency| | }"]
 Dependency->ModelElement[arrowhead=vee,arrowtail=none,headlabel="supplier[1-*]",group=ModelElement,minlen=2,constraint=false,]
 Dependency->Relationship[arrowhead=onormal,group=Relationship,minlen=2,constraint=true,]
;
 node[shape=record];
Abstraction[label="{Abstraction| | }"]
 Abstraction->MappingExpression[arrowhead=vee,arrowtail=none,headlabel="mapping[0-1]",group=MappingExpression,minlen=2,constraint=false,]
 Abstraction->Dependency[arrowhead=onormal,group=Dependency,minlen=2,constraint=true,]
;
 node[shape=record];
PresentationElement[label="{/PresentationElement/| | }"]
 PresentationElement->ModelElement[arrowhead=vee,arrowtail=none,headlabel="subject[*]",group=ModelElement,minlen=2,constraint=false,]
 PresentationElement->Element[arrowhead=onormal,group=Element,minlen=2,constraint=true,]
;
 node[shape=record];
Usage[label="{Usage| | }"]
 Usage->Dependency[arrowhead=onormal,group=Dependency,minlen=2,constraint=true,]
;
 node[shape=record];
Binding[label="{Binding| | }"]
 Binding->Dependency[arrowhead=onormal,group=Dependency,minlen=2,constraint=true,]
;
 node[shape=record];
Component[label="{Component| | }"]
 Component->Node[arrowhead=none,arrowtail=none,headlabel="deploymentLocation[*]",taillabel="deployedComponent[*]",group=Node,minlen=2,constraint=false,]
 Component->Artifact[arrowhead=vee,arrowtail=none,headlabel="implementation[*]",group=Artifact,minlen=2,constraint=false,]
 Component->Classifier[arrowhead=onormal,group=Classifier,minlen=2,constraint=true,]
;
 node[shape=record];
Node[label="{Node| | }"]
 Node->Classifier[arrowhead=onormal,group=Classifier,minlen=2,constraint=true,]
;
 node[shape=record];
Permission[label="{Permission| | }"]
 Permission->Dependency[arrowhead=onormal,group=Dependency,minlen=2,constraint=true,]
;
 node[shape=record];
Comment[label="{Comment|body : String| }"]
 Comment->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
Flow[label="{Flow| | }"]
 Flow->Relationship[arrowhead=onormal,group=Relationship,minlen=2,constraint=true,]
;
 node[shape=record];
ElementResidence[label="{ElementResidence|visibility[0-1] : VisibilityKind| }"]
 ElementResidence->Component[arrowhead=diamond,arrowtail=none,headlabel="container",taillabel="residentElement[*]",group=Component,minlen=2,constraint=true,]
 ElementResidence->ModelElement[arrowhead=vee,arrowtail=none,headlabel="resident",group=ModelElement,minlen=2,constraint=false,]
;
 node[shape=record];
TemplateParameter[label="{TemplateParameter| | }"]
 TemplateParameter->ModelElement[arrowhead=diamond,arrowtail=none,headlabel="template",taillabel="templateParameter[*]{ordered}",group=ModelElement,minlen=2,constraint=true,]
 TemplateParameter->ModelElement[arrowhead=vee,arrowtail=diamond,headlabel="parameter",group=ModelElement,minlen=2,constraint=true,]
 TemplateParameter->ModelElement[arrowhead=vee,arrowtail=none,headlabel="defaultElement[0-1]",group=ModelElement,minlen=2,constraint=false,]
;
 node[shape=record];
Primitive[label="{Primitive| | }"]
 Primitive->DataType[arrowhead=onormal,group=DataType,minlen=2,constraint=true,]
;
 node[shape=record];
Enumeration[label="{Enumeration| | }"]
 Enumeration->DataType[arrowhead=onormal,group=DataType,minlen=2,constraint=true,]
;
 node[shape=record];
EnumerationLiteral[label="{EnumerationLiteral| | }"]
 EnumerationLiteral->Enumeration[arrowhead=diamond,arrowtail=none,headlabel="enumeration",taillabel="literal[1-*]{ordered}",group=Enumeration,minlen=2,constraint=true,]
 EnumerationLiteral->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
Stereotype[label="{Stereotype|icon[0-1] : String\nbaseClass[1-*] : String| }"]
 Stereotype->Constraint[arrowhead=vee,arrowtail=diamond,headlabel="stereotypeConstraint[*]",group=Constraint,minlen=2,constraint=true,]
 Stereotype->GeneralizableElement[arrowhead=onormal,group=GeneralizableElement,minlen=2,constraint=true,]
;
 node[shape=record];
TagDefinition[label="{TagDefinition|tagType[0-1] : String| }"]
 TagDefinition->Stereotype[arrowhead=diamond,arrowtail=none,headlabel="owner[0-1]",taillabel="definedTag[*]",group=Stereotype,minlen=2,constraint=true,]
 TagDefinition->Multiplicity[arrowhead=vee,arrowtail=none,headlabel="multiplicity[0-1]",group=Multiplicity,minlen=2,constraint=false,]
 TagDefinition->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
TaggedValue[label="{TaggedValue|dataValue[*] : String| }"]
 TaggedValue->TagDefinition[arrowhead=vee,arrowtail=none,headlabel="type",group=TagDefinition,minlen=2,constraint=false,]
 TaggedValue->ModelElement[arrowhead=vee,arrowtail=none,headlabel="referenceValue[*]",group=ModelElement,minlen=2,constraint=false,]
 TaggedValue->ModelElement[arrowhead=diamond,arrowtail=none,headlabel="modelElement",taillabel="taggedValue[*]",group=ModelElement,minlen=2,constraint=true,]
 TaggedValue->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
ProgrammingLanguageDataType[label="{ProgrammingLanguageDataType| | }"]
 ProgrammingLanguageDataType->TypeExpression[arrowhead=vee,arrowtail=none,headlabel="expression",group=TypeExpression,minlen=2,constraint=false,]
 ProgrammingLanguageDataType->DataType[arrowhead=onormal,group=DataType,minlen=2,constraint=true,]
;
 node[shape=record];
Artifact[label="{Artifact| | }"]
 Artifact->Classifier[arrowhead=onormal,group=Classifier,minlen=2,constraint=true,]
;
 node[shape=record];
TemplateArgument[label="{TemplateArgument| | }"]
 TemplateArgument->Binding[arrowhead=diamond,arrowtail=none,headlabel="binding",taillabel="argument[1-*]{ordered}",group=Binding,minlen=2,constraint=true,]
 TemplateArgument->ModelElement[arrowhead=vee,arrowtail=none,headlabel="modelElement",group=ModelElement,minlen=2,constraint=false,]
;

} subgraph "cluster_Collaborations"{
labelloc=t
color=black
label=Collaborations
 node[shape=record];
Collaboration[label="{Collaboration| | }"]
 Collaboration->Collaboration[arrowhead=vee,arrowtail=none,headlabel="usedCollaboration[*]",group=Collaboration,minlen=2,constraint=false,]
 Collaboration->Operation[arrowhead=vee,arrowtail=none,headlabel="representedOperation[0-1]",group=Operation,minlen=2,constraint=false,]
 Collaboration->Classifier[arrowhead=vee,arrowtail=none,headlabel="representedClassifier[0-1]",group=Classifier,minlen=2,constraint=false,]
 Collaboration->ModelElement[arrowhead=vee,arrowtail=none,headlabel="constrainingElement[*]",group=ModelElement,minlen=2,constraint=false,]
 Collaboration->GeneralizableElement[arrowhead=onormal,group=GeneralizableElement,minlen=2,constraint=true,]
 Collaboration->Namespace[arrowhead=onormal,group=Namespace,minlen=2,constraint=true,]
;
 node[shape=record];
ClassifierRole[label="{ClassifierRole| | }"]
 ClassifierRole->ModelElement[arrowhead=vee,arrowtail=none,headlabel="availableContents[*]",group=ModelElement,minlen=2,constraint=false,]
 ClassifierRole->Classifier[arrowhead=vee,arrowtail=none,headlabel="base[1-*]",group=Classifier,minlen=2,constraint=false,]
 ClassifierRole->Instance[arrowhead=vee,arrowtail=none,headlabel="conformingInstance[*]",group=Instance,minlen=2,constraint=false,]
 ClassifierRole->Feature[arrowhead=vee,arrowtail=none,headlabel="availableFeature[*]",group=Feature,minlen=2,constraint=false,]
 ClassifierRole->Multiplicity[arrowhead=vee,arrowtail=none,headlabel="multiplicity[0-1]",group=Multiplicity,minlen=2,constraint=false,]
 ClassifierRole->Classifier[arrowhead=onormal,group=Classifier,minlen=2,constraint=true,]
;
 node[shape=record];
AssociationRole[label="{AssociationRole| | }"]
 AssociationRole->Association[arrowhead=vee,arrowtail=none,headlabel="base[0-1]",group=Association,minlen=2,constraint=false,]
 AssociationRole->Link[arrowhead=vee,arrowtail=none,headlabel="conformingLink[*]",group=Link,minlen=2,constraint=false,]
 AssociationRole->Multiplicity[arrowhead=vee,arrowtail=none,headlabel="multiplicity[0-1]",group=Multiplicity,minlen=2,constraint=false,]
 AssociationRole->Association[arrowhead=onormal,group=Association,minlen=2,constraint=true,]
;
 node[shape=record];
AssociationEndRole[label="{AssociationEndRole| | }"]
 AssociationEndRole->AssociationEnd[arrowhead=vee,arrowtail=none,headlabel="base[0-1]",group=AssociationEnd,minlen=2,constraint=false,]
 AssociationEndRole->Attribute[arrowhead=vee,arrowtail=none,headlabel="availableQualifier[*]",group=Attribute,minlen=2,constraint=false,]
 AssociationEndRole->Multiplicity[arrowhead=vee,arrowtail=none,headlabel="collaborationMultiplicity[0-1]",group=Multiplicity,minlen=2,constraint=false,]
 AssociationEndRole->AssociationEnd[arrowhead=onormal,group=AssociationEnd,minlen=2,constraint=true,]
;
 node[shape=record];
Message[label="{Message| | }"]
 Message->Interaction[arrowhead=diamond,arrowtail=none,headlabel="interaction",taillabel="message[1-*]",group=Interaction,minlen=2,constraint=true,]
 Message->Stimulus[arrowhead=vee,arrowtail=none,headlabel="conformingStimulus[*]",group=Stimulus,minlen=2,constraint=false,]
 Message->Action[arrowhead=vee,arrowtail=none,headlabel="action",group=Action,minlen=2,constraint=false,]
 Message->AssociationRole[arrowhead=none,arrowtail=none,headlabel="communicationConnection[0-1]",taillabel="message[*]",group=AssociationRole,minlen=2,constraint=false,]
 Message->Message[arrowhead=vee,arrowtail=none,headlabel="activator[0-1]",group=Message,minlen=2,constraint=false,]
 Message->ClassifierRole[arrowhead=vee,arrowtail=none,headlabel="receiver",group=ClassifierRole,minlen=2,constraint=false,]
 Message->ClassifierRole[arrowhead=vee,arrowtail=none,headlabel="sender",group=ClassifierRole,minlen=2,constraint=false,]
 Message->Message[arrowhead=vee,arrowtail=none,headlabel="predecessor[*]",group=Message,minlen=2,constraint=false,]
 Message->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
Interaction[label="{Interaction| | }"]
 Interaction->Collaboration[arrowhead=diamond,arrowtail=none,headlabel="context",taillabel="interaction[*]",group=Collaboration,minlen=2,constraint=true,]
 Interaction->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
InteractionInstanceSet[label="{InteractionInstanceSet| | }"]
 InteractionInstanceSet->Interaction[arrowhead=vee,arrowtail=none,headlabel="interaction[0-1]",group=Interaction,minlen=2,constraint=false,]
 InteractionInstanceSet->CollaborationInstanceSet[arrowhead=diamond,arrowtail=none,headlabel="context",taillabel="interactionInstanceSet[*]",group=CollaborationInstanceSet,minlen=2,constraint=true,]
 InteractionInstanceSet->Stimulus[arrowhead=vee,arrowtail=none,headlabel="participatingStimulus[1-*]",group=Stimulus,minlen=2,constraint=false,]
 InteractionInstanceSet->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
CollaborationInstanceSet[label="{CollaborationInstanceSet| | }"]
 CollaborationInstanceSet->Collaboration[arrowhead=vee,arrowtail=none,headlabel="collaboration[0-1]",group=Collaboration,minlen=2,constraint=false,]
 CollaborationInstanceSet->ModelElement[arrowhead=vee,arrowtail=none,headlabel="constrainingElement[*]",group=ModelElement,minlen=2,constraint=false,]
 CollaborationInstanceSet->Instance[arrowhead=vee,arrowtail=none,headlabel="participatingInstance[1-*]",group=Instance,minlen=2,constraint=false,]
 CollaborationInstanceSet->Link[arrowhead=vee,arrowtail=none,headlabel="participatingLink[*]",group=Link,minlen=2,constraint=false,]
 CollaborationInstanceSet->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;

} subgraph "cluster_State_Machines"{
labelloc=t
color=black
label=State_Machines
 node[shape=record];
StateMachine[label="{StateMachine| | }"]
 StateMachine->ModelElement[arrowhead=vee,arrowtail=none,headlabel="context[0-1]",group=ModelElement,minlen=2,constraint=false,]
 StateMachine->SubmachineState[arrowhead=none,arrowtail=none,headlabel="submachineState[*]",taillabel="submachine",group=SubmachineState,minlen=2,constraint=false,]
 StateMachine->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
Event[label="{/Event/| | }"]
 Event->Parameter[arrowhead=vee,arrowtail=diamond,headlabel="parameter[*]{ordered}",group=Parameter,minlen=2,constraint=true,]
 Event->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
StateVertex[label="{/StateVertex/| | }"]
 StateVertex->CompositeState[arrowhead=diamond,arrowtail=none,headlabel="container[0-1]",taillabel="subvertex[*]",group=CompositeState,minlen=2,constraint=true,]
 StateVertex->Transition[arrowhead=none,arrowtail=none,headlabel="incoming[*]",taillabel="target",group=Transition,minlen=2,constraint=false,]
 StateVertex->Transition[arrowhead=none,arrowtail=none,headlabel="outgoing[*]",taillabel="source",group=Transition,minlen=2,constraint=false,]
 StateVertex->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
State[label="{/State/| | }"]
 State->Event[arrowhead=vee,arrowtail=none,headlabel="deferrableEvent[*]",group=Event,minlen=2,constraint=false,]
 State->Transition[arrowhead=vee,arrowtail=diamond,headlabel="internalTransition[*]",group=Transition,minlen=2,constraint=true,]
 State->Action[arrowhead=vee,arrowtail=diamond,headlabel="exit[0-1]",group=Action,minlen=2,constraint=true,]
 State->Action[arrowhead=vee,arrowtail=diamond,headlabel="doActivity[0-1]",group=Action,minlen=2,constraint=true,]
 State->Action[arrowhead=vee,arrowtail=diamond,headlabel="entry[0-1]",group=Action,minlen=2,constraint=true,]
 State->StateMachine[arrowhead=diamond,arrowtail=none,headlabel="stateMachine[0-1]",taillabel="top",group=StateMachine,minlen=2,constraint=true,]
 State->StateVertex[arrowhead=onormal,group=StateVertex,minlen=2,constraint=true,]
;
 node[shape=record];
TimeEvent[label="{TimeEvent| | }"]
 TimeEvent->TimeExpression[arrowhead=vee,arrowtail=none,headlabel="when",group=TimeExpression,minlen=2,constraint=false,]
 TimeEvent->Event[arrowhead=onormal,group=Event,minlen=2,constraint=true,]
;
 node[shape=record];
CallEvent[label="{CallEvent| | }"]
 CallEvent->Operation[arrowhead=vee,arrowtail=none,headlabel="operation",group=Operation,minlen=2,constraint=false,]
 CallEvent->Event[arrowhead=onormal,group=Event,minlen=2,constraint=true,]
;
 node[shape=record];
SignalEvent[label="{SignalEvent| | }"]
 SignalEvent->Signal[arrowhead=vee,arrowtail=none,headlabel="signal",group=Signal,minlen=2,constraint=false,]
 SignalEvent->Event[arrowhead=onormal,group=Event,minlen=2,constraint=true,]
;
 node[shape=record];
Transition[label="{Transition| | }"]
 Transition->Event[arrowhead=vee,arrowtail=none,headlabel="trigger[0-1]",group=Event,minlen=2,constraint=false,]
 Transition->StateMachine[arrowhead=diamond,arrowtail=none,headlabel="stateMachine[0-1]",taillabel="transitions[*]",group=StateMachine,minlen=2,constraint=true,]
 Transition->Action[arrowhead=vee,arrowtail=diamond,headlabel="effect[0-1]",group=Action,minlen=2,constraint=true,]
 Transition->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
CompositeState[label="{CompositeState|isConcurrent : Boolean| }"]
 CompositeState->State[arrowhead=onormal,group=State,minlen=2,constraint=true,]
;
 node[shape=record];
ChangeEvent[label="{ChangeEvent| | }"]
 ChangeEvent->BooleanExpression[arrowhead=vee,arrowtail=none,headlabel="changeExpression",group=BooleanExpression,minlen=2,constraint=false,]
 ChangeEvent->Event[arrowhead=onormal,group=Event,minlen=2,constraint=true,]
;
 node[shape=record];
Guard[label="{Guard| | }"]
 Guard->Transition[arrowhead=diamond,arrowtail=none,headlabel="transition",taillabel="guard[0-1]",group=Transition,minlen=2,constraint=true,]
 Guard->BooleanExpression[arrowhead=vee,arrowtail=none,headlabel="expression",group=BooleanExpression,minlen=2,constraint=false,]
 Guard->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
Pseudostate[label="{Pseudostate|kind : PseudostateKind| }"]
 Pseudostate->StateVertex[arrowhead=onormal,group=StateVertex,minlen=2,constraint=true,]
;
 node[shape=record];
SimpleState[label="{SimpleState| | }"]
 SimpleState->State[arrowhead=onormal,group=State,minlen=2,constraint=true,]
;
 node[shape=record];
SubmachineState[label="{SubmachineState| | }"]
 SubmachineState->CompositeState[arrowhead=onormal,group=CompositeState,minlen=2,constraint=true,]
;
 node[shape=record];
SynchState[label="{SynchState|bound : Integer| }"]
 SynchState->StateVertex[arrowhead=onormal,group=StateVertex,minlen=2,constraint=true,]
;
 node[shape=record];
StubState[label="{StubState|referenceState : String| }"]
 StubState->StateVertex[arrowhead=onormal,group=StateVertex,minlen=2,constraint=true,]
;
 node[shape=record];
FinalState[label="{FinalState| | }"]
 FinalState->State[arrowhead=onormal,group=State,minlen=2,constraint=true,]
;

} subgraph "cluster_PrimitiveTypes"{
labelloc=t
color=black
label=PrimitiveTypes
 node[shape=record];
Boolean[label="{&#171;DataType&#187;\nBoolean|}"]
;
 node[shape=record];
Float[label="{&#171;DataType&#187;\nFloat|}"]
;
 node[shape=record];
Integer[label="{&#171;DataType&#187;\nInteger|}"]
;
 node[shape=record];
Long[label="{&#171;DataType&#187;\nLong|}"]
;
 node[shape=record];
String[label="{&#171;DataType&#187;\nString|}"]
;
 node[shape=record];
Double[label="{&#171;DataType&#187;\nDouble|}"]
;

} subgraph "cluster_Diagram_Interchange"{
labelloc=t
color=black
label=Diagram_Interchange
 node[shape=record];
Point[label="{Point|x : Double\ny : Double| }"]
;
 node[shape=record];
Dimension[label="{Dimension|width : Double\nheight : Double| }"]
;
 node[shape=record];
BezierPoint[label="{BezierPoint| | }"]
 BezierPoint->Point[arrowhead=vee,arrowtail=none,headlabel="base",group=Point,minlen=2,constraint=false,]
 BezierPoint->Point[arrowhead=vee,arrowtail=none,headlabel="control1",group=Point,minlen=2,constraint=false,]
 BezierPoint->Point[arrowhead=vee,arrowtail=none,headlabel="control2",group=Point,minlen=2,constraint=false,]
;
 node[shape=record];
DiagramElement[label="{/DiagramElement/|isVisible : Boolean| }"]
 DiagramElement->GraphElement[arrowhead=diamond,arrowtail=none,headlabel="container[0-1]",taillabel="contained[*]{ordered}",group=GraphElement,minlen=2,constraint=true,]
 DiagramElement->Property[arrowhead=vee,arrowtail=diamond,headlabel="property[*]",group=Property,minlen=2,constraint=true,]
;
 node[shape=record];
GraphElement[label="{/GraphElement/| | }"]
 GraphElement->Point[arrowhead=vee,arrowtail=none,headlabel="position",group=Point,minlen=2,constraint=false,]
 GraphElement->DiagramElement[arrowhead=onormal,group=DiagramElement,minlen=2,constraint=true,]
;
 node[shape=record];
SemanticModelBridge[label="{/SemanticModelBridge/|presentation : String| }"]
 SemanticModelBridge->Diagram[arrowhead=diamond,arrowtail=none,headlabel="diagram[0-1]",taillabel="owner",group=Diagram,minlen=2,constraint=true,]
 SemanticModelBridge->GraphElement[arrowhead=diamond,arrowtail=none,headlabel="graphElement",taillabel="semanticModel",group=GraphElement,minlen=2,constraint=true,]
;
 node[shape=record];
GraphEdge[label="{GraphEdge| | }"]
 GraphEdge->GraphConnector[arrowhead=none,arrowtail=none,headlabel="anchor[22]{ordered}",taillabel="graphEdge[*]",group=GraphConnector,minlen=2,constraint=false,]
 GraphEdge->BezierPoint[arrowhead=vee,arrowtail=none,headlabel="waypoints[2-*]{ordered}",group=BezierPoint,minlen=2,constraint=false,]
 GraphEdge->GraphElement[arrowhead=onormal,group=GraphElement,minlen=2,constraint=true,]
;
 node[shape=record];
GraphNode[label="{GraphNode| | }"]
 GraphNode->Dimension[arrowhead=vee,arrowtail=none,headlabel="size[0-1]",group=Dimension,minlen=2,constraint=false,]
 GraphNode->GraphElement[arrowhead=onormal,group=GraphElement,minlen=2,constraint=true,]
;
 node[shape=record];
GraphConnector[label="{GraphConnector| | }"]
 GraphConnector->GraphElement[arrowhead=diamond,arrowtail=none,headlabel="graphElement",taillabel="anchorage[*]",group=GraphElement,minlen=2,constraint=true,]
 GraphConnector->Point[arrowhead=vee,arrowtail=none,headlabel="position",group=Point,minlen=2,constraint=false,]
;
 node[shape=record];
LeafElement[label="{/LeafElement/| | }"]
 LeafElement->DiagramElement[arrowhead=onormal,group=DiagramElement,minlen=2,constraint=true,]
;
 node[shape=record];
Reference[label="{Reference| | }"]
 Reference->DiagramElement[arrowhead=none,arrowtail=none,headlabel="referenced",taillabel="reference[*]",group=DiagramElement,minlen=2,constraint=false,]
 Reference->DiagramElement[arrowhead=onormal,group=DiagramElement,minlen=2,constraint=true,]
;
 node[shape=record];
TextElement[label="{TextElement|text : String| }"]
 TextElement->LeafElement[arrowhead=onormal,group=LeafElement,minlen=2,constraint=true,]
;
 node[shape=record];
GraphicPrimitive[label="{/GraphicPrimitive/| | }"]
 GraphicPrimitive->LeafElement[arrowhead=onormal,group=LeafElement,minlen=2,constraint=true,]
;
 node[shape=record];
Polyline[label="{Polyline|closed : Boolean| }"]
 Polyline->BezierPoint[arrowhead=vee,arrowtail=none,headlabel="waypoints[2-*]{ordered}",group=BezierPoint,minlen=2,constraint=false,]
 Polyline->GraphicPrimitive[arrowhead=onormal,group=GraphicPrimitive,minlen=2,constraint=true,]
;
 node[shape=record];
Ellipse[label="{Ellipse|radiusX : Double\nradiusY : Double\nrotation : Double\nstartAngle : Double\nendAngle : Double| }"]
 Ellipse->Point[arrowhead=vee,arrowtail=none,headlabel="center",group=Point,minlen=2,constraint=false,]
 Ellipse->GraphicPrimitive[arrowhead=onormal,group=GraphicPrimitive,minlen=2,constraint=true,]
;
 node[shape=record];
Image[label="{Image|uri : String\nmimeType : String| }"]
 Image->LeafElement[arrowhead=onormal,group=LeafElement,minlen=2,constraint=true,]
;
 node[shape=record];
Property[label="{Property|key : String\nvalue : String| }"]
;
 node[shape=record];
SimpleSemanticModelElement[label="{SimpleSemanticModelElement|typeInfo : String| }"]
 SimpleSemanticModelElement->SemanticModelBridge[arrowhead=onormal,group=SemanticModelBridge,minlen=2,constraint=true,]
;
 node[shape=record];
Uml1SemanticModelBridge[label="{Uml1SemanticModelBridge| | }"]
 Uml1SemanticModelBridge->Element[arrowhead=vee,arrowtail=none,headlabel="element",group=Element,minlen=2,constraint=false,]
 Uml1SemanticModelBridge->SemanticModelBridge[arrowhead=onormal,group=SemanticModelBridge,minlen=2,constraint=true,]
;
 node[shape=record];
CoreSemanticModelBridge[label="{CoreSemanticModelBridge| | }"]
 CoreSemanticModelBridge->SemanticModelBridge[arrowhead=onormal,group=SemanticModelBridge,minlen=2,constraint=true,]
;
 node[shape=record];
DiagramLink[label="{DiagramLink|zoom : Double| }"]
 DiagramLink->GraphElement[arrowhead=diamond,arrowtail=none,headlabel="graphElement",taillabel="link[*]",group=GraphElement,minlen=2,constraint=true,]
 DiagramLink->Point[arrowhead=vee,arrowtail=none,headlabel="viewport",group=Point,minlen=2,constraint=false,]
;
 node[shape=record];
Diagram[label="{Diagram|name : String\nzoom : Double| }"]
 Diagram->DiagramLink[arrowhead=none,arrowtail=none,headlabel="diagramLink[*]",taillabel="diagram",group=DiagramLink,minlen=2,constraint=false,]
 Diagram->Point[arrowhead=vee,arrowtail=none,headlabel="viewport",group=Point,minlen=2,constraint=false,]
 Diagram->GraphNode[arrowhead=onormal,group=GraphNode,minlen=2,constraint=true,]
;

} subgraph "cluster_Activity_Graphs"{
labelloc=t
color=black
label=Activity_Graphs
 node[shape=record];
ActivityGraph[label="{ActivityGraph| | }"]
 ActivityGraph->StateMachine[arrowhead=onormal,group=StateMachine,minlen=2,constraint=true,]
;
 node[shape=record];
Partition[label="{Partition| | }"]
 Partition->ModelElement[arrowhead=vee,arrowtail=none,headlabel="contents[*]",group=ModelElement,minlen=2,constraint=false,]
 Partition->ActivityGraph[arrowhead=diamond,arrowtail=none,headlabel="activityGraph",taillabel="partition[*]",group=ActivityGraph,minlen=2,constraint=true,]
 Partition->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
SubactivityState[label="{SubactivityState|isDynamic : Boolean| }"]
 SubactivityState->ArgListsExpression[arrowhead=vee,arrowtail=none,headlabel="dynamicArguments[0-1]",group=ArgListsExpression,minlen=2,constraint=false,]
 SubactivityState->Multiplicity[arrowhead=vee,arrowtail=none,headlabel="dynamicMultiplicity[0-1]",group=Multiplicity,minlen=2,constraint=false,]
 SubactivityState->SubmachineState[arrowhead=onormal,group=SubmachineState,minlen=2,constraint=true,]
;
 node[shape=record];
ActionState[label="{ActionState|isDynamic : Boolean| }"]
 ActionState->ArgListsExpression[arrowhead=vee,arrowtail=none,headlabel="dynamicArguments[0-1]",group=ArgListsExpression,minlen=2,constraint=false,]
 ActionState->Multiplicity[arrowhead=vee,arrowtail=none,headlabel="dynamicMultiplicity[0-1]",group=Multiplicity,minlen=2,constraint=false,]
 ActionState->SimpleState[arrowhead=onormal,group=SimpleState,minlen=2,constraint=true,]
;
 node[shape=record];
CallState[label="{CallState| | }"]
 CallState->ActionState[arrowhead=onormal,group=ActionState,minlen=2,constraint=true,]
;
 node[shape=record];
ObjectFlowState[label="{ObjectFlowState|isSynch : Boolean| }"]
 ObjectFlowState->Classifier[arrowhead=vee,arrowtail=none,headlabel="type",group=Classifier,minlen=2,constraint=false,]
 ObjectFlowState->Parameter[arrowhead=vee,arrowtail=none,headlabel="parameter[*]",group=Parameter,minlen=2,constraint=false,]
 ObjectFlowState->SimpleState[arrowhead=onormal,group=SimpleState,minlen=2,constraint=true,]
;
 node[shape=record];
ClassifierInState[label="{ClassifierInState| | }"]
 ClassifierInState->State[arrowhead=vee,arrowtail=none,headlabel="inState[1-*]",group=State,minlen=2,constraint=false,]
 ClassifierInState->Classifier[arrowhead=vee,arrowtail=none,headlabel="type",group=Classifier,minlen=2,constraint=false,]
 ClassifierInState->Classifier[arrowhead=onormal,group=Classifier,minlen=2,constraint=true,]
;

} subgraph "cluster_Use_Cases"{
labelloc=t
color=black
label=Use_Cases
 node[shape=record];
UseCase[label="{UseCase| | }"]
 UseCase->Extend[arrowhead=none,arrowtail=none,headlabel="extend[*]",taillabel="extension",group=Extend,minlen=2,constraint=false,]
 UseCase->Classifier[arrowhead=onormal,group=Classifier,minlen=2,constraint=true,]
;
 node[shape=record];
Actor[label="{Actor| | }"]
 Actor->Classifier[arrowhead=onormal,group=Classifier,minlen=2,constraint=true,]
;
 node[shape=record];
UseCaseInstance[label="{UseCaseInstance| | }"]
 UseCaseInstance->Instance[arrowhead=onormal,group=Instance,minlen=2,constraint=true,]
;
 node[shape=record];
Extend[label="{Extend| | }"]
 Extend->ExtensionPoint[arrowhead=vee,arrowtail=none,headlabel="extensionPoint[1-*]{ordered}",group=ExtensionPoint,minlen=2,constraint=false,]
 Extend->UseCase[arrowhead=vee,arrowtail=none,headlabel="base",group=UseCase,minlen=2,constraint=false,]
 Extend->BooleanExpression[arrowhead=vee,arrowtail=none,headlabel="condition",group=BooleanExpression,minlen=2,constraint=false,]
 Extend->Relationship[arrowhead=onormal,group=Relationship,minlen=2,constraint=true,]
;
 node[shape=record];
Include[label="{Include| | }"]
 Include->UseCase[arrowhead=vee,arrowtail=none,headlabel="addition",group=UseCase,minlen=2,constraint=false,]
 Include->UseCase[arrowhead=none,arrowtail=none,headlabel="base",taillabel="include[*]",group=UseCase,minlen=2,constraint=false,]
 Include->Relationship[arrowhead=onormal,group=Relationship,minlen=2,constraint=true,]
;
 node[shape=record];
ExtensionPoint[label="{ExtensionPoint|location : String| }"]
 ExtensionPoint->UseCase[arrowhead=diamond,arrowtail=none,headlabel="useCase",taillabel="extensionPoint[*]",group=UseCase,minlen=2,constraint=true,]
 ExtensionPoint->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;

}
}