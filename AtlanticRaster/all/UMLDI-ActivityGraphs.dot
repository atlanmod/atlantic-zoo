digraph "KM3 Model in DOT" {
graph[rankdir=BT,labeljust=l,labelloc=t,nodeSep=0.75,compound=true];
 subgraph "cluster_Core"{
labelloc=t
color=black
label=Core
 node[shape=record];
Element[label="{/Element/| | }"]
;
 node[shape=record];
ModelElement[label="{/ModelElement/|name[0-1] : String\nvisibility[0-1] : VisibilityKind\nisSpecification : Boolean| }"]
 ModelElement->Namespace[arrowhead=diamond,arrowtail=none,headlabel="namespace[0-1]",taillabel="ownedElement[*]",group=Namespace,minlen=2,constraint=true,]
 ModelElement->Element[arrowhead=onormal,group=Element,minlen=2,constraint=true,]
;
 node[shape=record];
GeneralizableElement[label="{/GeneralizableElement/|isRoot : Boolean\nisLeaf : Boolean\nisAbstract : Boolean| }"]
 GeneralizableElement->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
Namespace[label="{/Namespace/| | }"]
 Namespace->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
Classifier[label="{/Classifier/| | }"]
 Classifier->Generalization[arrowhead=none,arrowtail=none,headlabel="powertypeRange[*]",taillabel="powertype[0-1]",group=Generalization,minlen=2,constraint=false,]
 Classifier->GeneralizableElement[arrowhead=onormal,group=GeneralizableElement,minlen=2,constraint=true,]
 Classifier->Namespace[arrowhead=onormal,group=Namespace,minlen=2,constraint=true,]
;
 node[shape=record];
Feature[label="{/Feature/|ownerScope : ScopeKind| }"]
 Feature->Classifier[arrowhead=diamond,arrowtail=none,headlabel="owner[0-1]",taillabel="feature[*]{ordered}",group=Classifier,minlen=2,constraint=true,]
 Feature->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
Relationship[label="{/Relationship/| | }"]
 Relationship->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
BehavioralFeature[label="{/BehavioralFeature/|isQuery : Boolean| }"]
 BehavioralFeature->Feature[arrowhead=onormal,group=Feature,minlen=2,constraint=true,]
;
 node[shape=record];
Operation[label="{Operation|concurrency[0-1] : CallConcurrencyKind\nisRoot : Boolean\nisLeaf : Boolean\nisAbstract : Boolean\nspecification[0-1] : String| }"]
 Operation->BehavioralFeature[arrowhead=onormal,group=BehavioralFeature,minlen=2,constraint=true,]
;
 node[shape=record];
Parameter[label="{Parameter|defaultValue[0-1] : Expression\nkind : ParameterDirectionKind| }"]
 Parameter->Classifier[arrowhead=vee,arrowtail=none,headlabel="type",group=Classifier,minlen=2,constraint=false,]
 Parameter->BehavioralFeature[arrowhead=diamond,arrowtail=none,headlabel="behavioralFeature[0-1]",taillabel="parameter[*]{ordered}",group=BehavioralFeature,minlen=2,constraint=true,]
 Parameter->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
Generalization[label="{Generalization|discriminator[0-1] : String| }"]
 Generalization->GeneralizableElement[arrowhead=vee,arrowtail=none,headlabel="parent",group=GeneralizableElement,minlen=2,constraint=false,]
 Generalization->GeneralizableElement[arrowhead=none,arrowtail=none,headlabel="child",taillabel="generalization[*]",group=GeneralizableElement,minlen=2,constraint=false,]
 Generalization->Relationship[arrowhead=onormal,group=Relationship,minlen=2,constraint=true,]
;

} subgraph "cluster_Common_Behavior"{
labelloc=t
color=black
label=Common_Behavior
 node[shape=record];
Signal[label="{Signal| | }"]
 Signal->Classifier[arrowhead=onormal,group=Classifier,minlen=2,constraint=true,]
;
 node[shape=record];
Action[label="{/Action/|recurrence[0-1] : IterationExpression\ntarget[0-1] : ObjectSetExpression\nisAsynchronous : Boolean\nscript[0-1] : ActionExpression| }"]
 Action->ActionSequence[arrowhead=diamond,arrowtail=none,headlabel="actionSequence[0-1]",taillabel="action[*]{ordered}",group=ActionSequence,minlen=2,constraint=true,]
 Action->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
CreateAction[label="{CreateAction| | }"]
 CreateAction->Classifier[arrowhead=vee,arrowtail=none,headlabel="instantiation",group=Classifier,minlen=2,constraint=false,]
 CreateAction->Action[arrowhead=onormal,group=Action,minlen=2,constraint=true,]
;
 node[shape=record];
DestroyAction[label="{DestroyAction| | }"]
 DestroyAction->Action[arrowhead=onormal,group=Action,minlen=2,constraint=true,]
;
 node[shape=record];
UninterpretedAction[label="{UninterpretedAction| | }"]
 UninterpretedAction->Action[arrowhead=onormal,group=Action,minlen=2,constraint=true,]
;
 node[shape=record];
CallAction[label="{CallAction| | }"]
 CallAction->Operation[arrowhead=vee,arrowtail=none,headlabel="operation",group=Operation,minlen=2,constraint=false,]
 CallAction->Action[arrowhead=onormal,group=Action,minlen=2,constraint=true,]
;
 node[shape=record];
SendAction[label="{SendAction| | }"]
 SendAction->Signal[arrowhead=vee,arrowtail=none,headlabel="signal",group=Signal,minlen=2,constraint=false,]
 SendAction->Action[arrowhead=onormal,group=Action,minlen=2,constraint=true,]
;
 node[shape=record];
ActionSequence[label="{ActionSequence| | }"]
 ActionSequence->Action[arrowhead=onormal,group=Action,minlen=2,constraint=true,]
;
 node[shape=record];
Argument[label="{Argument|value : Expression| }"]
 Argument->Action[arrowhead=diamond,arrowtail=none,headlabel="action[0-1]",taillabel="actualArgument[*]{ordered}",group=Action,minlen=2,constraint=true,]
 Argument->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
ReturnAction[label="{ReturnAction| | }"]
 ReturnAction->Action[arrowhead=onormal,group=Action,minlen=2,constraint=true,]
;
 node[shape=record];
TerminateAction[label="{TerminateAction| | }"]
 TerminateAction->Action[arrowhead=onormal,group=Action,minlen=2,constraint=true,]
;
 node[shape=record];
Exception[label="{Exception| | }"]
 Exception->Signal[arrowhead=onormal,group=Signal,minlen=2,constraint=true,]
;

} subgraph "cluster_State_Machines"{
labelloc=t
color=black
label=State_Machines
 node[shape=record];
StateMachine[label="{StateMachine| | }"]
 StateMachine->ModelElement[arrowhead=vee,arrowtail=none,headlabel="context[0-1]",group=ModelElement,minlen=2,constraint=false,]
 StateMachine->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
Event[label="{/Event/| | }"]
 Event->Parameter[arrowhead=vee,arrowtail=diamond,headlabel="parameter[*]{ordered}",group=Parameter,minlen=2,constraint=true,]
 Event->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
StateVertex[label="{/StateVertex/| | }"]
 StateVertex->CompositeState[arrowhead=diamond,arrowtail=none,headlabel="container[0-1]",taillabel="subvertex[*]",group=CompositeState,minlen=2,constraint=true,]
 StateVertex->Transition[arrowhead=none,arrowtail=none,headlabel="incoming[*]",taillabel="target",group=Transition,minlen=2,constraint=false,]
 StateVertex->Transition[arrowhead=none,arrowtail=none,headlabel="outgoing[*]",taillabel="source",group=Transition,minlen=2,constraint=false,]
 StateVertex->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
State[label="{/State/| | }"]
 State->Event[arrowhead=vee,arrowtail=none,headlabel="deferrableEvent[*]",group=Event,minlen=2,constraint=false,]
 State->Transition[arrowhead=vee,arrowtail=diamond,headlabel="internalTransition[*]",group=Transition,minlen=2,constraint=true,]
 State->Action[arrowhead=vee,arrowtail=diamond,headlabel="exit[0-1]",group=Action,minlen=2,constraint=true,]
 State->Action[arrowhead=vee,arrowtail=diamond,headlabel="doActivity[0-1]",group=Action,minlen=2,constraint=true,]
 State->Action[arrowhead=vee,arrowtail=diamond,headlabel="entry[0-1]",group=Action,minlen=2,constraint=true,]
 State->StateMachine[arrowhead=diamond,arrowtail=none,headlabel="stateMachine[0-1]",taillabel="top",group=StateMachine,minlen=2,constraint=true,]
 State->StateVertex[arrowhead=onormal,group=StateVertex,minlen=2,constraint=true,]
;
 node[shape=record];
TimeEvent[label="{TimeEvent|when : TimeExpression| }"]
 TimeEvent->Event[arrowhead=onormal,group=Event,minlen=2,constraint=true,]
;
 node[shape=record];
CallEvent[label="{CallEvent| | }"]
 CallEvent->Operation[arrowhead=vee,arrowtail=none,headlabel="operation",group=Operation,minlen=2,constraint=false,]
 CallEvent->Event[arrowhead=onormal,group=Event,minlen=2,constraint=true,]
;
 node[shape=record];
SignalEvent[label="{SignalEvent| | }"]
 SignalEvent->Signal[arrowhead=vee,arrowtail=none,headlabel="signal",group=Signal,minlen=2,constraint=false,]
 SignalEvent->Event[arrowhead=onormal,group=Event,minlen=2,constraint=true,]
;
 node[shape=record];
Transition[label="{Transition| | }"]
 Transition->Event[arrowhead=vee,arrowtail=none,headlabel="trigger[0-1]",group=Event,minlen=2,constraint=false,]
 Transition->StateMachine[arrowhead=diamond,arrowtail=none,headlabel="stateMachine[0-1]",taillabel="transitions[*]",group=StateMachine,minlen=2,constraint=true,]
 Transition->Action[arrowhead=vee,arrowtail=diamond,headlabel="effect[0-1]",group=Action,minlen=2,constraint=true,]
 Transition->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
CompositeState[label="{CompositeState|isConcurrent : Boolean| }"]
 CompositeState->State[arrowhead=onormal,group=State,minlen=2,constraint=true,]
;
 node[shape=record];
ChangeEvent[label="{ChangeEvent|changeExpression : BooleanExpression| }"]
 ChangeEvent->Event[arrowhead=onormal,group=Event,minlen=2,constraint=true,]
;
 node[shape=record];
Guard[label="{Guard|expression : BooleanExpression| }"]
 Guard->Transition[arrowhead=diamond,arrowtail=none,headlabel="transition",taillabel="guard[0-1]",group=Transition,minlen=2,constraint=true,]
 Guard->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
Pseudostate[label="{Pseudostate|kind : PseudostateKind| }"]
 Pseudostate->StateVertex[arrowhead=onormal,group=StateVertex,minlen=2,constraint=true,]
;
 node[shape=record];
SimpleState[label="{SimpleState| | }"]
 SimpleState->State[arrowhead=onormal,group=State,minlen=2,constraint=true,]
;
 node[shape=record];
SubmachineState[label="{SubmachineState| | }"]
 SubmachineState->StateMachine[arrowhead=none,arrowtail=none,headlabel="submachine",taillabel="submachineState[*]",group=StateMachine,minlen=2,constraint=false,]
 SubmachineState->CompositeState[arrowhead=onormal,group=CompositeState,minlen=2,constraint=true,]
;
 node[shape=record];
SynchState[label="{SynchState|bound : Integer| }"]
 SynchState->StateVertex[arrowhead=onormal,group=StateVertex,minlen=2,constraint=true,]
;
 node[shape=record];
StubState[label="{StubState|referenceState : String| }"]
 StubState->StateVertex[arrowhead=onormal,group=StateVertex,minlen=2,constraint=true,]
;
 node[shape=record];
FinalState[label="{FinalState| | }"]
 FinalState->State[arrowhead=onormal,group=State,minlen=2,constraint=true,]
;

} subgraph "cluster_Activity_Graphs"{
labelloc=t
color=black
label=Activity_Graphs
 node[shape=record];
ActivityGraph[label="{ActivityGraph| | }"]
 ActivityGraph->StateMachine[arrowhead=onormal,group=StateMachine,minlen=2,constraint=true,]
;
 node[shape=record];
Partition[label="{Partition| | }"]
 Partition->ModelElement[arrowhead=vee,arrowtail=none,headlabel="contents[*]",group=ModelElement,minlen=2,constraint=false,]
 Partition->ActivityGraph[arrowhead=diamond,arrowtail=none,headlabel="activityGraph",taillabel="partition[*]",group=ActivityGraph,minlen=2,constraint=true,]
 Partition->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
SubactivityState[label="{SubactivityState|isDynamic : Boolean\ndynamicArguments[0-1] : ArgListsExpression\ndynamicMultiplicity[0-1] : Multiplicity| }"]
 SubactivityState->SubmachineState[arrowhead=onormal,group=SubmachineState,minlen=2,constraint=true,]
;
 node[shape=record];
ActionState[label="{ActionState|isDynamic : Boolean\ndynamicArguments[0-1] : ArgListsExpression\ndynamicMultiplicity[0-1] : Multiplicity| }"]
 ActionState->SimpleState[arrowhead=onormal,group=SimpleState,minlen=2,constraint=true,]
;
 node[shape=record];
CallState[label="{CallState| | }"]
 CallState->ActionState[arrowhead=onormal,group=ActionState,minlen=2,constraint=true,]
;
 node[shape=record];
ObjectFlowState[label="{ObjectFlowState|isSynch : Boolean| }"]
 ObjectFlowState->Classifier[arrowhead=vee,arrowtail=none,headlabel="type",group=Classifier,minlen=2,constraint=false,]
 ObjectFlowState->Parameter[arrowhead=vee,arrowtail=none,headlabel="parameter[*]",group=Parameter,minlen=2,constraint=false,]
 ObjectFlowState->SimpleState[arrowhead=onormal,group=SimpleState,minlen=2,constraint=true,]
;
 node[shape=record];
ClassifierInState[label="{ClassifierInState| | }"]
 ClassifierInState->State[arrowhead=vee,arrowtail=none,headlabel="inState[1-*]",group=State,minlen=2,constraint=false,]
 ClassifierInState->Classifier[arrowhead=vee,arrowtail=none,headlabel="type",group=Classifier,minlen=2,constraint=false,]
 ClassifierInState->Classifier[arrowhead=onormal,group=Classifier,minlen=2,constraint=true,]
;

} subgraph "cluster_Data_Types"{
labelloc=t
color=black
label=Data_Types
 node[shape=record];
Multiplicity[label="{Multiplicity| | }"]
;
 node[shape=record];
MultiplicityRange[label="{MultiplicityRange|lower : Integer\nupper : Integer| }"]
 MultiplicityRange->Multiplicity[arrowhead=diamond,arrowtail=none,headlabel="multiplicity",taillabel="range[1-*]",group=Multiplicity,minlen=2,constraint=true,]
;
 node[shape=record];
Expression[label="{Expression|language[0-1] : String\nbody : String| }"]
;
 node[shape=record];
BooleanExpression[label="{BooleanExpression| | }"]
 BooleanExpression->Expression[arrowhead=onormal,group=Expression,minlen=2,constraint=true,]
;
 node[shape=record];
ObjectSetExpression[label="{ObjectSetExpression| | }"]
 ObjectSetExpression->Expression[arrowhead=onormal,group=Expression,minlen=2,constraint=true,]
;
 node[shape=record];
ActionExpression[label="{ActionExpression| | }"]
 ActionExpression->Expression[arrowhead=onormal,group=Expression,minlen=2,constraint=true,]
;
 node[shape=record];
IterationExpression[label="{IterationExpression| | }"]
 IterationExpression->Expression[arrowhead=onormal,group=Expression,minlen=2,constraint=true,]
;
 node[shape=record];
TimeExpression[label="{TimeExpression| | }"]
 TimeExpression->Expression[arrowhead=onormal,group=Expression,minlen=2,constraint=true,]
;
 node[shape=record];
ArgListsExpression[label="{ArgListsExpression| | }"]
 ArgListsExpression->Expression[arrowhead=onormal,group=Expression,minlen=2,constraint=true,]
;

} subgraph "cluster_PrimitiveTypes"{
labelloc=t
color=black
label=PrimitiveTypes
 node[shape=record];
Boolean[label="{&#171;DataType&#187;\nBoolean|}"]
;
 node[shape=record];
Float[label="{&#171;DataType&#187;\nFloat|}"]
;
 node[shape=record];
Integer[label="{&#171;DataType&#187;\nInteger|}"]
;
 node[shape=record];
Long[label="{&#171;DataType&#187;\nLong|}"]
;
 node[shape=record];
String[label="{&#171;DataType&#187;\nString|}"]
;
 node[shape=record];
Double[label="{&#171;DataType&#187;\nDouble|}"]
;

}
}