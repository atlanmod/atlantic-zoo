digraph "KM3 Model in DOT" {
graph[rankdir=BT,labeljust=l,labelloc=t,nodeSep=0.75,compound=true];
 subgraph "cluster_MonitorProgram"{
labelloc=t
color=black
label=MonitorProgram
 node[shape=record];
LocatedElement[label="{/LocatedElement/|location : String| }"]
;
 node[shape=record];
NamedElement[label="{/NamedElement/|name : String| }"]
 NamedElement->LocatedElement[arrowhead=onormal,group=LocatedElement,minlen=2,constraint=true,]
;
 node[shape=record];
Structure[label="{/Structure/| | }"]
 Structure->NamedElement[arrowhead=onormal,group=NamedElement,minlen=2,constraint=true,]
;
 node[shape=record];
ProcContainerElement[label="{/ProcContainerElement/| | }"]
 ProcContainerElement->Structure[arrowhead=onormal,group=Structure,minlen=2,constraint=true,]
;
 node[shape=record];
Program[label="{Program| | }"]
 Program->ProcContainerElement[arrowhead=onormal,group=ProcContainerElement,minlen=2,constraint=true,]
;
 node[shape=record];
Monitor[label="{Monitor| | }"]
 Monitor->Program[arrowhead=diamond,arrowtail=none,headlabel="program",taillabel="monitors[*]{ordered}",group=Program,minlen=2,constraint=true,]
 Monitor->ProcContainerElement[arrowhead=onormal,group=ProcContainerElement,minlen=2,constraint=true,]
;
 node[shape=record];
Procedure[label="{Procedure| | }"]
 Procedure->ProcContainerElement[arrowhead=diamond,arrowtail=none,headlabel="container",taillabel="procedures[*]{ordered}",group=ProcContainerElement,minlen=2,constraint=true,]
 Procedure->Statement[arrowhead=vee,arrowtail=diamond,headlabel="statements[*]{ordered}",group=Statement,minlen=2,constraint=true,]
 Procedure->Structure[arrowhead=onormal,group=Structure,minlen=2,constraint=true,]
;
 node[shape=record];
VariableDeclaration[label="{VariableDeclaration| | }"]
 VariableDeclaration->Type[arrowhead=vee,arrowtail=none,headlabel="type",group=Type,minlen=2,constraint=false,]
 VariableDeclaration->Expression[arrowhead=vee,arrowtail=diamond,headlabel="initialValue[0-1]",group=Expression,minlen=2,constraint=true,]
 VariableDeclaration->Structure[arrowhead=diamond,arrowtail=none,headlabel="structure",taillabel="variables[*]{ordered}",group=Structure,minlen=2,constraint=true,]
 VariableDeclaration->NamedElement[arrowhead=onormal,group=NamedElement,minlen=2,constraint=true,]
;
 node[shape=record];
Parameter[label="{Parameter|direction : Direction| }"]
 Parameter->Procedure[arrowhead=diamond,arrowtail=none,headlabel="procedure",taillabel="parameters[*]{ordered}",group=Procedure,minlen=2,constraint=true,]
 Parameter->VariableDeclaration[arrowhead=onormal,group=VariableDeclaration,minlen=2,constraint=true,]
;
 node[shape=record];
Type[label="{Type| | }"]
 Type->NamedElement[arrowhead=onormal,group=NamedElement,minlen=2,constraint=true,]
;
 node[shape=record];
Expression[label="{/Expression/| | }"]
 Expression->LocatedElement[arrowhead=onormal,group=LocatedElement,minlen=2,constraint=true,]
;
 node[shape=record];
VariableExp[label="{VariableExp| | }"]
 VariableExp->VariableDeclaration[arrowhead=vee,arrowtail=none,headlabel="declaration",group=VariableDeclaration,minlen=2,constraint=false,]
 VariableExp->Expression[arrowhead=onormal,group=Expression,minlen=2,constraint=true,]
;
 node[shape=record];
PropertyCallExp[label="{/PropertyCallExp/|name : String| }"]
 PropertyCallExp->Expression[arrowhead=vee,arrowtail=diamond,headlabel="source",group=Expression,minlen=2,constraint=true,]
 PropertyCallExp->Expression[arrowhead=onormal,group=Expression,minlen=2,constraint=true,]
;
 node[shape=record];
OperatorCallExp[label="{OperatorCallExp| | }"]
 OperatorCallExp->Expression[arrowhead=vee,arrowtail=diamond,headlabel="right",group=Expression,minlen=2,constraint=true,]
 OperatorCallExp->PropertyCallExp[arrowhead=onormal,group=PropertyCallExp,minlen=2,constraint=true,]
;
 node[shape=record];
AttributeCallExp[label="{AttributeCallExp| | }"]
 AttributeCallExp->PropertyCallExp[arrowhead=onormal,group=PropertyCallExp,minlen=2,constraint=true,]
;
 node[shape=record];
ProcedureCallExp[label="{ProcedureCallExp| | }"]
 ProcedureCallExp->Expression[arrowhead=vee,arrowtail=diamond,headlabel="arguments[*]{ordered}",group=Expression,minlen=2,constraint=true,]
 ProcedureCallExp->PropertyCallExp[arrowhead=onormal,group=PropertyCallExp,minlen=2,constraint=true,]
;
 node[shape=record];
LiteralExp[label="{/LiteralExp/| | }"]
 LiteralExp->Expression[arrowhead=onormal,group=Expression,minlen=2,constraint=true,]
;
 node[shape=record];
BooleanExp[label="{BooleanExp|symbol : Boolean| }"]
 BooleanExp->LiteralExp[arrowhead=onormal,group=LiteralExp,minlen=2,constraint=true,]
;
 node[shape=record];
IntegerExp[label="{IntegerExp|symbol : Integer| }"]
 IntegerExp->LiteralExp[arrowhead=onormal,group=LiteralExp,minlen=2,constraint=true,]
;
 node[shape=record];
Statement[label="{/Statement/| | }"]
 Statement->LocatedElement[arrowhead=onormal,group=LocatedElement,minlen=2,constraint=true,]
;
 node[shape=record];
AssignmentStat[label="{AssignmentStat| | }"]
 AssignmentStat->VariableExp[arrowhead=vee,arrowtail=diamond,headlabel="target",group=VariableExp,minlen=2,constraint=true,]
 AssignmentStat->Expression[arrowhead=vee,arrowtail=diamond,headlabel="value",group=Expression,minlen=2,constraint=true,]
 AssignmentStat->Statement[arrowhead=onormal,group=Statement,minlen=2,constraint=true,]
;
 node[shape=record];
ConditionalStat[label="{ConditionalStat| | }"]
 ConditionalStat->Expression[arrowhead=vee,arrowtail=diamond,headlabel="condition",group=Expression,minlen=2,constraint=true,]
 ConditionalStat->Statement[arrowhead=vee,arrowtail=diamond,headlabel="thenStats[1-*]",group=Statement,minlen=2,constraint=true,]
 ConditionalStat->Statement[arrowhead=vee,arrowtail=diamond,headlabel="elseStats[*]",group=Statement,minlen=2,constraint=true,]
 ConditionalStat->Statement[arrowhead=onormal,group=Statement,minlen=2,constraint=true,]
;
 node[shape=record];
WhileStat[label="{WhileStat| | }"]
 WhileStat->Expression[arrowhead=vee,arrowtail=diamond,headlabel="condition",group=Expression,minlen=2,constraint=true,]
 WhileStat->Statement[arrowhead=vee,arrowtail=diamond,headlabel="doStats[1-*]",group=Statement,minlen=2,constraint=true,]
 WhileStat->Statement[arrowhead=onormal,group=Statement,minlen=2,constraint=true,]
;
 node[shape=record];
ExpressionStat[label="{ExpressionStat| | }"]
 ExpressionStat->Expression[arrowhead=vee,arrowtail=diamond,headlabel="expression",group=Expression,minlen=2,constraint=true,]
 ExpressionStat->Statement[arrowhead=onormal,group=Statement,minlen=2,constraint=true,]
;

} subgraph "cluster_PrimitiveTypes"{
labelloc=t
color=black
label=PrimitiveTypes
 node[shape=record];
Boolean[label="{&#171;DataType&#187;\nBoolean|}"]
;
 node[shape=record];
Integer[label="{&#171;DataType&#187;\nInteger|}"]
;
 node[shape=record];
String[label="{&#171;DataType&#187;\nString|}"]
;

}
}