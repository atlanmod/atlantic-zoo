digraph "KM3 Model in DOT" {
graph[rankdir=BT,labeljust=l,labelloc=t,nodeSep=0.75,compound=true];
 subgraph "cluster_UIML"{
labelloc=t
color=black
label=UIML
 node[shape=record];
UIML[label="{UIML| | }"]
;
 node[shape=record];
Header[label="{Header| | }"]
;
 node[shape=record];
MetaData[label="{MetaData|name : String\ncontent : String| }"]
;

} subgraph "cluster_Interface"{
labelloc=t
color=black
label=Interface
 node[shape=record];
ExtensibleElement[label="{/ExtensibleElement/| | }"]
;
 node[shape=record];
Source[label="{/Source/| | }"]
;
 node[shape=record];
LocalSource[label="{LocalSource| | }"]
 LocalSource->Source[arrowhead=onormal,group=Source,minlen=2,constraint=true,]
;
 node[shape=record];
RemoteSource[label="{RemoteSource|location : String| }"]
 RemoteSource->Source[arrowhead=onormal,group=Source,minlen=2,constraint=true,]
;
 node[shape=record];
Interface[label="{Interface|id[0-1] : String\nhow[0-1] : HowKind\nexport[0-1] : ExportKind| }"]
 Interface->ExtensibleElement[arrowhead=onormal,group=ExtensibleElement,minlen=2,constraint=true,]
;
 node[shape=record];
Structure[label="{Structure|id[0-1] : String\nhow[0-1] : HowKind\nexport[0-1] : ExportKind| }"]
 Structure->ExtensibleElement[arrowhead=onormal,group=ExtensibleElement,minlen=2,constraint=true,]
;
 node[shape=record];
Part[label="{Part|id[0-1] : String\nhow[0-1] : HowKind\nexport[0-1] : ExportKind\nclass[0-1] : String\nwherePart[0-1] : String| }"]
 Part->ExtensibleElement[arrowhead=onormal,group=ExtensibleElement,minlen=2,constraint=true,]
;
 node[shape=record];
Style[label="{Style|id[0-1] : String\nhow[0-1] : HowKind\nexport[0-1] : ExportKind| }"]
 Style->ExtensibleElement[arrowhead=onormal,group=ExtensibleElement,minlen=2,constraint=true,]
;
 node[shape=record];
Property[label="{Property|name[0-1] : String\nhow[0-1] : HowKind\nexport[0-1] : ExportKind\nvalues[*] : String| }"]
 Property->ExtensibleElement[arrowhead=onormal,group=ExtensibleElement,minlen=2,constraint=true,]
;
 node[shape=record];
Content[label="{Content|id[0-1] : String\nhow[0-1] : HowKind\nexport[0-1] : ExportKind| }"]
 Content->ExtensibleElement[arrowhead=onormal,group=ExtensibleElement,minlen=2,constraint=true,]
;
 node[shape=record];
Behavior[label="{Behavior|id[0-1] : String\nhow[0-1] : HowKind\nexport[0-1] : ExportKind| }"]
 Behavior->ExtensibleElement[arrowhead=onormal,group=ExtensibleElement,minlen=2,constraint=true,]
;
 node[shape=record];
Repeat[label="{Repeat| | }"]
;
 node[shape=record];
Constant[label="{Constant|id[0-1] : String\nhow[0-1] : HowKind\nexport[0-1] : ExportKind\nmodel[0-1] : String\nvalue[0-1] : String| }"]
 Constant->ExtensibleElement[arrowhead=onormal,group=ExtensibleElement,minlen=2,constraint=true,]
;
 node[shape=record];
Reference[label="{Reference| | }"]
;
 node[shape=record];
Rule[label="{Rule|id[0-1] : String\nhow[0-1] : HowKind\nexport[0-1] : ExportKind| }"]
 Rule->ExtensibleElement[arrowhead=onormal,group=ExtensibleElement,minlen=2,constraint=true,]
;
 node[shape=record];
Condition[label="{/Condition/| | }"]
;
 node[shape=record];
EventCondition[label="{EventCondition| | }"]
 EventCondition->Condition[arrowhead=onormal,group=Condition,minlen=2,constraint=true,]
;
 node[shape=record];
EqualCondition[label="{EqualCondition| | }"]
 EqualCondition->Condition[arrowhead=onormal,group=Condition,minlen=2,constraint=true,]
;
 node[shape=record];
OpCondition[label="{OpCondition| | }"]
 OpCondition->Condition[arrowhead=onormal,group=Condition,minlen=2,constraint=true,]
;
 node[shape=record];
Action[label="{Action| | }"]
;
 node[shape=record];
Action_1[label="{Action_1| | }"]
 Action_1->Action[arrowhead=onormal,group=Action,minlen=2,constraint=true,]
;
 node[shape=record];
Action_2[label="{Action_2| | }"]
 Action_2->Action[arrowhead=onormal,group=Action,minlen=2,constraint=true,]
;
 node[shape=record];
Call[label="{Call|name[0-1] : String| }"]
;
 node[shape=record];
Parameter[label="{/Parameter/|name[0-1] : String| }"]
;
 node[shape=record];
PropertyParameter[label="{PropertyParameter| | }"]
 PropertyParameter->Parameter[arrowhead=onormal,group=Parameter,minlen=2,constraint=true,]
;
 node[shape=record];
ReferenceParameter[label="{ReferenceParameter| | }"]
 ReferenceParameter->Parameter[arrowhead=onormal,group=Parameter,minlen=2,constraint=true,]
;
 node[shape=record];
CallParameter[label="{CallParameter| | }"]
 CallParameter->Parameter[arrowhead=onormal,group=Parameter,minlen=2,constraint=true,]
;
 node[shape=record];
OperationParameter[label="{OperationParameter| | }"]
 OperationParameter->Parameter[arrowhead=onormal,group=Parameter,minlen=2,constraint=true,]
;
 node[shape=record];
EventParameter[label="{EventParameter| | }"]
 EventParameter->Parameter[arrowhead=onormal,group=Parameter,minlen=2,constraint=true,]
;
 node[shape=record];
ConstantParameter[label="{ConstantParameter| | }"]
 ConstantParameter->Parameter[arrowhead=onormal,group=Parameter,minlen=2,constraint=true,]
;
 node[shape=record];
IteratorParameter[label="{IteratorParameter| | }"]
 IteratorParameter->Parameter[arrowhead=onormal,group=Parameter,minlen=2,constraint=true,]
;
 node[shape=record];
Iterator[label="{/Iterator/|id : String| }"]
;
 node[shape=record];
ConstantIterator[label="{ConstantIterator| | }"]
 ConstantIterator->Iterator[arrowhead=onormal,group=Iterator,minlen=2,constraint=true,]
;
 node[shape=record];
PropertyIterator[label="{PropertyIterator| | }"]
 PropertyIterator->Iterator[arrowhead=onormal,group=Iterator,minlen=2,constraint=true,]
;
 node[shape=record];
CallIterator[label="{CallIterator| | }"]
 CallIterator->Iterator[arrowhead=onormal,group=Iterator,minlen=2,constraint=true,]
;
 node[shape=record];
TextIterator[label="{TextIterator|value : Integer| }"]
 TextIterator->Iterator[arrowhead=onormal,group=Iterator,minlen=2,constraint=true,]
;
 node[shape=record];
Event[label="{Event|class[0-1] : String| }"]
;
 node[shape=record];
Equal[label="{/Equal/| | }"]
;
 node[shape=record];
EqualToConstant[label="{EqualToConstant| | }"]
 EqualToConstant->Equal[arrowhead=onormal,group=Equal,minlen=2,constraint=true,]
;
 node[shape=record];
EqualToProperty[label="{EqualToProperty| | }"]
 EqualToProperty->Equal[arrowhead=onormal,group=Equal,minlen=2,constraint=true,]
;
 node[shape=record];
EqualToReference[label="{EqualToReference| | }"]
 EqualToReference->Equal[arrowhead=onormal,group=Equal,minlen=2,constraint=true,]
;
 node[shape=record];
EqualToOperation[label="{EqualToOperation| | }"]
 EqualToOperation->Equal[arrowhead=onormal,group=Equal,minlen=2,constraint=true,]
;
 node[shape=record];
Operation[label="{Operation|name : String| }"]
;
 node[shape=record];
Restructure[label="{Restructure|how[0-1] : HowKind| }"]
 Restructure->ExtensibleElement[arrowhead=onormal,group=ExtensibleElement,minlen=2,constraint=true,]
;
 node[shape=record];
Branch[label="{Branch| | }"]
;
 node[shape=record];
WhenTrue[label="{WhenTrue| | }"]
 WhenTrue->Branch[arrowhead=onormal,group=Branch,minlen=2,constraint=true,]
;
 node[shape=record];
WhenFalse[label="{WhenFalse| | }"]
 WhenFalse->Branch[arrowhead=onormal,group=Branch,minlen=2,constraint=true,]
;
 node[shape=record];
ByDefault[label="{ByDefault| | }"]
 ByDefault->Branch[arrowhead=onormal,group=Branch,minlen=2,constraint=true,]
;

} subgraph "cluster_Peer"{
labelloc=t
color=black
label=Peer
 node[shape=record];
Peer[label="{Peer|id[0-1] : String\nhow[0-1] : HowKind\nexport[0-1] : ExportKind| }"]
 Peer->ExtensibleElement[arrowhead=onormal,group=ExtensibleElement,minlen=2,constraint=true,]
;
 node[shape=record];
Presentation[label="{Presentation|id[0-1] : String\nhow[0-1] : HowKind\nexport[0-1] : ExportKind\nbase : String| }"]
 Presentation->ExtensibleElement[arrowhead=onormal,group=ExtensibleElement,minlen=2,constraint=true,]
;
 node[shape=record];
Logic[label="{Logic|id[0-1] : String\nhow[0-1] : HowKind\nexport[0-1] : ExportKind| }"]
 Logic->ExtensibleElement[arrowhead=onormal,group=ExtensibleElement,minlen=2,constraint=true,]
;
 node[shape=record];
DComponent[label="{DComponent|id : String\nhow[0-1] : HowKind\nexport[0-1] : ExportKind\nmapsTo[0-1] : String\nlocation[0-1] : String| }"]
 DComponent->ExtensibleElement[arrowhead=onormal,group=ExtensibleElement,minlen=2,constraint=true,]
;
 node[shape=record];
DClass[label="{DClass|id : String\nhow[0-1] : HowKind\nexport[0-1] : ExportKind\nmapsTo : String\nmapsType : String| }"]
 DClass->ExtensibleElement[arrowhead=onormal,group=ExtensibleElement,minlen=2,constraint=true,]
;
 node[shape=record];
DProperty[label="{DProperty|id : String\nmapsType : MapsTypeKind\nmapsTo : String\nreturnType[0-1] : String| }"]
;
 node[shape=record];
DMethod[label="{DMethod|id : String\nhow[0-1] : HowKind\nexport[0-1] : ExportKind\nmapsTo : String\nreturnType[0-1] : String| }"]
 DMethod->ExtensibleElement[arrowhead=onormal,group=ExtensibleElement,minlen=2,constraint=true,]
;
 node[shape=record];
DParam[label="{DParam|id[0-1] : String\ntype[0-1] : String\nvalue : String| }"]
;
 node[shape=record];
Script[label="{Script|id[0-1] : String\ntype[0-1] : String\nhow[0-1] : HowKind\nexport[0-1] : ExportKind\nvalue : String\nsource[0-1] : String| }"]
 Script->ExtensibleElement[arrowhead=onormal,group=ExtensibleElement,minlen=2,constraint=true,]
;
 node[shape=record];
Listener[label="{Listener|class[0-1] : String\nattacher[0-1] : String| }"]
;

} subgraph "cluster_Template"{
labelloc=t
color=black
label=Template
 node[shape=record];
Template[label="{/Template/|id[0-1] : String| }"]
;
 node[shape=record];
BehaviorTemplate[label="{BehaviorTemplate| | }"]
 BehaviorTemplate->Template[arrowhead=onormal,group=Template,minlen=2,constraint=true,]
;
 node[shape=record];
DClassTemplate[label="{DClassTemplate| | }"]
 DClassTemplate->Template[arrowhead=onormal,group=Template,minlen=2,constraint=true,]
;
 node[shape=record];
DComponentTemplate[label="{DComponentTemplate| | }"]
 DComponentTemplate->Template[arrowhead=onormal,group=Template,minlen=2,constraint=true,]
;
 node[shape=record];
ConstantTemplate[label="{ConstantTemplate| | }"]
 ConstantTemplate->Template[arrowhead=onormal,group=Template,minlen=2,constraint=true,]
;
 node[shape=record];
ContentTemplate[label="{ContentTemplate| | }"]
 ContentTemplate->Template[arrowhead=onormal,group=Template,minlen=2,constraint=true,]
;
 node[shape=record];
InterfaceTemplate[label="{InterfaceTemplate| | }"]
 InterfaceTemplate->Template[arrowhead=onormal,group=Template,minlen=2,constraint=true,]
;
 node[shape=record];
LogicTemplate[label="{LogicTemplate| | }"]
 LogicTemplate->Template[arrowhead=onormal,group=Template,minlen=2,constraint=true,]
;
 node[shape=record];
PartTemplate[label="{PartTemplate| | }"]
 PartTemplate->Template[arrowhead=onormal,group=Template,minlen=2,constraint=true,]
;
 node[shape=record];
PeerTemplate[label="{PeerTemplate| | }"]
 PeerTemplate->Template[arrowhead=onormal,group=Template,minlen=2,constraint=true,]
;
 node[shape=record];
PresentationTemplate[label="{PresentationTemplate| | }"]
 PresentationTemplate->Template[arrowhead=onormal,group=Template,minlen=2,constraint=true,]
;
 node[shape=record];
PropertyTemplate[label="{PropertyTemplate| | }"]
 PropertyTemplate->Template[arrowhead=onormal,group=Template,minlen=2,constraint=true,]
;
 node[shape=record];
RestructureTemplate[label="{RestructureTemplate| | }"]
 RestructureTemplate->Template[arrowhead=onormal,group=Template,minlen=2,constraint=true,]
;
 node[shape=record];
RuleTemplate[label="{RuleTemplate| | }"]
 RuleTemplate->Template[arrowhead=onormal,group=Template,minlen=2,constraint=true,]
;
 node[shape=record];
ScriptTemplate[label="{ScriptTemplate| | }"]
 ScriptTemplate->Template[arrowhead=onormal,group=Template,minlen=2,constraint=true,]
;
 node[shape=record];
StructureTemplate[label="{StructureTemplate| | }"]
 StructureTemplate->Template[arrowhead=onormal,group=Template,minlen=2,constraint=true,]
;
 node[shape=record];
StyleTemplate[label="{StyleTemplate| | }"]
 StyleTemplate->Template[arrowhead=onormal,group=Template,minlen=2,constraint=true,]
;

} subgraph "cluster_PrimitiveTypes"{
labelloc=t
color=black
label=PrimitiveTypes
 node[shape=record];
String[label="{&#171;DataType&#187;\nString|}"]
;
 node[shape=record];
Integer[label="{&#171;DataType&#187;\nInteger|}"]
;

}
}