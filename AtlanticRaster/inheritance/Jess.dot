digraph "KM3 Model in DOT" {
graph[rankdir=BT,labeljust=l,labelloc=t,nodeSep=0.75,compound=true];
 subgraph "cluster_Jess"{
labelloc=t
color=black
label=Jess
 node[shape=record];
LocatedElement[label="{/LocatedElement/|location[0-1] : String\ncommentsBefore[*] : String\ncommentsAfter[*] : String| }"]
;
 node[shape=record];
Root[label="{Root| | }"]
 Root->LocatedElement[arrowhead=onormal,group=LocatedElement,minlen=2,constraint=true,]
;
 node[shape=record];
Expression[label="{/Expression/| | }"]
 Expression->LocatedElement[arrowhead=onormal,group=LocatedElement,minlen=2,constraint=true,]
;
 node[shape=record];
Integ[label="{Integ|val : Integer| }"]
 Integ->Expression[arrowhead=onormal,group=Expression,minlen=2,constraint=true,]
;
 node[shape=record];
Floa[label="{Floa|val : Double| }"]
 Floa->Expression[arrowhead=onormal,group=Expression,minlen=2,constraint=true,]
;
 node[shape=record];
Str[label="{Str|val : String| }"]
 Str->Expression[arrowhead=onormal,group=Expression,minlen=2,constraint=true,]
;
 node[shape=record];
Ident[label="{/Ident/| | }"]
 Ident->Expression[arrowhead=onormal,group=Expression,minlen=2,constraint=true,]
;
 node[shape=record];
ValidIdentifier[label="{ValidIdentifier|val : String| }"]
 ValidIdentifier->Ident[arrowhead=onormal,group=Ident,minlen=2,constraint=true,]
;
 node[shape=record];
SlotName[label="{SlotName|val : String| }"]
 SlotName->Ident[arrowhead=onormal,group=Ident,minlen=2,constraint=true,]
;
 node[shape=record];
JessVariable[label="{JessVariable|val : String| }"]
 JessVariable->Ident[arrowhead=onormal,group=Ident,minlen=2,constraint=true,]
;
 node[shape=record];
TemplateExpression[label="{TemplateExpression| | }"]
 TemplateExpression->Expression[arrowhead=onormal,group=Expression,minlen=2,constraint=true,]
;
 node[shape=record];
SlotOp[label="{SlotOp| | }"]
 SlotOp->LocatedElement[arrowhead=onormal,group=LocatedElement,minlen=2,constraint=true,]
;
 node[shape=record];
DefinitionExp[label="{/DefinitionExp/| | }"]
 DefinitionExp->Expression[arrowhead=onormal,group=Expression,minlen=2,constraint=true,]
;
 node[shape=record];
GlobalDefinition[label="{GlobalDefinition| | }"]
 GlobalDefinition->DefinitionExp[arrowhead=onormal,group=DefinitionExp,minlen=2,constraint=true,]
;
 node[shape=record];
VarDefinition[label="{VarDefinition| | }"]
 VarDefinition->LocatedElement[arrowhead=onormal,group=LocatedElement,minlen=2,constraint=true,]
;
 node[shape=record];
FunctionDefinition[label="{FunctionDefinition| | }"]
 FunctionDefinition->DefinitionExp[arrowhead=onormal,group=DefinitionExp,minlen=2,constraint=true,]
;
 node[shape=record];
AdviceDefinition[label="{AdviceDefinition|direction : Advice| }"]
 AdviceDefinition->DefinitionExp[arrowhead=onormal,group=DefinitionExp,minlen=2,constraint=true,]
;
 node[shape=record];
UnDefAdvice[label="{UnDefAdvice| | }"]
 UnDefAdvice->DefinitionExp[arrowhead=onormal,group=DefinitionExp,minlen=2,constraint=true,]
;
 node[shape=record];
FactDefinition[label="{FactDefinition| | }"]
 FactDefinition->DefinitionExp[arrowhead=onormal,group=DefinitionExp,minlen=2,constraint=true,]
;
 node[shape=record];
RuleDefinition[label="{RuleDefinition| | }"]
 RuleDefinition->DefinitionExp[arrowhead=onormal,group=DefinitionExp,minlen=2,constraint=true,]
;
 node[shape=record];
DeclareRule[label="{DeclareRule| | }"]
 DeclareRule->LocatedElement[arrowhead=onormal,group=LocatedElement,minlen=2,constraint=true,]
;
 node[shape=record];
ModuleDefinition[label="{ModuleDefinition| | }"]
 ModuleDefinition->DefinitionExp[arrowhead=onormal,group=DefinitionExp,minlen=2,constraint=true,]
;
 node[shape=record];
QueryDefinition[label="{QueryDefinition| | }"]
 QueryDefinition->DefinitionExp[arrowhead=onormal,group=DefinitionExp,minlen=2,constraint=true,]
;
 node[shape=record];
DeclareVar[label="{DeclareVar| | }"]
 DeclareVar->LocatedElement[arrowhead=onormal,group=LocatedElement,minlen=2,constraint=true,]
;
 node[shape=record];
TemplateDefinition[label="{TemplateDefinition| | }"]
 TemplateDefinition->DefinitionExp[arrowhead=onormal,group=DefinitionExp,minlen=2,constraint=true,]
;
 node[shape=record];
DeclareBloc[label="{DeclareBloc| | }"]
 DeclareBloc->LocatedElement[arrowhead=onormal,group=LocatedElement,minlen=2,constraint=true,]
;
 node[shape=record];
ASlotDef[label="{ASlotDef| | }"]
 ASlotDef->LocatedElement[arrowhead=onormal,group=LocatedElement,minlen=2,constraint=true,]
;
 node[shape=record];
SlotDef[label="{SlotDef| | }"]
 SlotDef->ASlotDef[arrowhead=onormal,group=ASlotDef,minlen=2,constraint=true,]
;
 node[shape=record];
MultiSlotDef[label="{MultiSlotDef| | }"]
 MultiSlotDef->ASlotDef[arrowhead=onormal,group=ASlotDef,minlen=2,constraint=true,]
;
 node[shape=record];
SlotOptions[label="{SlotOptions| | }"]
 SlotOptions->LocatedElement[arrowhead=onormal,group=LocatedElement,minlen=2,constraint=true,]
;
 node[shape=record];
UseFuncExp[label="{/UseFuncExp/| | }"]
 UseFuncExp->Expression[arrowhead=onormal,group=Expression,minlen=2,constraint=true,]
;
 node[shape=record];
WhileExp[label="{WhileExp|hasDo : Boolean| }"]
 WhileExp->UseFuncExp[arrowhead=onormal,group=UseFuncExp,minlen=2,constraint=true,]
;
 node[shape=record];
ForExp[label="{ForExp| | }"]
 ForExp->UseFuncExp[arrowhead=onormal,group=UseFuncExp,minlen=2,constraint=true,]
;
 node[shape=record];
ForeachExp[label="{ForeachExp| | }"]
 ForeachExp->UseFuncExp[arrowhead=onormal,group=UseFuncExp,minlen=2,constraint=true,]
;
 node[shape=record];
FuncCall[label="{FuncCall| | }"]
 FuncCall->UseFuncExp[arrowhead=onormal,group=UseFuncExp,minlen=2,constraint=true,]
;
 node[shape=record];
EngineExp[label="{EngineExp| | }"]
 EngineExp->UseFuncExp[arrowhead=onormal,group=UseFuncExp,minlen=2,constraint=true,]
;
 node[shape=record];
ExitExp[label="{ExitExp| | }"]
 ExitExp->UseFuncExp[arrowhead=onormal,group=UseFuncExp,minlen=2,constraint=true,]
;
 node[shape=record];
IfExpression[label="{IfExpression| | }"]
 IfExpression->UseFuncExp[arrowhead=onormal,group=UseFuncExp,minlen=2,constraint=true,]
;
 node[shape=record];
ConditionAction[label="{ConditionAction| | }"]
 ConditionAction->LocatedElement[arrowhead=onormal,group=LocatedElement,minlen=2,constraint=true,]
;
 node[shape=record];
ElifConditionAction[label="{ElifConditionAction| | }"]
 ElifConditionAction->LocatedElement[arrowhead=onormal,group=LocatedElement,minlen=2,constraint=true,]
;

} subgraph "cluster_PrimitiveTypes"{
labelloc=t
color=black
label=PrimitiveTypes
 node[shape=record];
Boolean[label="{&#171;DataType&#187;\nBoolean|}"]
;
 node[shape=record];
Integer[label="{&#171;DataType&#187;\nInteger|}"]
;
 node[shape=record];
String[label="{&#171;DataType&#187;\nString|}"]
;
 node[shape=record];
Double[label="{&#171;DataType&#187;\nDouble|}"]
;

}
}