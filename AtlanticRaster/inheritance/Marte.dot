digraph "KM3 Model in DOT" {
graph[rankdir=BT,labeljust=l,labelloc=t,nodeSep=0.75,compound=true];
 subgraph "cluster_MARTE"{
labelloc=t
color=black
label=MARTE
 node[shape=record];
TimeBase[label="{/TimeBase/|name : String| }"]
;
 node[shape=record];
Instant[label="{/Instant/|isBefore : Boolean| }"]
;
 node[shape=record];
TimeValue[label="{/TimeValue/| | }"]
;
 node[shape=record];
TimeInterval[label="{/TimeInterval/| | }"]
;
 node[shape=record];
Interval[label="{/Interval/|includingMin : Boolean\nincludingMax : Boolean| }"]
;
 node[shape=record];
SingleTimeBase[label="{SingleTimeBase| | }"]
 SingleTimeBase->TimeBase[arrowhead=onormal,group=TimeBase,minlen=2,constraint=true,]
;
 node[shape=record];
SingleInstant[label="{SingleInstant| | }"]
 SingleInstant->Instant[arrowhead=onormal,group=Instant,minlen=2,constraint=true,]
;
 node[shape=record];
SingleInterval[label="{SingleInterval| | }"]
 SingleInterval->Interval[arrowhead=onormal,group=Interval,minlen=2,constraint=true,]
;
 node[shape=record];
SingleTimeValue[label="{SingleTimeValue| | }"]
 SingleTimeValue->TimeValue[arrowhead=onormal,group=TimeValue,minlen=2,constraint=true,]
;
 node[shape=record];
SingleTimeInterval[label="{SingleTimeInterval| | }"]
 SingleTimeInterval->TimeInterval[arrowhead=onormal,group=TimeInterval,minlen=2,constraint=true,]
;
 node[shape=record];
DiscreteTimeBase[label="{DiscreteTimeBase| | }"]
 DiscreteTimeBase->TimeBase[arrowhead=onormal,group=TimeBase,minlen=2,constraint=true,]
;
 node[shape=record];
DiscreteInstant[label="{DiscreteInstant| | }"]
 DiscreteInstant->Instant[arrowhead=onormal,group=Instant,minlen=2,constraint=true,]
;
 node[shape=record];
Event[label="{/Event/| | }"]
;
 node[shape=record];
EventOccurence[label="{/EventOccurence/| | }"]
;
 node[shape=record];
PhysicalTime[label="{/PhysicalTime/| | }"]
;
 node[shape=record];
PhysicalInstant[label="{/PhysicalInstant/| | }"]
;
 node[shape=record];
Duration[label="{/Duration/| | }"]
;
 node[shape=record];
MultipleTimeBase[label="{MultipleTimeBase| | }"]
 MultipleTimeBase->TimeBase[arrowhead=onormal,group=TimeBase,minlen=2,constraint=true,]
;
 node[shape=record];
CoincidencePoint[label="{CoincidencePoint| | }"]
 CoincidencePoint->Instant[arrowhead=onormal,group=Instant,minlen=2,constraint=true,]
;
 node[shape=record];
MultipleInterval[label="{MultipleInterval| | }"]
 MultipleInterval->Interval[arrowhead=onormal,group=Interval,minlen=2,constraint=true,]
;
 node[shape=record];
MultipleTimeValue[label="{MultipleTimeValue| | }"]
 MultipleTimeValue->TimeValue[arrowhead=onormal,group=TimeValue,minlen=2,constraint=true,]
;
 node[shape=record];
MetricTimeValue[label="{MetricTimeValue| | }"]
 MetricTimeValue->DiscreteTimeValue[arrowhead=onormal,group=DiscreteTimeValue,minlen=2,constraint=true,]
;
 node[shape=record];
DiscreteTimeValue[label="{DiscreteTimeValue| | }"]
 DiscreteTimeValue->TimeValue[arrowhead=onormal,group=TimeValue,minlen=2,constraint=true,]
;
 node[shape=record];
MetricTimeInterval[label="{MetricTimeInterval| | }"]
 MetricTimeInterval->DiscreteTimeInterval[arrowhead=onormal,group=DiscreteTimeInterval,minlen=2,constraint=true,]
;
 node[shape=record];
DiscreteTimeInterval[label="{DiscreteTimeInterval| | }"]
 DiscreteTimeInterval->TimeInterval[arrowhead=onormal,group=TimeInterval,minlen=2,constraint=true,]
;
 node[shape=record];
SimultaneousEventOccurrence[label="{SimultaneousEventOccurrence| | }"]
;
 node[shape=record];
TimedEvent[label="{TimedEvent| | }"]
;
 node[shape=record];
TimedEventOccurence[label="{TimedEventOccurence| | }"]
 TimedEventOccurence->EventOccurence[arrowhead=onormal,group=EventOccurence,minlen=2,constraint=true,]
;
 node[shape=record];
TimedAction[label="{TimedAction| | }"]
 TimedAction->Scenario[arrowhead=onormal,group=Scenario,minlen=2,constraint=true,]
;
 node[shape=record];
Delay[label="{Delay| | }"]
 Delay->TimedAction[arrowhead=onormal,group=TimedAction,minlen=2,constraint=true,]
;
 node[shape=record];
TimingMechanism[label="{TimingMechanism|stability : String\ndrift : String\nskew : String\nstate : String| }"]
;
 node[shape=record];
Clock[label="{Clock| | }"]
 Clock->DiscreteTimeBase[arrowhead=onormal,group=DiscreteTimeBase,minlen=2,constraint=true,]
 Clock->TimingMechanism[arrowhead=onormal,group=TimingMechanism,minlen=2,constraint=true,]
;
 node[shape=record];
Timer[label="{Timer|isPeriodic : Boolean| }"]
 Timer->TimingMechanism[arrowhead=onormal,group=TimingMechanism,minlen=2,constraint=true,]
;
 node[shape=record];
TimeOut[label="{TimeOut| | }"]
;
 node[shape=record];
ClockInterrupt[label="{ClockInterrupt| | }"]
;
 node[shape=record];
System[label="{System| | }"]
;
 node[shape=record];
Model[label="{Model| | }"]
;
 node[shape=record];
AnnotatedModel[label="{AnnotatedModel| | }"]
 AnnotatedModel->Model[arrowhead=onormal,group=Model,minlen=2,constraint=true,]
;
 node[shape=record];
ModelElement[label="{ModelElement| | }"]
;
 node[shape=record];
AnnotatedModelElement[label="{AnnotatedModelElement| | }"]
 AnnotatedModelElement->ModelElement[arrowhead=onormal,group=ModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
NFP[label="{NFP| | }"]
;
 node[shape=record];
NFPLibrary[label="{NFPLibrary| | }"]
;
 node[shape=record];
NFPCategory[label="{NFPCategory| | }"]
;
 node[shape=record];
ModelingConcern[label="{ModelingConcern| | }"]
;
 node[shape=record];
AnalysisConcern[label="{AnalysisConcern| | }"]
 AnalysisConcern->ModelingConcern[arrowhead=onormal,group=ModelingConcern,minlen=2,constraint=true,]
;
 node[shape=record];
DesignConcern[label="{DesignConcern| | }"]
 DesignConcern->ModelingConcern[arrowhead=onormal,group=ModelingConcern,minlen=2,constraint=true,]
;
 node[shape=record];
Quantity[label="{Quantity| | }"]
;
 node[shape=record];
BasicQuantity[label="{BasicQuantity| | }"]
;
 node[shape=record];
DerivedQuantity[label="{DerivedQuantity| | }"]
;
 node[shape=record];
QualitativeNFP[label="{QualitativeNFP| | }"]
 QualitativeNFP->NFP[arrowhead=onormal,group=NFP,minlen=2,constraint=true,]
;
 node[shape=record];
QuantitativeNFP[label="{QuantitativeNFP| | }"]
 QuantitativeNFP->NFP[arrowhead=onormal,group=NFP,minlen=2,constraint=true,]
;
 node[shape=record];
Realization[label="{Realization| | }"]
;
 node[shape=record];
Measure[label="{Measure| | }"]
;
 node[shape=record];
ComplexNFP[label="{ComplexNFP| | }"]
 ComplexNFP->NFP[arrowhead=onormal,group=NFP,minlen=2,constraint=true,]
;
 node[shape=record];
BasicNFP[label="{BasicNFP|statisticalQualifier : StatisticalQualifierKinds\ndirecton : DirectionKinds| }"]
;
 node[shape=record];
NFPType[label="{NFPType|valueSpecificationLanguage : String\nsource[0-1] : SourceKinds| }"]
;
 node[shape=record];
NFPInstantType[label="{NFPInstantType|value : String\nunit[0-1] : InstantUnitKinds| }"]
 NFPInstantType->NFPType[arrowhead=onormal,group=NFPType,minlen=2,constraint=true,]
;
 node[shape=record];
NFPurationType[label="{NFPurationType|value : String\nunit[0-1] : DurationUnitKinds| }"]
 NFPurationType->NFPType[arrowhead=onormal,group=NFPType,minlen=2,constraint=true,]
;
 node[shape=record];
NFPRateType[label="{NFPRateType|value : String\nunit[0-1] : RateUnitKinds| }"]
 NFPRateType->NFPType[arrowhead=onormal,group=NFPType,minlen=2,constraint=true,]
;
 node[shape=record];
NFPProbabilityType[label="{NFPProbabilityType|value : String\nunit[0-1] : ProbabilityUnitKinds| }"]
 NFPProbabilityType->NFPType[arrowhead=onormal,group=NFPType,minlen=2,constraint=true,]
;
 node[shape=record];
NFPSizeType[label="{NFPSizeType|value : String\nunit[0-1] : SizeUnitKinds| }"]
 NFPSizeType->NFPType[arrowhead=onormal,group=NFPType,minlen=2,constraint=true,]
;
 node[shape=record];
NFPValueSpecification[label="{NFPValueSpecification| | }"]
;
 node[shape=record];
NFPConstant[label="{NFPConstant| | }"]
 NFPConstant->NFPValueSpecification[arrowhead=onormal,group=NFPValueSpecification,minlen=2,constraint=true,]
;
 node[shape=record];
NFPListConstant[label="{NFPListConstant| | }"]
 NFPListConstant->NFPConstant[arrowhead=onormal,group=NFPConstant,minlen=2,constraint=true,]
;
 node[shape=record];
NFPStringConstant[label="{NFPStringConstant|body : String| }"]
 NFPStringConstant->NFPConstant[arrowhead=onormal,group=NFPConstant,minlen=2,constraint=true,]
;
 node[shape=record];
NFPIntegerConstant[label="{NFPIntegerConstant|body : Integer| }"]
 NFPIntegerConstant->NFPConstant[arrowhead=onormal,group=NFPConstant,minlen=2,constraint=true,]
;
 node[shape=record];
NFPRealConstant[label="{NFPRealConstant|bodyBeforeComa : Integer\nbodyAfterComa : Integer| }"]
 NFPRealConstant->NFPConstant[arrowhead=onormal,group=NFPConstant,minlen=2,constraint=true,]
;
 node[shape=record];
NFPBooleanConstant[label="{NFPBooleanConstant|body : Boolean| }"]
 NFPBooleanConstant->NFPConstant[arrowhead=onormal,group=NFPConstant,minlen=2,constraint=true,]
;
 node[shape=record];
NFPVariable[label="{NFPVariable|varName : String| }"]
 NFPVariable->NFPValueSpecification[arrowhead=onormal,group=NFPValueSpecification,minlen=2,constraint=true,]
;
 node[shape=record];
NFPExpression[label="{NFPExpression|body[1-*] : String| }"]
 NFPExpression->NFPValueSpecification[arrowhead=onormal,group=NFPValueSpecification,minlen=2,constraint=true,]
;
 node[shape=record];
Classifier[label="{/Classifier/| | }"]
 Classifier->AnnotatedModelElement[arrowhead=onormal,group=AnnotatedModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
ResourceClassifier[label="{/ResourceClassifier/| | }"]
 ResourceClassifier->Classifier[arrowhead=onormal,group=Classifier,minlen=2,constraint=true,]
;
 node[shape=record];
ResourceServiceClassifier[label="{/ResourceServiceClassifier/| | }"]
 ResourceServiceClassifier->Classifier[arrowhead=onormal,group=Classifier,minlen=2,constraint=true,]
;
 node[shape=record];
InstanceSpecification[label="{/InstanceSpecification/| | }"]
 InstanceSpecification->AnnotatedModelElement[arrowhead=onormal,group=AnnotatedModelElement,minlen=2,constraint=true,]
;
 node[shape=record];
ResourceInstanceSpecification[label="{/ResourceInstanceSpecification/| | }"]
 ResourceInstanceSpecification->InstanceSpecification[arrowhead=onormal,group=InstanceSpecification,minlen=2,constraint=true,]
;
 node[shape=record];
ResourceServiceInstanceSpecification[label="{/ResourceServiceInstanceSpecification/| | }"]
 ResourceServiceInstanceSpecification->InstanceSpecification[arrowhead=onormal,group=InstanceSpecification,minlen=2,constraint=true,]
;
 node[shape=record];
Hardware[label="{Hardware| | }"]
;
 node[shape=record];
HardwareLibrary[label="{HardwareLibrary| | }"]
;
 node[shape=record];
HardwareEntity[label="{HardwareEntity| | }"]
;
 node[shape=record];
HardwareDeployment[label="{HardwareDeployment| | }"]
;
 node[shape=record];
HardwareEntityInstance[label="{HardwareEntityInstance| | }"]
;
 node[shape=record];
ECUInstance[label="{ECUInstance| | }"]
 ECUInstance->HardwareEntityInstance[arrowhead=onormal,group=HardwareEntityInstance,minlen=2,constraint=true,]
;
 node[shape=record];
ChannelInstance[label="{ChannelInstance| | }"]
 ChannelInstance->HardwareEntityInstance[arrowhead=onormal,group=HardwareEntityInstance,minlen=2,constraint=true,]
;
 node[shape=record];
ECUGateInstance[label="{ECUGateInstance| | }"]
;
 node[shape=record];
ECU[label="{ECU| | }"]
 ECU->HardwareEntity[arrowhead=onormal,group=HardwareEntity,minlen=2,constraint=true,]
;
 node[shape=record];
ECUGate[label="{ECUGate| | }"]
;
 node[shape=record];
Channel[label="{Channel| | }"]
;
 node[shape=record];
AnalysisContext[label="{AnalysisContext| | }"]
;
 node[shape=record];
Workload[label="{Workload| | }"]
;
 node[shape=record];
Transaction[label="{Transaction| | }"]
;
 node[shape=record];
Trigger[label="{Trigger| | }"]
;
 node[shape=record];
Response[label="{Response| | }"]
;
 node[shape=record];
Behavior[label="{Behavior| | }"]
;
 node[shape=record];
Scenario[label="{Scenario| | }"]
;
 node[shape=record];
Step[label="{Step| | }"]
 Step->Scenario[arrowhead=onormal,group=Scenario,minlen=2,constraint=true,]
;
 node[shape=record];
Resource[label="{Resource| | }"]
;
 node[shape=record];
BasicResource[label="{BasicResource| | }"]
 BasicResource->Resource[arrowhead=onormal,group=Resource,minlen=2,constraint=true,]
;
 node[shape=record];
StructuredResource[label="{StructuredResource| | }"]
 StructuredResource->Resource[arrowhead=onormal,group=Resource,minlen=2,constraint=true,]
;
 node[shape=record];
ProcessingResource[label="{ProcessingResource| | }"]
 ProcessingResource->StructuredResource[arrowhead=onormal,group=StructuredResource,minlen=2,constraint=true,]
;
 node[shape=record];
Link[label="{Link| | }"]
;
 node[shape=record];
ProcessResource[label="{ProcessResource| | }"]
 ProcessResource->StructuredResource[arrowhead=onormal,group=StructuredResource,minlen=2,constraint=true,]
;
 node[shape=record];
Component[label="{Component| | }"]
;
 node[shape=record];
StructuredComponent[label="{StructuredComponent| | }"]
 StructuredComponent->Component[arrowhead=onormal,group=Component,minlen=2,constraint=true,]
;
 node[shape=record];
BasicComponent[label="{BasicComponent| | }"]
 BasicComponent->Component[arrowhead=onormal,group=Component,minlen=2,constraint=true,]
;
 node[shape=record];
LogicalResource[label="{LogicalResource| | }"]
 LogicalResource->StructuredResource[arrowhead=onormal,group=StructuredResource,minlen=2,constraint=true,]
;
 node[shape=record];
ServerResource[label="{ServerResource| | }"]
 ServerResource->StructuredResource[arrowhead=onormal,group=StructuredResource,minlen=2,constraint=true,]
;
 node[shape=record];
Service[label="{Service| | }"]
;
 node[shape=record];
Interface[label="{Interface| | }"]
;

} subgraph "cluster_PrimitiveTypes"{
labelloc=t
color=black
label=PrimitiveTypes
 node[shape=record];
String[label="{&#171;DataType&#187;\nString|}"]
;
 node[shape=record];
Integer[label="{&#171;DataType&#187;\nInteger|}"]
;
 node[shape=record];
Boolean[label="{&#171;DataType&#187;\nBoolean|}"]
;

}
}