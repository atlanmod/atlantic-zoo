digraph "KM3 Model in DOT" {
graph[rankdir=BT,labeljust=l,labelloc=t,nodeSep=0.75,compound=true];
 subgraph "cluster_SpreadsheetMLStyles"{
labelloc=t
color=black
label=SpreadsheetMLStyles
 node[shape=record];
DateTimeType[label="{DateTimeType|year : Integer\nmonth : Integer\nday : Integer\nhour : Integer\nminute : Integer\nsecond : Integer| }"]
;
 node[shape=record];
VersionType[label="{VersionType|n : Integer\nnn : Integer| }"]
;
 node[shape=record];
ValueType[label="{/ValueType/| | }"]
;
 node[shape=record];
StringValue[label="{StringValue|value : String| }"]
 StringValue->ValueType[arrowhead=onormal,group=ValueType,minlen=2,constraint=true,]
;
 node[shape=record];
NumberValue[label="{NumberValue|value : Double| }"]
 NumberValue->ValueType[arrowhead=onormal,group=ValueType,minlen=2,constraint=true,]
;
 node[shape=record];
DateTimeTypeValue[label="{DateTimeTypeValue| | }"]
 DateTimeTypeValue->ValueType[arrowhead=onormal,group=ValueType,minlen=2,constraint=true,]
;
 node[shape=record];
BooleanValue[label="{BooleanValue|value : Boolean| }"]
 BooleanValue->ValueType[arrowhead=onormal,group=ValueType,minlen=2,constraint=true,]
;
 node[shape=record];
ErrorValue[label="{ErrorValue| | }"]
 ErrorValue->ValueType[arrowhead=onormal,group=ValueType,minlen=2,constraint=true,]
;
 node[shape=record];
DocumentPropertiesCollection[label="{DocumentPropertiesCollection|title[0-1] : String\nsubject[0-1] : String\nkeywords[0-1] : String\ndescription[0-1] : String\ncategory[0-1] : String\nauthor[0-1] : String\nlastAuthor[0-1] : String\nmanager[0-1] : String\ncompany[0-1] : String\nhyperlinkBase[0-1] : String\nrevision[0-1] : Integer\npresentationFormat[0-1] : String\nguid[0-1] : String\nappName[0-1] : String\ntotalTime[0-1] : Integer\npages[0-1] : Integer\nwords[0-1] : Integer\ncharacters[0-1] : Integer\ncharactersWithSpaces[0-1] : Integer\nbytes[0-1] : Integer\nlines[0-1] : Integer\nparagraphs[0-1] : Integer| }"]
;
 node[shape=record];
CustomDocumentPropertiesCollection[label="{CustomDocumentPropertiesCollection| | }"]
;
 node[shape=record];
CustomDocumentProperty[label="{CustomDocumentProperty|name : String| }"]
;
 node[shape=record];
SmartTagType[label="{SmartTagType|namespaceuri : String\nname : String\nurl[0-1] : String| }"]
;
 node[shape=record];
SmartTagsCollection[label="{SmartTagsCollection| | }"]
;
 node[shape=record];
Workbook[label="{Workbook| | }"]
;
 node[shape=record];
Worksheet[label="{Worksheet|name : String\nprotected[0-1] : Boolean\nrightToLeft[0-1] : Boolean| }"]
;
 node[shape=record];
StyledElement[label="{/StyledElement/| | }"]
;
 node[shape=record];
Table[label="{Table|defaultColumnWidth[0-1] : Double\ndefaultRowHeight[0-1] : Double\nexpandedColumnCount[0-1] : Integer\nexpandedRowCount[0-1] : Integer\nleftCell[0-1] : Integer\ntopCell[0-1] : Integer\nfullColumns[0-1] : Boolean\nfullRows[0-1] : Boolean| }"]
 Table->StyledElement[arrowhead=onormal,group=StyledElement,minlen=2,constraint=true,]
;
 node[shape=record];
TableElement[label="{/TableElement/|index[0-1] : Integer| }"]
 TableElement->StyledElement[arrowhead=onormal,group=StyledElement,minlen=2,constraint=true,]
;
 node[shape=record];
ColOrRowElement[label="{/ColOrRowElement/|hidden[0-1] : Boolean\nspan[0-1] : Integer| }"]
 ColOrRowElement->TableElement[arrowhead=onormal,group=TableElement,minlen=2,constraint=true,]
;
 node[shape=record];
Column[label="{Column|autoFitWidth[0-1] : Boolean\nwidth[0-1] : Double| }"]
 Column->ColOrRowElement[arrowhead=onormal,group=ColOrRowElement,minlen=2,constraint=true,]
;
 node[shape=record];
Row[label="{Row|autoFitHeight[0-1] : Boolean\nheight[0-1] : Double| }"]
 Row->ColOrRowElement[arrowhead=onormal,group=ColOrRowElement,minlen=2,constraint=true,]
;
 node[shape=record];
Cell[label="{Cell|arrayRange[0-1] : String\nformula[0-1] : String\nhRef[0-1] : String\nmergeAcross[0-1] : Double\nmergeDown[0-1] : Double| }"]
 Cell->TableElement[arrowhead=onormal,group=TableElement,minlen=2,constraint=true,]
;
 node[shape=record];
Comment[label="{Comment|author[0-1] : String\nshowAlways[0-1] : Boolean| }"]
;
 node[shape=record];
Data[label="{Data| | }"]
;
 node[shape=record];
ExcelWorkbook[label="{ExcelWorkbook|selectedSheets[0-1] : Integer\nwindowHidden[0-1] : Boolean\nhideHorizontalScrollBar[0-1] : Boolean\nhideVerticalScrollBar[0-1] : Boolean\nhideWorkbookTabs[0-1] : Boolean\nwindowHeight[0-1] : Double\nwindowWidth[0-1] : Double\nwindowTopX[0-1] : Double\nwindowTopY[0-1] : Double\nactiveSheet[0-1] : Integer\nactiveChart[0-1] : String\nfirstVisibleSheet[0-1] : Integer\nhidePivotTableFieldList[0-1] : Boolean\nprotectStructure[0-1] : Boolean\nprotectWindows[0-1] : Boolean\ndisplayInkNotes[0-1] : Boolean\nembedSaveSmartTags[0-1] : Boolean\nfutureVer[0-1] : String\ntabRatio[0-1] : Integer\nwindowIconic[0-1] : Boolean\ndisplayDrawingObjects[0-1] : DisplayDrawingObjectsType\ncreateBackup[0-1] : Boolean\ncalculation[0-1] : CalculationWorkbookType\ndoNotCalculateBeforeSave[0-1] : Boolean\ndate1904[0-1] : Boolean\nrefModeR1C1[0-1] : Boolean\niteration[0-1] : Boolean\nmaxIterations[0-1] : Integer\nmaxChange[0-1] : Double\nprecisionAsDisplayed[0-1] : Boolean\ndoNotSaveLinkValues[0-1] : Boolean\nnoAutoRecover[0-1] : Boolean\nacceptLabelsInFormulas[0-1] : Boolean\nuncalced[0-1] : Boolean| }"]
;
 node[shape=record];
WorksheetOptionsElt[label="{WorksheetOptionsElt|fitToPage[0-1] : Boolean\ndoNotDisplayColHeaders[0-1] : Boolean\ndoNotDisplayRowHeaders[0-1] : Boolean\ngridlineColor[0-1] : String\nname[0-1] : String\nexcelWorksheetType[0-1] : ExcelWorksheetTypeType\nintlMacro[0-1] : Boolean\nunsynced[0-1] : Boolean\nselected[0-1] : Boolean\ncodeName[0-1] : String\ndisplayPageBreak[0-1] : Boolean\ntransitionExpressionEvaluation[0-1] : Boolean\ntransitionFormulaEntry[0-1] : Boolean\nzoom[0-1] : Integer\npageBreakZoom[0-1] : Integer\nshowPageBreakZoom[0-1] : Boolean\ndefaultRowHeight[0-1] : Integer\ndefaultColumnWidth[0-1] : Integer\nstandardWidth[0-1] : Integer\nvisible[0-1] : VisibleType\nleftColumnVisible[0-1] : Integer\ndisplayRightToLeft[0-1] : Boolean\ngridlineColorIndex[0-1] : Integer\ndisplayFormulas[0-1] : Boolean\ndoNotDisplayGridlines[0-1] : Boolean\ndoNotDisplayHeadings[0-1] : Boolean\ndoNotDisplayOutline[0-1] : Boolean\napplyAutomaticOutlineStyles[0-1] : Boolean\nnoSummaryRowsBelowDetail[0-1] : Boolean\nnoSummaryColumnsRightDetail[0-1] : Boolean\ndoNotDisplayZeros[0-1] : Boolean\nactiveRow[0-1] : Integer\nactiveColumn[0-1] : Integer\nfilterOn[0-1] : Boolean\nrangeSelection[0-1] : String\ntopRowVisible[0-1] : Integer\ntopRowBottomPane[0-1] : Integer\nleftColumnRightPane[0-1] : Integer\nactivePane[0-1] : Integer\nsplitHorizontal[0-1] : Integer\nsplitVertical[0-1] : Integer\nfreezePanes[0-1] : Boolean\nfrozenNoSplit[0-1] : Boolean\ntabColorIndex[0-1] : Integer\nprotectContentst[0-1] : Boolean\nprotectObjects[0-1] : Boolean\nprotectScenarios[0-1] : Boolean\nenableSelection[0-1] : EnableSelectionType\nallowFormatCells[0-1] : Boolean\nallowSizeCols[0-1] : Boolean\nallowSizeRows[0-1] : Boolean\nallowInsertCols[0-1] : Boolean\nallowInsertRows[0-1] : Boolean\nallowInsertHyperlinks[0-1] : Boolean\nallowDeleteCols[0-1] : Boolean\nallowDeleteRows[0-1] : Boolean\nallowSort[0-1] : Boolean\nallowFilter[0-1] : Boolean\nallowUsePivotTables[0-1] : Boolean| }"]
;
 node[shape=record];
PageSetup[label="{PageSetup| | }"]
;
 node[shape=record];
Layout[label="{Layout|orientation[0-1] : OrientationType\ncenterHorizontal[0-1] : Boolean\ncenterVertical[0-1] : Boolean\nstartPageNumber[0-1] : String| }"]
;
 node[shape=record];
HeaderOrFooterElt[label="{/HeaderOrFooterElt/|margin[0-1] : Double\ndata[0-1] : String| }"]
;
 node[shape=record];
Header[label="{Header| | }"]
 Header->HeaderOrFooterElt[arrowhead=onormal,group=HeaderOrFooterElt,minlen=2,constraint=true,]
;
 node[shape=record];
Footer[label="{Footer| | }"]
 Footer->HeaderOrFooterElt[arrowhead=onormal,group=HeaderOrFooterElt,minlen=2,constraint=true,]
;
 node[shape=record];
PageMarginsInfo[label="{PageMarginsInfo|left[0-1] : Double\nright[0-1] : Double\ntop[0-1] : Double\nbottom[0-1] : Double| }"]
;
 node[shape=record];
Print[label="{Print|fitWidth[0-1] : Integer\nfitHeight[0-1] : Integer\nleftToRight[0-1] : Boolean\nblackAndWhite[0-1] : Boolean\ndraftQuality[0-1] : Boolean\ncommentsLayout[0-1] : CommentsLayoutType\nscale[0-1] : Integer\nprintErrors[0-1] : String\nvalidPrinterInfo[0-1] : Boolean\npaperSizeIndex[0-1] : Integer\nhorizontalResolution[0-1] : Integer\nverticalResolution[0-1] : Integer\ngridlines[0-1] : Boolean\nnumberOfCopies[0-1] : Integer\nrowColHeadings[0-1] : Boolean| }"]
;
 node[shape=record];
StylesCollection[label="{StylesCollection| | }"]
;
 node[shape=record];
StyleType[label="{StyleType|id : String\nname[0-1] : String| }"]
;
 node[shape=record];
ProtectionType[label="{ProtectionType|protected[0-1] : Boolean| }"]
;
 node[shape=record];
AlignmentType[label="{AlignmentType|horizontal[0-1] : HorizontalAlignementType\nreadingOrder[0-1] : ReadingOrderType\nindent[0-1] : Double\nrotate[0-1] : Double\nshrinkToFit[0-1] : Boolean\nvertical[0-1] : VerticalAlignementType\nverticalText[0-1] : Boolean\nwrapText[0-1] : Boolean| }"]
;
 node[shape=record];
BordersType[label="{BordersType| | }"]
;
 node[shape=record];
BorderType[label="{BorderType|position : PositionType\ncolor[0-1] : String\nlineStyle[0-1] : LineStyleType\nweight[0-1] : Double| }"]
;
 node[shape=record];
FontType[label="{FontType|bold[0-1] : Boolean\ncolor[0-1] : String\nfontName[0-1] : String\nitalic[0-1] : Boolean\noutline[0-1] : Boolean\nshadow[0-1] : Boolean\nsize[0-1] : Double\nstrikeThrough[0-1] : Boolean\nunderline[0-1] : UnderlineType\nverticalAlign[0-1] : VerticalAlignType| }"]
;
 node[shape=record];
InteriorType[label="{InteriorType|color[0-1] : String\npattern[0-1] : PatternType\npatternColor[0-1] : String| }"]
;
 node[shape=record];
NumberFormatType[label="{NumberFormatType|format[0-1] : ExcelNumberFormatType| }"]
;
 node[shape=record];
NamesType[label="{NamesType| | }"]
;
 node[shape=record];
NamedRange[label="{NamedRange|name : String\nrefersTo[0-1] : String\nhidden[0-1] : Boolean| }"]
;

} subgraph "cluster_PrimitiveTypes"{
labelloc=t
color=black
label=PrimitiveTypes
 node[shape=record];
Integer[label="{&#171;DataType&#187;\nInteger|}"]
;
 node[shape=record];
String[label="{&#171;DataType&#187;\nString|}"]
;
 node[shape=record];
Boolean[label="{&#171;DataType&#187;\nBoolean|}"]
;
 node[shape=record];
Double[label="{&#171;DataType&#187;\nDouble|}"]
;

}
}