digraph "KM3 Model in DOT" {
graph[rankdir=BT,labeljust=l,labelloc=t,nodeSep=0.75,compound=true];
 subgraph "cluster_Requirement"{
labelloc=t
color=black
label=Requirement
 node[shape=record];
Model[label="{Model| | }"]
;
 subgraph "cluster_AbstractDocument"{
labelloc=t
color=black
label=AbstractDocument
 node[shape=record];
Purpose[label="{Purpose|id[0-1] : String\nversion[0-1] : String\nrelease[0-1] : String\ndescription[0-1] : String| }"]
;
 node[shape=record];
IntendedAudience[label="{IntendedAudience|readers[0-1] : READERS_KIND| }"]
;
 node[shape=record];
Scope[label="{Scope|description[0-1] : String| }"]
;
 node[shape=record];
Reference[label="{Reference|title[0-1] : String\nauthor[0-1] : String\nversion[0-1] : Integer\ndate[0-1] : Date\nlocation[0-1] : String| }"]
;
 node[shape=record];
Information[label="{Information|body[0-1] : String| }"]
;
 node[shape=record];
AbstractDocument[label="{AbstractDocument| | }"]
;
 node[shape=record];
BusinessBackground[label="{BusinessBackground|overview[0-1] : String| }"]
;
 node[shape=record];
BusinessProblem[label="{BusinessProblem|problem[0-1] : String| }"]
;
 node[shape=record];
ProjectMission[label="{ProjectMission|mission[0-1] : String| }"]
;
 node[shape=record];
ProjectObjective[label="{/ProjectObjective/|title[0-1] : String\ndescription[0-1] : String| }"]
;
 node[shape=record];
BusinessObjective[label="{BusinessObjective| | }"]
 BusinessObjective->ProjectObjective[arrowhead=onormal,group=ProjectObjective,minlen=2,constraint=true,]
;
 node[shape=record];
TechnicalObjective[label="{TechnicalObjective| | }"]
 TechnicalObjective->ProjectObjective[arrowhead=onormal,group=ProjectObjective,minlen=2,constraint=true,]
;
 node[shape=record];
BusinessCase[label="{BusinessCase| | }"]
 BusinessCase->ProjectObjective[arrowhead=onormal,group=ProjectObjective,minlen=2,constraint=true,]
;

} subgraph "cluster_ProductDescription"{
labelloc=t
color=black
label=ProductDescription
 node[shape=record];
ProductDescription[label="{ProductDescription| | }"]
;
 node[shape=record];
Perspective[label="{Perspective| | }"]
 Perspective->Information[arrowhead=onormal,group=Information,minlen=2,constraint=true,]
;
 node[shape=record];
Characteristic[label="{Characteristic|priority[0-1] : Priority| }"]
 Characteristic->Information[arrowhead=onormal,group=Information,minlen=2,constraint=true,]
;
 node[shape=record];
OperatingEnvironment[label="{OperatingEnvironment| | }"]
;
 node[shape=record];
HardwarePlatform[label="{HardwarePlatform| | }"]
 HardwarePlatform->Information[arrowhead=onormal,group=Information,minlen=2,constraint=true,]
;
 node[shape=record];
OperatingSystem[label="{OperatingSystem| | }"]
 OperatingSystem->Information[arrowhead=onormal,group=Information,minlen=2,constraint=true,]
;
 node[shape=record];
Constraint[label="{Constraint| | }"]
 Constraint->Information[arrowhead=onormal,group=Information,minlen=2,constraint=true,]
;
 node[shape=record];
UserDocumentation[label="{UserDocumentation|format[0-1] : Format\nstandard[0-1] : String| }"]
 UserDocumentation->Information[arrowhead=onormal,group=Information,minlen=2,constraint=true,]
;
 node[shape=record];
SystemFeature[label="{SystemFeature| | }"]
 SystemFeature->Feature[arrowhead=onormal,group=Feature,minlen=2,constraint=true,]
;
 node[shape=record];
EventFlow[label="{EventFlow|name[0-1] : String| }"]
;
 node[shape=record];
AbstractRequirement[label="{/AbstractRequirement/|seq_number[0-1] : Integer\ndescription[0-1] : String\npriority[0-1] : Priority| }"]
;
 node[shape=record];
functionalRequirement[label="{functionalRequirement| | }"]
 functionalRequirement->AbstractRequirement[arrowhead=onormal,group=AbstractRequirement,minlen=2,constraint=true,]
;
 node[shape=record];
Condition[label="{Condition| | }"]
;
 node[shape=record];
PreCondition[label="{PreCondition| | }"]
 PreCondition->Condition[arrowhead=onormal,group=Condition,minlen=2,constraint=true,]
;
 node[shape=record];
PostCondition[label="{PostCondition| | }"]
 PostCondition->Condition[arrowhead=onormal,group=Condition,minlen=2,constraint=true,]
;
 node[shape=record];
SafetyRequirement[label="{SafetyRequirement| | }"]
 SafetyRequirement->AbstractRequirement[arrowhead=onormal,group=AbstractRequirement,minlen=2,constraint=true,]
;
 node[shape=record];
PerformanceRequirement[label="{PerformanceRequirement| | }"]
 PerformanceRequirement->AbstractRequirement[arrowhead=onormal,group=AbstractRequirement,minlen=2,constraint=true,]
;
 node[shape=record];
SecurityRequirement[label="{SecurityRequirement| | }"]
 SecurityRequirement->AbstractRequirement[arrowhead=onormal,group=AbstractRequirement,minlen=2,constraint=true,]
;
 node[shape=record];
SoftwareQuality[label="{SoftwareQuality| | }"]
 SoftwareQuality->AbstractRequirement[arrowhead=onormal,group=AbstractRequirement,minlen=2,constraint=true,]
;
 node[shape=record];
Action[label="{Action| | }"]
 Action->SequentialElement[arrowhead=onormal,group=SequentialElement,minlen=2,constraint=true,]
;
 node[shape=record];
SequentialElement[label="{/SequentialElement/|step[0-1] : Integer| }"]
 SequentialElement->Information[arrowhead=onormal,group=Information,minlen=2,constraint=true,]
;
 node[shape=record];
Response[label="{Response| | }"]
 Response->SequentialElement[arrowhead=onormal,group=SequentialElement,minlen=2,constraint=true,]
;
 node[shape=record];
Stimulus[label="{Stimulus| | }"]
 Stimulus->SequentialElement[arrowhead=onormal,group=SequentialElement,minlen=2,constraint=true,]
;
 node[shape=record];
DesignConstraintRequirement[label="{DesignConstraintRequirement| | }"]
 DesignConstraintRequirement->functionalRequirement[arrowhead=onormal,group=functionalRequirement,minlen=2,constraint=true,]
;
 node[shape=record];
BusinessRuleRequirement[label="{BusinessRuleRequirement| | }"]
 BusinessRuleRequirement->functionalRequirement[arrowhead=onormal,group=functionalRequirement,minlen=2,constraint=true,]
;
 node[shape=record];
BusinessAutomationRequirement[label="{BusinessAutomationRequirement| | }"]
 BusinessAutomationRequirement->functionalRequirement[arrowhead=onormal,group=functionalRequirement,minlen=2,constraint=true,]
;
 node[shape=record];
UIRequirement[label="{UIRequirement| | }"]
 UIRequirement->functionalRequirement[arrowhead=onormal,group=functionalRequirement,minlen=2,constraint=true,]
;
 node[shape=record];
GeneralRequirement[label="{GeneralRequirement| | }"]
 GeneralRequirement->functionalRequirement[arrowhead=onormal,group=functionalRequirement,minlen=2,constraint=true,]
;
 node[shape=record];
InstallationRequirement[label="{InstallationRequirement| | }"]
 InstallationRequirement->functionalRequirement[arrowhead=onormal,group=functionalRequirement,minlen=2,constraint=true,]
;
 node[shape=record];
MigrationRequirement[label="{MigrationRequirement| | }"]
 MigrationRequirement->functionalRequirement[arrowhead=onormal,group=functionalRequirement,minlen=2,constraint=true,]
;
 node[shape=record];
OperationalRequirement[label="{OperationalRequirement| | }"]
 OperationalRequirement->functionalRequirement[arrowhead=onormal,group=functionalRequirement,minlen=2,constraint=true,]
;
 node[shape=record];
SimpleFeature[label="{SimpleFeature| | }"]
 SimpleFeature->Feature[arrowhead=onormal,group=Feature,minlen=2,constraint=true,]
;
 node[shape=record];
Feature[label="{/Feature/|name[0-1] : String\nshort_description[0-1] : String\npriority[0-1] : Priority\ncost[0-1] : Double\nrisk[0-1] : String| }"]
;

}
} subgraph "cluster_PrimitiveTypes"{
labelloc=t
color=black
label=PrimitiveTypes
 node[shape=record];
String[label="{&#171;DataType&#187;\nString|}"]
;
 node[shape=record];
Integer[label="{&#171;DataType&#187;\nInteger|}"]
;
 node[shape=record];
Date[label="{&#171;DataType&#187;\nDate|}"]
;
 node[shape=record];
Double[label="{&#171;DataType&#187;\nDouble|}"]
;

}
}