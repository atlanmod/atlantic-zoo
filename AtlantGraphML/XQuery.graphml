<?xml version = '1.0' encoding = 'ISO-8859-1' ?>
<graphml xmlns:xsi = 'http://www.w3.org/2001/XMLSchema-instance' xsi:schemaLocation = 'http://graphml.graphdrawing.org/xmlnshttp://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd'>
  <key id = 'label' for = 'node' attr.name = 'label' attr.type = 'string'/>
  <graph id = 'XQueryGraph' edgedefault = 'undirected'>
    <edge id = 'ExecutableExpression_extends_Expression' source = 'class_XQuery::ExecutableExpression' target = 'class_XQuery::Expression'/>
    <edge id = 'Node_extends_Expression' source = 'class_XQuery::Node' target = 'class_XQuery::Expression'/>
    <edge id = 'FLWOR_extends_ExecutableExpression' source = 'class_XQuery::FLWOR' target = 'class_XQuery::ExecutableExpression'/>
    <edge id = 'FunctionCall_extends_ExecutableExpression' source = 'class_XQuery::FunctionCall' target = 'class_XQuery::ExecutableExpression'/>
    <edge id = 'FunctionDeclaration_extends_ExecutableExpression' source = 'class_XQuery::FunctionDeclaration' target = 'class_XQuery::ExecutableExpression'/>
    <edge id = 'ElementNode_extends_Node' source = 'class_XQuery::ElementNode' target = 'class_XQuery::Node'/>
    <edge id = 'AttributeNode_extends_Node' source = 'class_XQuery::AttributeNode' target = 'class_XQuery::Node'/>
    <edge id = 'TextNode_extends_ElementNode' source = 'class_XQuery::TextNode' target = 'class_XQuery::ElementNode'/>
    <edge id = 'ReturnXPath_extends_Expression' source = 'class_XQuery::ReturnXPath' target = 'class_XQuery::Expression'/>
    <edge id = 'XPath_extends_ReturnXPath' source = 'class_XQuery::XPath' target = 'class_XQuery::ReturnXPath'/>
    <edge id = 'BooleanExp_extends_XPath' source = 'class_XQuery::BooleanExp' target = 'class_XQuery::XPath'/>
    <edge id = 'referenceEdge_XQueryProgram2ExecutableExpression' source = 'class_XQuery::XQueryProgram' target = 'class_XQuery::ExecutableExpression'/>
    <edge id = 'referenceEdge_Expression2ElementNode' source = 'class_XQuery::Expression' target = 'class_XQuery::ElementNode'/>
    <edge id = 'referenceEdge_FLWOR2For' source = 'class_XQuery::FLWOR' target = 'class_XQuery::For'/>
    <edge id = 'referenceEdge_FunctionCall2XPath' source = 'class_XQuery::FunctionCall' target = 'class_XQuery::XPath'/>
    <edge id = 'referenceEdge_FunctionDeclaration2ExecutableExpression' source = 'class_XQuery::FunctionDeclaration' target = 'class_XQuery::ExecutableExpression'/>
    <edge id = 'referenceEdge_BooleanExp2Where' source = 'class_XQuery::BooleanExp' target = 'class_XQuery::Where'/>
    <edge id = 'referenceEdge_Let2FLWOR' source = 'class_XQuery::Let' target = 'class_XQuery::FLWOR'/>
    <edge id = 'referenceEdge_OrderBy2FLWOR' source = 'class_XQuery::OrderBy' target = 'class_XQuery::FLWOR'/>
    <edge id = 'referenceEdge_Return2FLWOR' source = 'class_XQuery::Return' target = 'class_XQuery::FLWOR'/>
    <node id = 'class_XQuery::XQueryProgram'>
      <data key = 'label'>class_XQuery::XQueryProgram</data>
    </node>
    <node id = 'class_XQuery::Expression'>
      <data key = 'label'>class_XQuery::Expression</data>
    </node>
    <node id = 'class_XQuery::ExecutableExpression'>
      <data key = 'label'>class_XQuery::ExecutableExpression</data>
    </node>
    <node id = 'class_XQuery::Node'>
      <data key = 'label'>class_XQuery::Node</data>
    </node>
    <node id = 'class_XQuery::FLWOR'>
      <data key = 'label'>class_XQuery::FLWOR</data>
    </node>
    <node id = 'class_XQuery::FunctionCall'>
      <data key = 'label'>class_XQuery::FunctionCall</data>
    </node>
    <node id = 'class_XQuery::FunctionDeclaration'>
      <data key = 'label'>class_XQuery::FunctionDeclaration</data>
    </node>
    <node id = 'class_XQuery::ElementNode'>
      <data key = 'label'>class_XQuery::ElementNode</data>
    </node>
    <node id = 'class_XQuery::AttributeNode'>
      <data key = 'label'>class_XQuery::AttributeNode</data>
    </node>
    <node id = 'class_XQuery::TextNode'>
      <data key = 'label'>class_XQuery::TextNode</data>
    </node>
    <node id = 'class_XQuery::ReturnXPath'>
      <data key = 'label'>class_XQuery::ReturnXPath</data>
    </node>
    <node id = 'class_XQuery::XPath'>
      <data key = 'label'>class_XQuery::XPath</data>
    </node>
    <node id = 'class_XQuery::BooleanExp'>
      <data key = 'label'>class_XQuery::BooleanExp</data>
    </node>
    <node id = 'class_XQuery::For'>
      <data key = 'label'>class_XQuery::For</data>
    </node>
    <node id = 'class_XQuery::Let'>
      <data key = 'label'>class_XQuery::Let</data>
    </node>
    <node id = 'class_XQuery::Where'>
      <data key = 'label'>class_XQuery::Where</data>
    </node>
    <node id = 'class_XQuery::OrderBy'>
      <data key = 'label'>class_XQuery::OrderBy</data>
    </node>
    <node id = 'class_XQuery::Return'>
      <data key = 'label'>class_XQuery::Return</data>
    </node>
    <node id = 'package_XQuery'>
      <data key = 'label'>package_XQuery</data>
    </node>
  </graph>
  <graph id = 'PrimitiveTypesGraph' edgedefault = 'undirected'>
    <node id = 'dataType_Boolean'>
      <data key = 'label'>dataType_Boolean</data>
    </node>
    <node id = 'dataType_Integer'>
      <data key = 'label'>dataType_Integer</data>
    </node>
    <node id = 'dataType_String'>
      <data key = 'label'>dataType_String</data>
    </node>
    <node id = 'package_PrimitiveTypes'>
      <data key = 'label'>package_PrimitiveTypes</data>
    </node>
  </graph>
</graphml>
