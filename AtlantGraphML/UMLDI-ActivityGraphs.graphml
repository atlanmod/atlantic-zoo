<?xml version = '1.0' encoding = 'ISO-8859-1' ?>
<graphml xmlns:xsi = 'http://www.w3.org/2001/XMLSchema-instance' xsi:schemaLocation = 'http://graphml.graphdrawing.org/xmlnshttp://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd'>
  <key id = 'label' for = 'node' attr.name = 'label' attr.type = 'string'/>
  <graph id = 'CoreGraph' edgedefault = 'undirected'>
    <edge id = 'ModelElement_extends_Element' source = 'class_Core::ModelElement' target = 'class_Core::Element'/>
    <edge id = 'GeneralizableElement_extends_ModelElement' source = 'class_Core::GeneralizableElement' target = 'class_Core::ModelElement'/>
    <edge id = 'Namespace_extends_ModelElement' source = 'class_Core::Namespace' target = 'class_Core::ModelElement'/>
    <edge id = 'Classifier_extends_GeneralizableElement' source = 'class_Core::Classifier' target = 'class_Core::GeneralizableElement'/>
    <edge id = 'Feature_extends_ModelElement' source = 'class_Core::Feature' target = 'class_Core::ModelElement'/>
    <edge id = 'Relationship_extends_ModelElement' source = 'class_Core::Relationship' target = 'class_Core::ModelElement'/>
    <edge id = 'BehavioralFeature_extends_Feature' source = 'class_Core::BehavioralFeature' target = 'class_Core::Feature'/>
    <edge id = 'Operation_extends_BehavioralFeature' source = 'class_Core::Operation' target = 'class_Core::BehavioralFeature'/>
    <edge id = 'Parameter_extends_ModelElement' source = 'class_Core::Parameter' target = 'class_Core::ModelElement'/>
    <edge id = 'Generalization_extends_Relationship' source = 'class_Core::Generalization' target = 'class_Core::Relationship'/>
    <edge id = 'referenceEdge_ModelElement2Namespace' source = 'class_Core::ModelElement' target = 'class_Core::Namespace'/>
    <edge id = 'referenceEdge_GeneralizableElement2Generalization' source = 'class_Core::GeneralizableElement' target = 'class_Core::Generalization'/>
    <edge id = 'referenceEdge_Classifier2Generalization' source = 'class_Core::Classifier' target = 'class_Core::Generalization'/>
    <edge id = 'referenceEdge_Feature2Classifier' source = 'class_Core::Feature' target = 'class_Core::Classifier'/>
    <edge id = 'referenceEdge_BehavioralFeature2Parameter' source = 'class_Core::BehavioralFeature' target = 'class_Core::Parameter'/>
    <node id = 'class_Core::Element'>
      <data key = 'label'>class_Core::Element</data>
    </node>
    <node id = 'class_Core::ModelElement'>
      <data key = 'label'>class_Core::ModelElement</data>
    </node>
    <node id = 'class_Core::GeneralizableElement'>
      <data key = 'label'>class_Core::GeneralizableElement</data>
    </node>
    <node id = 'class_Core::Namespace'>
      <data key = 'label'>class_Core::Namespace</data>
    </node>
    <node id = 'class_Core::Classifier'>
      <data key = 'label'>class_Core::Classifier</data>
    </node>
    <node id = 'class_Core::Feature'>
      <data key = 'label'>class_Core::Feature</data>
    </node>
    <node id = 'class_Core::Relationship'>
      <data key = 'label'>class_Core::Relationship</data>
    </node>
    <node id = 'class_Core::BehavioralFeature'>
      <data key = 'label'>class_Core::BehavioralFeature</data>
    </node>
    <node id = 'class_Core::Operation'>
      <data key = 'label'>class_Core::Operation</data>
    </node>
    <node id = 'class_Core::Parameter'>
      <data key = 'label'>class_Core::Parameter</data>
    </node>
    <node id = 'class_Core::Generalization'>
      <data key = 'label'>class_Core::Generalization</data>
    </node>
    <node id = 'package_Core'>
      <data key = 'label'>package_Core</data>
    </node>
  </graph>
  <graph id = 'Common_BehaviorGraph' edgedefault = 'undirected'>
    <edge id = 'Signal_extends_Classifier' source = 'class_Common_Behavior::Signal' target = 'class_Core::Classifier'/>
    <edge id = 'Action_extends_ModelElement' source = 'class_Common_Behavior::Action' target = 'class_Core::ModelElement'/>
    <edge id = 'CreateAction_extends_Action' source = 'class_Common_Behavior::CreateAction' target = 'class_Common_Behavior::Action'/>
    <edge id = 'DestroyAction_extends_Action' source = 'class_Common_Behavior::DestroyAction' target = 'class_Common_Behavior::Action'/>
    <edge id = 'UninterpretedAction_extends_Action' source = 'class_Common_Behavior::UninterpretedAction' target = 'class_Common_Behavior::Action'/>
    <edge id = 'CallAction_extends_Action' source = 'class_Common_Behavior::CallAction' target = 'class_Common_Behavior::Action'/>
    <edge id = 'SendAction_extends_Action' source = 'class_Common_Behavior::SendAction' target = 'class_Common_Behavior::Action'/>
    <edge id = 'ActionSequence_extends_Action' source = 'class_Common_Behavior::ActionSequence' target = 'class_Common_Behavior::Action'/>
    <edge id = 'Argument_extends_ModelElement' source = 'class_Common_Behavior::Argument' target = 'class_Core::ModelElement'/>
    <edge id = 'ReturnAction_extends_Action' source = 'class_Common_Behavior::ReturnAction' target = 'class_Common_Behavior::Action'/>
    <edge id = 'TerminateAction_extends_Action' source = 'class_Common_Behavior::TerminateAction' target = 'class_Common_Behavior::Action'/>
    <edge id = 'Exception_extends_Signal' source = 'class_Common_Behavior::Exception' target = 'class_Common_Behavior::Signal'/>
    <edge id = 'referenceEdge_Action2Argument' source = 'class_Common_Behavior::Action' target = 'class_Common_Behavior::Argument'/>
    <edge id = 'referenceEdge_CreateAction2Classifier' source = 'class_Common_Behavior::CreateAction' target = 'class_Core::Classifier'/>
    <edge id = 'referenceEdge_CallAction2Operation' source = 'class_Common_Behavior::CallAction' target = 'class_Core::Operation'/>
    <edge id = 'referenceEdge_SendAction2Signal' source = 'class_Common_Behavior::SendAction' target = 'class_Common_Behavior::Signal'/>
    <edge id = 'referenceEdge_ActionSequence2Action' source = 'class_Common_Behavior::ActionSequence' target = 'class_Common_Behavior::Action'/>
    <node id = 'class_Common_Behavior::Signal'>
      <data key = 'label'>class_Common_Behavior::Signal</data>
    </node>
    <node id = 'class_Common_Behavior::Action'>
      <data key = 'label'>class_Common_Behavior::Action</data>
    </node>
    <node id = 'class_Common_Behavior::CreateAction'>
      <data key = 'label'>class_Common_Behavior::CreateAction</data>
    </node>
    <node id = 'class_Common_Behavior::DestroyAction'>
      <data key = 'label'>class_Common_Behavior::DestroyAction</data>
    </node>
    <node id = 'class_Common_Behavior::UninterpretedAction'>
      <data key = 'label'>class_Common_Behavior::UninterpretedAction</data>
    </node>
    <node id = 'class_Common_Behavior::CallAction'>
      <data key = 'label'>class_Common_Behavior::CallAction</data>
    </node>
    <node id = 'class_Common_Behavior::SendAction'>
      <data key = 'label'>class_Common_Behavior::SendAction</data>
    </node>
    <node id = 'class_Common_Behavior::ActionSequence'>
      <data key = 'label'>class_Common_Behavior::ActionSequence</data>
    </node>
    <node id = 'class_Common_Behavior::Argument'>
      <data key = 'label'>class_Common_Behavior::Argument</data>
    </node>
    <node id = 'class_Common_Behavior::ReturnAction'>
      <data key = 'label'>class_Common_Behavior::ReturnAction</data>
    </node>
    <node id = 'class_Common_Behavior::TerminateAction'>
      <data key = 'label'>class_Common_Behavior::TerminateAction</data>
    </node>
    <node id = 'class_Common_Behavior::Exception'>
      <data key = 'label'>class_Common_Behavior::Exception</data>
    </node>
    <node id = 'package_Common_Behavior'>
      <data key = 'label'>package_Common_Behavior</data>
    </node>
  </graph>
  <graph id = 'State_MachinesGraph' edgedefault = 'undirected'>
    <edge id = 'StateMachine_extends_ModelElement' source = 'class_State_Machines::StateMachine' target = 'class_Core::ModelElement'/>
    <edge id = 'Event_extends_ModelElement' source = 'class_State_Machines::Event' target = 'class_Core::ModelElement'/>
    <edge id = 'StateVertex_extends_ModelElement' source = 'class_State_Machines::StateVertex' target = 'class_Core::ModelElement'/>
    <edge id = 'State_extends_StateVertex' source = 'class_State_Machines::State' target = 'class_State_Machines::StateVertex'/>
    <edge id = 'TimeEvent_extends_Event' source = 'class_State_Machines::TimeEvent' target = 'class_State_Machines::Event'/>
    <edge id = 'CallEvent_extends_Event' source = 'class_State_Machines::CallEvent' target = 'class_State_Machines::Event'/>
    <edge id = 'SignalEvent_extends_Event' source = 'class_State_Machines::SignalEvent' target = 'class_State_Machines::Event'/>
    <edge id = 'Transition_extends_ModelElement' source = 'class_State_Machines::Transition' target = 'class_Core::ModelElement'/>
    <edge id = 'CompositeState_extends_State' source = 'class_State_Machines::CompositeState' target = 'class_State_Machines::State'/>
    <edge id = 'ChangeEvent_extends_Event' source = 'class_State_Machines::ChangeEvent' target = 'class_State_Machines::Event'/>
    <edge id = 'Guard_extends_ModelElement' source = 'class_State_Machines::Guard' target = 'class_Core::ModelElement'/>
    <edge id = 'Pseudostate_extends_StateVertex' source = 'class_State_Machines::Pseudostate' target = 'class_State_Machines::StateVertex'/>
    <edge id = 'SimpleState_extends_State' source = 'class_State_Machines::SimpleState' target = 'class_State_Machines::State'/>
    <edge id = 'SubmachineState_extends_CompositeState' source = 'class_State_Machines::SubmachineState' target = 'class_State_Machines::CompositeState'/>
    <edge id = 'SynchState_extends_StateVertex' source = 'class_State_Machines::SynchState' target = 'class_State_Machines::StateVertex'/>
    <edge id = 'StubState_extends_StateVertex' source = 'class_State_Machines::StubState' target = 'class_State_Machines::StateVertex'/>
    <edge id = 'FinalState_extends_State' source = 'class_State_Machines::FinalState' target = 'class_State_Machines::State'/>
    <edge id = 'referenceEdge_StateMachine2ModelElement' source = 'class_State_Machines::StateMachine' target = 'class_Core::ModelElement'/>
    <edge id = 'referenceEdge_Event2Parameter' source = 'class_State_Machines::Event' target = 'class_Core::Parameter'/>
    <edge id = 'referenceEdge_StateVertex2CompositeState' source = 'class_State_Machines::StateVertex' target = 'class_State_Machines::CompositeState'/>
    <edge id = 'referenceEdge_State2Event' source = 'class_State_Machines::State' target = 'class_State_Machines::Event'/>
    <edge id = 'referenceEdge_CallEvent2Operation' source = 'class_State_Machines::CallEvent' target = 'class_Core::Operation'/>
    <edge id = 'referenceEdge_SignalEvent2Signal' source = 'class_State_Machines::SignalEvent' target = 'class_Common_Behavior::Signal'/>
    <edge id = 'referenceEdge_Transition2StateVertex' source = 'class_State_Machines::Transition' target = 'class_State_Machines::StateVertex'/>
    <edge id = 'referenceEdge_Guard2Transition' source = 'class_State_Machines::Guard' target = 'class_State_Machines::Transition'/>
    <edge id = 'referenceEdge_SubmachineState2StateMachine' source = 'class_State_Machines::SubmachineState' target = 'class_State_Machines::StateMachine'/>
    <node id = 'class_State_Machines::StateMachine'>
      <data key = 'label'>class_State_Machines::StateMachine</data>
    </node>
    <node id = 'class_State_Machines::Event'>
      <data key = 'label'>class_State_Machines::Event</data>
    </node>
    <node id = 'class_State_Machines::StateVertex'>
      <data key = 'label'>class_State_Machines::StateVertex</data>
    </node>
    <node id = 'class_State_Machines::State'>
      <data key = 'label'>class_State_Machines::State</data>
    </node>
    <node id = 'class_State_Machines::TimeEvent'>
      <data key = 'label'>class_State_Machines::TimeEvent</data>
    </node>
    <node id = 'class_State_Machines::CallEvent'>
      <data key = 'label'>class_State_Machines::CallEvent</data>
    </node>
    <node id = 'class_State_Machines::SignalEvent'>
      <data key = 'label'>class_State_Machines::SignalEvent</data>
    </node>
    <node id = 'class_State_Machines::Transition'>
      <data key = 'label'>class_State_Machines::Transition</data>
    </node>
    <node id = 'class_State_Machines::CompositeState'>
      <data key = 'label'>class_State_Machines::CompositeState</data>
    </node>
    <node id = 'class_State_Machines::ChangeEvent'>
      <data key = 'label'>class_State_Machines::ChangeEvent</data>
    </node>
    <node id = 'class_State_Machines::Guard'>
      <data key = 'label'>class_State_Machines::Guard</data>
    </node>
    <node id = 'class_State_Machines::Pseudostate'>
      <data key = 'label'>class_State_Machines::Pseudostate</data>
    </node>
    <node id = 'class_State_Machines::SimpleState'>
      <data key = 'label'>class_State_Machines::SimpleState</data>
    </node>
    <node id = 'class_State_Machines::SubmachineState'>
      <data key = 'label'>class_State_Machines::SubmachineState</data>
    </node>
    <node id = 'class_State_Machines::SynchState'>
      <data key = 'label'>class_State_Machines::SynchState</data>
    </node>
    <node id = 'class_State_Machines::StubState'>
      <data key = 'label'>class_State_Machines::StubState</data>
    </node>
    <node id = 'class_State_Machines::FinalState'>
      <data key = 'label'>class_State_Machines::FinalState</data>
    </node>
    <node id = 'package_State_Machines'>
      <data key = 'label'>package_State_Machines</data>
    </node>
  </graph>
  <graph id = 'Activity_GraphsGraph' edgedefault = 'undirected'>
    <edge id = 'ActivityGraph_extends_StateMachine' source = 'class_Activity_Graphs::ActivityGraph' target = 'class_State_Machines::StateMachine'/>
    <edge id = 'Partition_extends_ModelElement' source = 'class_Activity_Graphs::Partition' target = 'class_Core::ModelElement'/>
    <edge id = 'SubactivityState_extends_SubmachineState' source = 'class_Activity_Graphs::SubactivityState' target = 'class_State_Machines::SubmachineState'/>
    <edge id = 'ActionState_extends_SimpleState' source = 'class_Activity_Graphs::ActionState' target = 'class_State_Machines::SimpleState'/>
    <edge id = 'CallState_extends_ActionState' source = 'class_Activity_Graphs::CallState' target = 'class_Activity_Graphs::ActionState'/>
    <edge id = 'ObjectFlowState_extends_SimpleState' source = 'class_Activity_Graphs::ObjectFlowState' target = 'class_State_Machines::SimpleState'/>
    <edge id = 'ClassifierInState_extends_Classifier' source = 'class_Activity_Graphs::ClassifierInState' target = 'class_Core::Classifier'/>
    <edge id = 'referenceEdge_ActivityGraph2Partition' source = 'class_Activity_Graphs::ActivityGraph' target = 'class_Activity_Graphs::Partition'/>
    <edge id = 'referenceEdge_ObjectFlowState2Classifier' source = 'class_Activity_Graphs::ObjectFlowState' target = 'class_Core::Classifier'/>
    <edge id = 'referenceEdge_ClassifierInState2State' source = 'class_Activity_Graphs::ClassifierInState' target = 'class_State_Machines::State'/>
    <node id = 'class_Activity_Graphs::ActivityGraph'>
      <data key = 'label'>class_Activity_Graphs::ActivityGraph</data>
    </node>
    <node id = 'class_Activity_Graphs::Partition'>
      <data key = 'label'>class_Activity_Graphs::Partition</data>
    </node>
    <node id = 'class_Activity_Graphs::SubactivityState'>
      <data key = 'label'>class_Activity_Graphs::SubactivityState</data>
    </node>
    <node id = 'class_Activity_Graphs::ActionState'>
      <data key = 'label'>class_Activity_Graphs::ActionState</data>
    </node>
    <node id = 'class_Activity_Graphs::CallState'>
      <data key = 'label'>class_Activity_Graphs::CallState</data>
    </node>
    <node id = 'class_Activity_Graphs::ObjectFlowState'>
      <data key = 'label'>class_Activity_Graphs::ObjectFlowState</data>
    </node>
    <node id = 'class_Activity_Graphs::ClassifierInState'>
      <data key = 'label'>class_Activity_Graphs::ClassifierInState</data>
    </node>
    <node id = 'package_Activity_Graphs'>
      <data key = 'label'>package_Activity_Graphs</data>
    </node>
  </graph>
  <graph id = 'Data_TypesGraph' edgedefault = 'undirected'>
    <edge id = 'BooleanExpression_extends_Expression' source = 'class_Data_Types::BooleanExpression' target = 'class_Data_Types::Expression'/>
    <edge id = 'ObjectSetExpression_extends_Expression' source = 'class_Data_Types::ObjectSetExpression' target = 'class_Data_Types::Expression'/>
    <edge id = 'ActionExpression_extends_Expression' source = 'class_Data_Types::ActionExpression' target = 'class_Data_Types::Expression'/>
    <edge id = 'IterationExpression_extends_Expression' source = 'class_Data_Types::IterationExpression' target = 'class_Data_Types::Expression'/>
    <edge id = 'TimeExpression_extends_Expression' source = 'class_Data_Types::TimeExpression' target = 'class_Data_Types::Expression'/>
    <edge id = 'ArgListsExpression_extends_Expression' source = 'class_Data_Types::ArgListsExpression' target = 'class_Data_Types::Expression'/>
    <edge id = 'referenceEdge_Multiplicity2MultiplicityRange' source = 'class_Data_Types::Multiplicity' target = 'class_Data_Types::MultiplicityRange'/>
    <node id = 'enum_AggregationKind'>
      <data key = 'label'>enum_AggregationKind</data>
    </node>
    <node id = 'enum_ChangeableKind'>
      <data key = 'label'>enum_ChangeableKind</data>
    </node>
    <node id = 'enum_OrderingKind'>
      <data key = 'label'>enum_OrderingKind</data>
    </node>
    <node id = 'enum_CallConcurrencyKind'>
      <data key = 'label'>enum_CallConcurrencyKind</data>
    </node>
    <node id = 'enum_ParameterDirectionKind'>
      <data key = 'label'>enum_ParameterDirectionKind</data>
    </node>
    <node id = 'enum_PseudostateKind'>
      <data key = 'label'>enum_PseudostateKind</data>
    </node>
    <node id = 'enum_ScopeKind'>
      <data key = 'label'>enum_ScopeKind</data>
    </node>
    <node id = 'enum_VisibilityKind'>
      <data key = 'label'>enum_VisibilityKind</data>
    </node>
    <node id = 'class_Data_Types::Multiplicity'>
      <data key = 'label'>class_Data_Types::Multiplicity</data>
    </node>
    <node id = 'class_Data_Types::MultiplicityRange'>
      <data key = 'label'>class_Data_Types::MultiplicityRange</data>
    </node>
    <node id = 'class_Data_Types::Expression'>
      <data key = 'label'>class_Data_Types::Expression</data>
    </node>
    <node id = 'class_Data_Types::BooleanExpression'>
      <data key = 'label'>class_Data_Types::BooleanExpression</data>
    </node>
    <node id = 'class_Data_Types::ObjectSetExpression'>
      <data key = 'label'>class_Data_Types::ObjectSetExpression</data>
    </node>
    <node id = 'class_Data_Types::ActionExpression'>
      <data key = 'label'>class_Data_Types::ActionExpression</data>
    </node>
    <node id = 'class_Data_Types::IterationExpression'>
      <data key = 'label'>class_Data_Types::IterationExpression</data>
    </node>
    <node id = 'class_Data_Types::TimeExpression'>
      <data key = 'label'>class_Data_Types::TimeExpression</data>
    </node>
    <node id = 'class_Data_Types::ArgListsExpression'>
      <data key = 'label'>class_Data_Types::ArgListsExpression</data>
    </node>
    <node id = 'package_Data_Types'>
      <data key = 'label'>package_Data_Types</data>
    </node>
  </graph>
  <graph id = 'PrimitiveTypesGraph' edgedefault = 'undirected'>
    <node id = 'dataType_Boolean'>
      <data key = 'label'>dataType_Boolean</data>
    </node>
    <node id = 'dataType_Float'>
      <data key = 'label'>dataType_Float</data>
    </node>
    <node id = 'dataType_Integer'>
      <data key = 'label'>dataType_Integer</data>
    </node>
    <node id = 'dataType_Long'>
      <data key = 'label'>dataType_Long</data>
    </node>
    <node id = 'dataType_String'>
      <data key = 'label'>dataType_String</data>
    </node>
    <node id = 'dataType_Double'>
      <data key = 'label'>dataType_Double</data>
    </node>
    <node id = 'package_PrimitiveTypes'>
      <data key = 'label'>package_PrimitiveTypes</data>
    </node>
  </graph>
</graphml>
