<?xml version = '1.0' encoding = 'ISO-8859-1' ?>
<graphml xmlns:xsi = 'http://www.w3.org/2001/XMLSchema-instance' xsi:schemaLocation = 'http://graphml.graphdrawing.org/xmlnshttp://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd'>
  <key id = 'label' for = 'node' attr.name = 'label' attr.type = 'string'/>
  <graph id = 'PerceptoryGraph' edgedefault = 'undirected'>
    <edge id = 'StopProcess_extends_Process' source = 'class_Perceptory::StopProcess' target = 'class_Perceptory::Process'/>
    <edge id = 'SkipProcess_extends_Process' source = 'class_Perceptory::SkipProcess' target = 'class_Perceptory::Process'/>
    <edge id = 'Action_extends_Process' source = 'class_Perceptory::Action' target = 'class_Perceptory::Process'/>
    <edge id = 'Construction_extends_Process' source = 'class_Perceptory::Construction' target = 'class_Perceptory::Process'/>
    <edge id = 'Instance_extends_Process' source = 'class_Perceptory::Instance' target = 'class_Perceptory::Process'/>
    <edge id = 'Assignment_extends_Action' source = 'class_Perceptory::Assignment' target = 'class_Perceptory::Action'/>
    <edge id = 'Input_extends_Action' source = 'class_Perceptory::Input' target = 'class_Perceptory::Action'/>
    <edge id = 'Output_extends_Action' source = 'class_Perceptory::Output' target = 'class_Perceptory::Action'/>
    <edge id = 'Sequence_extends_Construction' source = 'class_Perceptory::Sequence' target = 'class_Perceptory::Construction'/>
    <edge id = 'NormalSequence_extends_Sequence' source = 'class_Perceptory::NormalSequence' target = 'class_Perceptory::Sequence'/>
    <edge id = 'ReplicatorSequence_extends_Sequence' source = 'class_Perceptory::ReplicatorSequence' target = 'class_Perceptory::Sequence'/>
    <edge id = 'Conditional_extends_Construction' source = 'class_Perceptory::Conditional' target = 'class_Perceptory::Construction'/>
    <edge id = 'NormalConditional_extends_Conditional' source = 'class_Perceptory::NormalConditional' target = 'class_Perceptory::Conditional'/>
    <edge id = 'ReplicatorConditional_extends_Conditional' source = 'class_Perceptory::ReplicatorConditional' target = 'class_Perceptory::Conditional'/>
    <edge id = 'Loop_extends_Construction' source = 'class_Perceptory::Loop' target = 'class_Perceptory::Construction'/>
    <edge id = 'Parallel_extends_Construction' source = 'class_Perceptory::Parallel' target = 'class_Perceptory::Construction'/>
    <edge id = 'NormalParallel_extends_Parallel' source = 'class_Perceptory::NormalParallel' target = 'class_Perceptory::Parallel'/>
    <edge id = 'ReplicatorParallel_extends_Parallel' source = 'class_Perceptory::ReplicatorParallel' target = 'class_Perceptory::Parallel'/>
    <edge id = 'Alternation_extends_Construction' source = 'class_Perceptory::Alternation' target = 'class_Perceptory::Construction'/>
    <edge id = 'NormalAlternation_extends_Parallel' source = 'class_Perceptory::NormalAlternation' target = 'class_Perceptory::Parallel'/>
    <edge id = 'ReplicatorAlternation_extends_Parallel' source = 'class_Perceptory::ReplicatorAlternation' target = 'class_Perceptory::Parallel'/>
    <edge id = 'InputGuard_extends_Guard' source = 'class_Perceptory::InputGuard' target = 'class_Perceptory::Guard'/>
    <edge id = 'BooleanGuard_extends_Guard' source = 'class_Perceptory::BooleanGuard' target = 'class_Perceptory::Guard'/>
    <edge id = 'VariableOPerand_extends_Variable' source = 'class_Perceptory::VariableOPerand' target = 'class_Perceptory::Variable'/>
    <edge id = 'LiteralOperand_extends_Literal' source = 'class_Perceptory::LiteralOperand' target = 'class_Perceptory::Literal'/>
    <edge id = 'ExpressionOperand_extends_Expression' source = 'class_Perceptory::ExpressionOperand' target = 'class_Perceptory::Expression'/>
    <edge id = 'MonadicExpression_extends_Expression' source = 'class_Perceptory::MonadicExpression' target = 'class_Perceptory::Expression'/>
    <edge id = 'DyadicExpression_extends_Expression' source = 'class_Perceptory::DyadicExpression' target = 'class_Perceptory::Expression'/>
    <edge id = 'SimpleExpression_extends_Expression' source = 'class_Perceptory::SimpleExpression' target = 'class_Perceptory::Expression'/>
    <edge id = 'Specification_extends_Process' source = 'class_Perceptory::Specification' target = 'class_Perceptory::Process'/>
    <edge id = 'Declaration_extends_Specification' source = 'class_Perceptory::Declaration' target = 'class_Perceptory::Specification'/>
    <edge id = 'TypeDeclaration_extends_Declaration' source = 'class_Perceptory::TypeDeclaration' target = 'class_Perceptory::Declaration'/>
    <edge id = 'IntDeclaration_extends_Declaration' source = 'class_Perceptory::IntDeclaration' target = 'class_Perceptory::Declaration'/>
    <edge id = 'ValDeclaration_extends_Declaration' source = 'class_Perceptory::ValDeclaration' target = 'class_Perceptory::Declaration'/>
    <edge id = 'Definition_extends_Specification' source = 'class_Perceptory::Definition' target = 'class_Perceptory::Specification'/>
    <edge id = 'referenceEdge_Assignment2Variable' source = 'class_Perceptory::Assignment' target = 'class_Perceptory::Variable'/>
    <edge id = 'referenceEdge_Input2Channel' source = 'class_Perceptory::Input' target = 'class_Perceptory::Channel'/>
    <edge id = 'referenceEdge_Output2Channel' source = 'class_Perceptory::Output' target = 'class_Perceptory::Channel'/>
    <edge id = 'referenceEdge_Sequence2Process' source = 'class_Perceptory::Sequence' target = 'class_Perceptory::Process'/>
    <edge id = 'referenceEdge_ReplicatorSequence2Replicator' source = 'class_Perceptory::ReplicatorSequence' target = 'class_Perceptory::Replicator'/>
    <edge id = 'referenceEdge_Conditional2Choice' source = 'class_Perceptory::Conditional' target = 'class_Perceptory::Choice'/>
    <edge id = 'referenceEdge_ReplicatorConditional2Replicator' source = 'class_Perceptory::ReplicatorConditional' target = 'class_Perceptory::Replicator'/>
    <edge id = 'referenceEdge_Loop2BooleanRef' source = 'class_Perceptory::Loop' target = 'class_Perceptory::BooleanRef'/>
    <edge id = 'referenceEdge_Parallel2Process' source = 'class_Perceptory::Parallel' target = 'class_Perceptory::Process'/>
    <edge id = 'referenceEdge_ReplicatorParallel2Replicator' source = 'class_Perceptory::ReplicatorParallel' target = 'class_Perceptory::Replicator'/>
    <edge id = 'referenceEdge_Alternation2Alternative' source = 'class_Perceptory::Alternation' target = 'class_Perceptory::Alternative'/>
    <edge id = 'referenceEdge_ReplicatorAlternation2Replicator' source = 'class_Perceptory::ReplicatorAlternation' target = 'class_Perceptory::Replicator'/>
    <edge id = 'referenceEdge_Guard2Input' source = 'class_Perceptory::Guard' target = 'class_Perceptory::Input'/>
    <edge id = 'referenceEdge_BooleanGuard2BooleanRef' source = 'class_Perceptory::BooleanGuard' target = 'class_Perceptory::BooleanRef'/>
    <edge id = 'referenceEdge_Base2Expression' source = 'class_Perceptory::Base' target = 'class_Perceptory::Expression'/>
    <edge id = 'referenceEdge_Count2Expression' source = 'class_Perceptory::Count' target = 'class_Perceptory::Expression'/>
    <edge id = 'referenceEdge_Type2PrimitiveType' source = 'class_Perceptory::Type' target = 'class_Perceptory::PrimitiveType'/>
    <edge id = 'referenceEdge_Element2Subscript' source = 'class_Perceptory::Element' target = 'class_Perceptory::Subscript'/>
    <edge id = 'referenceEdge_MonadicExpression2MonadicOperator' source = 'class_Perceptory::MonadicExpression' target = 'class_Perceptory::MonadicOperator'/>
    <edge id = 'referenceEdge_DyadicExpression2Operand' source = 'class_Perceptory::DyadicExpression' target = 'class_Perceptory::Operand'/>
    <edge id = 'referenceEdge_TypeDeclaration2Type' source = 'class_Perceptory::TypeDeclaration' target = 'class_Perceptory::Type'/>
    <edge id = 'referenceEdge_IntDeclaration2Expression' source = 'class_Perceptory::IntDeclaration' target = 'class_Perceptory::Expression'/>
    <edge id = 'referenceEdge_ValDeclaration2Expression' source = 'class_Perceptory::ValDeclaration' target = 'class_Perceptory::Expression'/>
    <edge id = 'referenceEdge_Definition2ProcedureBody' source = 'class_Perceptory::Definition' target = 'class_Perceptory::ProcedureBody'/>
    <edge id = 'referenceEdge_Formal2PrimitiveType' source = 'class_Perceptory::Formal' target = 'class_Perceptory::PrimitiveType'/>
    <edge id = 'referenceEdge_Actual2Element' source = 'class_Perceptory::Actual' target = 'class_Perceptory::Element'/>
    <node id = 'class_Perceptory::Process'>
      <data key = 'label'>class_Perceptory::Process</data>
    </node>
    <node id = 'class_Perceptory::StopProcess'>
      <data key = 'label'>class_Perceptory::StopProcess</data>
    </node>
    <node id = 'class_Perceptory::SkipProcess'>
      <data key = 'label'>class_Perceptory::SkipProcess</data>
    </node>
    <node id = 'class_Perceptory::Action'>
      <data key = 'label'>class_Perceptory::Action</data>
    </node>
    <node id = 'class_Perceptory::Construction'>
      <data key = 'label'>class_Perceptory::Construction</data>
    </node>
    <node id = 'class_Perceptory::Instance'>
      <data key = 'label'>class_Perceptory::Instance</data>
    </node>
    <node id = 'class_Perceptory::Assignment'>
      <data key = 'label'>class_Perceptory::Assignment</data>
    </node>
    <node id = 'class_Perceptory::Input'>
      <data key = 'label'>class_Perceptory::Input</data>
    </node>
    <node id = 'class_Perceptory::Output'>
      <data key = 'label'>class_Perceptory::Output</data>
    </node>
    <node id = 'class_Perceptory::Sequence'>
      <data key = 'label'>class_Perceptory::Sequence</data>
    </node>
    <node id = 'class_Perceptory::NormalSequence'>
      <data key = 'label'>class_Perceptory::NormalSequence</data>
    </node>
    <node id = 'class_Perceptory::ReplicatorSequence'>
      <data key = 'label'>class_Perceptory::ReplicatorSequence</data>
    </node>
    <node id = 'class_Perceptory::Conditional'>
      <data key = 'label'>class_Perceptory::Conditional</data>
    </node>
    <node id = 'class_Perceptory::NormalConditional'>
      <data key = 'label'>class_Perceptory::NormalConditional</data>
    </node>
    <node id = 'class_Perceptory::ReplicatorConditional'>
      <data key = 'label'>class_Perceptory::ReplicatorConditional</data>
    </node>
    <node id = 'class_Perceptory::Loop'>
      <data key = 'label'>class_Perceptory::Loop</data>
    </node>
    <node id = 'class_Perceptory::Parallel'>
      <data key = 'label'>class_Perceptory::Parallel</data>
    </node>
    <node id = 'class_Perceptory::NormalParallel'>
      <data key = 'label'>class_Perceptory::NormalParallel</data>
    </node>
    <node id = 'class_Perceptory::ReplicatorParallel'>
      <data key = 'label'>class_Perceptory::ReplicatorParallel</data>
    </node>
    <node id = 'class_Perceptory::Alternation'>
      <data key = 'label'>class_Perceptory::Alternation</data>
    </node>
    <node id = 'class_Perceptory::NormalAlternation'>
      <data key = 'label'>class_Perceptory::NormalAlternation</data>
    </node>
    <node id = 'class_Perceptory::ReplicatorAlternation'>
      <data key = 'label'>class_Perceptory::ReplicatorAlternation</data>
    </node>
    <node id = 'class_Perceptory::Choice'>
      <data key = 'label'>class_Perceptory::Choice</data>
    </node>
    <node id = 'class_Perceptory::BooleanRef'>
      <data key = 'label'>class_Perceptory::BooleanRef</data>
    </node>
    <node id = 'class_Perceptory::Alternative'>
      <data key = 'label'>class_Perceptory::Alternative</data>
    </node>
    <node id = 'class_Perceptory::Guard'>
      <data key = 'label'>class_Perceptory::Guard</data>
    </node>
    <node id = 'class_Perceptory::InputGuard'>
      <data key = 'label'>class_Perceptory::InputGuard</data>
    </node>
    <node id = 'class_Perceptory::BooleanGuard'>
      <data key = 'label'>class_Perceptory::BooleanGuard</data>
    </node>
    <node id = 'class_Perceptory::Replicator'>
      <data key = 'label'>class_Perceptory::Replicator</data>
    </node>
    <node id = 'class_Perceptory::Base'>
      <data key = 'label'>class_Perceptory::Base</data>
    </node>
    <node id = 'class_Perceptory::Count'>
      <data key = 'label'>class_Perceptory::Count</data>
    </node>
    <node id = 'class_Perceptory::Type'>
      <data key = 'label'>class_Perceptory::Type</data>
    </node>
    <node id = 'class_Perceptory::PrimitiveType'>
      <data key = 'label'>class_Perceptory::PrimitiveType</data>
    </node>
    <node id = 'class_Perceptory::Literal'>
      <data key = 'label'>class_Perceptory::Literal</data>
    </node>
    <node id = 'class_Perceptory::Element'>
      <data key = 'label'>class_Perceptory::Element</data>
    </node>
    <node id = 'class_Perceptory::Subscript'>
      <data key = 'label'>class_Perceptory::Subscript</data>
    </node>
    <node id = 'class_Perceptory::Variable'>
      <data key = 'label'>class_Perceptory::Variable</data>
    </node>
    <node id = 'class_Perceptory::Channel'>
      <data key = 'label'>class_Perceptory::Channel</data>
    </node>
    <node id = 'class_Perceptory::Operand'>
      <data key = 'label'>class_Perceptory::Operand</data>
    </node>
    <node id = 'class_Perceptory::VariableOPerand'>
      <data key = 'label'>class_Perceptory::VariableOPerand</data>
    </node>
    <node id = 'class_Perceptory::LiteralOperand'>
      <data key = 'label'>class_Perceptory::LiteralOperand</data>
    </node>
    <node id = 'class_Perceptory::ExpressionOperand'>
      <data key = 'label'>class_Perceptory::ExpressionOperand</data>
    </node>
    <node id = 'class_Perceptory::Expression'>
      <data key = 'label'>class_Perceptory::Expression</data>
    </node>
    <node id = 'class_Perceptory::MonadicExpression'>
      <data key = 'label'>class_Perceptory::MonadicExpression</data>
    </node>
    <node id = 'class_Perceptory::DyadicExpression'>
      <data key = 'label'>class_Perceptory::DyadicExpression</data>
    </node>
    <node id = 'class_Perceptory::SimpleExpression'>
      <data key = 'label'>class_Perceptory::SimpleExpression</data>
    </node>
    <node id = 'class_Perceptory::Specification'>
      <data key = 'label'>class_Perceptory::Specification</data>
    </node>
    <node id = 'class_Perceptory::Declaration'>
      <data key = 'label'>class_Perceptory::Declaration</data>
    </node>
    <node id = 'class_Perceptory::TypeDeclaration'>
      <data key = 'label'>class_Perceptory::TypeDeclaration</data>
    </node>
    <node id = 'class_Perceptory::IntDeclaration'>
      <data key = 'label'>class_Perceptory::IntDeclaration</data>
    </node>
    <node id = 'class_Perceptory::ValDeclaration'>
      <data key = 'label'>class_Perceptory::ValDeclaration</data>
    </node>
    <node id = 'class_Perceptory::Definition'>
      <data key = 'label'>class_Perceptory::Definition</data>
    </node>
    <node id = 'class_Perceptory::Formal'>
      <data key = 'label'>class_Perceptory::Formal</data>
    </node>
    <node id = 'class_Perceptory::ProcedureBody'>
      <data key = 'label'>class_Perceptory::ProcedureBody</data>
    </node>
    <node id = 'class_Perceptory::Actual'>
      <data key = 'label'>class_Perceptory::Actual</data>
    </node>
    <node id = 'class_Perceptory::MonadicOperator'>
      <data key = 'label'>class_Perceptory::MonadicOperator</data>
    </node>
    <node id = 'class_Perceptory::DyadicOperator'>
      <data key = 'label'>class_Perceptory::DyadicOperator</data>
    </node>
    <node id = 'package_Perceptory'>
      <data key = 'label'>package_Perceptory</data>
    </node>
  </graph>
  <graph id = 'PrimitiveTypesGraph' edgedefault = 'undirected'>
    <node id = 'dataType_String'>
      <data key = 'label'>dataType_String</data>
    </node>
    <node id = 'dataType_Boolean'>
      <data key = 'label'>dataType_Boolean</data>
    </node>
    <node id = 'dataType_Integer'>
      <data key = 'label'>dataType_Integer</data>
    </node>
    <node id = 'package_PrimitiveTypes'>
      <data key = 'label'>package_PrimitiveTypes</data>
    </node>
  </graph>
</graphml>
