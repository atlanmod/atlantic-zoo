<?xml version = '1.0' encoding = 'ISO-8859-1' ?>
<graphml xmlns:xsi = 'http://www.w3.org/2001/XMLSchema-instance' xsi:schemaLocation = 'http://graphml.graphdrawing.org/xmlnshttp://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd'>
  <key id = 'label' for = 'node' attr.name = 'label' attr.type = 'string'/>
  <graph id = 'PascalGraph' edgedefault = 'undirected'>
    <edge id = 'Parameter_extends_Variable' source = 'class_Pascal::Parameter' target = 'class_Pascal::Variable'/>
    <edge id = 'Calculation_extends_Instruction' source = 'class_Pascal::Calculation' target = 'class_Pascal::Instruction'/>
    <edge id = 'Control_extends_Instruction' source = 'class_Pascal::Control' target = 'class_Pascal::Instruction'/>
    <edge id = 'Assignment_extends_Instruction' source = 'class_Pascal::Assignment' target = 'class_Pascal::Instruction'/>
    <edge id = 'Block_extends_Instruction' source = 'class_Pascal::Block' target = 'class_Pascal::Instruction'/>
    <edge id = 'Conditional_extends_Control' source = 'class_Pascal::Conditional' target = 'class_Pascal::Control'/>
    <edge id = 'Loop_extends_Control' source = 'class_Pascal::Loop' target = 'class_Pascal::Control'/>
    <edge id = 'Procedure_extends_Control' source = 'class_Pascal::Procedure' target = 'class_Pascal::Control'/>
    <edge id = 'Function_extends_Procedure' source = 'class_Pascal::Function' target = 'class_Pascal::Procedure'/>
    <edge id = 'For_extends_Loop' source = 'class_Pascal::For' target = 'class_Pascal::Loop'/>
    <edge id = 'While_extends_Loop' source = 'class_Pascal::While' target = 'class_Pascal::Loop'/>
    <edge id = 'Repeat_extends_Loop' source = 'class_Pascal::Repeat' target = 'class_Pascal::Loop'/>
    <edge id = 'referenceEdge_Program2Variable' source = 'class_Pascal::Program' target = 'class_Pascal::Variable'/>
    <edge id = 'referenceEdge_Type2Program' source = 'class_Pascal::Type' target = 'class_Pascal::Program'/>
    <edge id = 'referenceEdge_Parameter2Procedure' source = 'class_Pascal::Parameter' target = 'class_Pascal::Procedure'/>
    <edge id = 'referenceEdge_Instruction2Block' source = 'class_Pascal::Instruction' target = 'class_Pascal::Block'/>
    <edge id = 'referenceEdge_Conditional2Block' source = 'class_Pascal::Conditional' target = 'class_Pascal::Block'/>
    <edge id = 'referenceEdge_Loop2Block' source = 'class_Pascal::Loop' target = 'class_Pascal::Block'/>
    <edge id = 'referenceEdge_Function2Type' source = 'class_Pascal::Function' target = 'class_Pascal::Type'/>
    <node id = 'class_Pascal::Program'>
      <data key = 'label'>class_Pascal::Program</data>
    </node>
    <node id = 'class_Pascal::Variable'>
      <data key = 'label'>class_Pascal::Variable</data>
    </node>
    <node id = 'class_Pascal::Type'>
      <data key = 'label'>class_Pascal::Type</data>
    </node>
    <node id = 'class_Pascal::Parameter'>
      <data key = 'label'>class_Pascal::Parameter</data>
    </node>
    <node id = 'class_Pascal::Instruction'>
      <data key = 'label'>class_Pascal::Instruction</data>
    </node>
    <node id = 'class_Pascal::Calculation'>
      <data key = 'label'>class_Pascal::Calculation</data>
    </node>
    <node id = 'class_Pascal::Control'>
      <data key = 'label'>class_Pascal::Control</data>
    </node>
    <node id = 'class_Pascal::Assignment'>
      <data key = 'label'>class_Pascal::Assignment</data>
    </node>
    <node id = 'class_Pascal::Block'>
      <data key = 'label'>class_Pascal::Block</data>
    </node>
    <node id = 'class_Pascal::Conditional'>
      <data key = 'label'>class_Pascal::Conditional</data>
    </node>
    <node id = 'class_Pascal::Loop'>
      <data key = 'label'>class_Pascal::Loop</data>
    </node>
    <node id = 'class_Pascal::Procedure'>
      <data key = 'label'>class_Pascal::Procedure</data>
    </node>
    <node id = 'class_Pascal::Function'>
      <data key = 'label'>class_Pascal::Function</data>
    </node>
    <node id = 'class_Pascal::For'>
      <data key = 'label'>class_Pascal::For</data>
    </node>
    <node id = 'class_Pascal::While'>
      <data key = 'label'>class_Pascal::While</data>
    </node>
    <node id = 'class_Pascal::Repeat'>
      <data key = 'label'>class_Pascal::Repeat</data>
    </node>
    <node id = 'package_Pascal'>
      <data key = 'label'>package_Pascal</data>
    </node>
  </graph>
  <graph id = 'PrimitiveTypesGraph' edgedefault = 'undirected'>
    <node id = 'dataType_String'>
      <data key = 'label'>dataType_String</data>
    </node>
    <node id = 'package_PrimitiveTypes'>
      <data key = 'label'>package_PrimitiveTypes</data>
    </node>
  </graph>
</graphml>
