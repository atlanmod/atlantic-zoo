<?xml version = '1.0' encoding = 'ISO-8859-1' ?>
<graphml xmlns:xsi = 'http://www.w3.org/2001/XMLSchema-instance' xsi:schemaLocation = 'http://graphml.graphdrawing.org/xmlnshttp://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd'>
  <key id = 'label' for = 'node' attr.name = 'label' attr.type = 'string'/>
  <graph id = 'UMLMetamodelFragmentGraph' edgedefault = 'undirected'>
    <edge id = 'State_extends_StateVertex' source = 'class_UMLMetamodelFragment::State' target = 'class_UMLMetamodelFragment::StateVertex'/>
    <edge id = 'CompositeState_extends_State' source = 'class_UMLMetamodelFragment::CompositeState' target = 'class_UMLMetamodelFragment::State'/>
    <edge id = 'SimpleState_extends_State' source = 'class_UMLMetamodelFragment::SimpleState' target = 'class_UMLMetamodelFragment::State'/>
    <edge id = 'FinalState_extends_State' source = 'class_UMLMetamodelFragment::FinalState' target = 'class_UMLMetamodelFragment::State'/>
    <edge id = 'PseudoState_extends_StateVertex' source = 'class_UMLMetamodelFragment::PseudoState' target = 'class_UMLMetamodelFragment::StateVertex'/>
    <edge id = 'referenceEdge_Class2Generalization' source = 'class_UMLMetamodelFragment::Class' target = 'class_UMLMetamodelFragment::Generalization'/>
    <edge id = 'referenceEdge_Dependency2StateMachine' source = 'class_UMLMetamodelFragment::Dependency' target = 'class_UMLMetamodelFragment::StateMachine'/>
    <edge id = 'referenceEdge_Stereotype2Dependency' source = 'class_UMLMetamodelFragment::Stereotype' target = 'class_UMLMetamodelFragment::Dependency'/>
    <edge id = 'referenceEdge_State2StateMachine' source = 'class_UMLMetamodelFragment::State' target = 'class_UMLMetamodelFragment::StateMachine'/>
    <edge id = 'referenceEdge_CompositeState2StateVertex' source = 'class_UMLMetamodelFragment::CompositeState' target = 'class_UMLMetamodelFragment::StateVertex'/>
    <edge id = 'referenceEdge_Transition2Event' source = 'class_UMLMetamodelFragment::Transition' target = 'class_UMLMetamodelFragment::Event'/>
    <node id = 'class_UMLMetamodelFragment::Class'>
      <data key = 'label'>class_UMLMetamodelFragment::Class</data>
    </node>
    <node id = 'class_UMLMetamodelFragment::Generalization'>
      <data key = 'label'>class_UMLMetamodelFragment::Generalization</data>
    </node>
    <node id = 'class_UMLMetamodelFragment::Dependency'>
      <data key = 'label'>class_UMLMetamodelFragment::Dependency</data>
    </node>
    <node id = 'class_UMLMetamodelFragment::Stereotype'>
      <data key = 'label'>class_UMLMetamodelFragment::Stereotype</data>
    </node>
    <node id = 'class_UMLMetamodelFragment::StateMachine'>
      <data key = 'label'>class_UMLMetamodelFragment::StateMachine</data>
    </node>
    <node id = 'class_UMLMetamodelFragment::State'>
      <data key = 'label'>class_UMLMetamodelFragment::State</data>
    </node>
    <node id = 'class_UMLMetamodelFragment::CompositeState'>
      <data key = 'label'>class_UMLMetamodelFragment::CompositeState</data>
    </node>
    <node id = 'class_UMLMetamodelFragment::SimpleState'>
      <data key = 'label'>class_UMLMetamodelFragment::SimpleState</data>
    </node>
    <node id = 'class_UMLMetamodelFragment::FinalState'>
      <data key = 'label'>class_UMLMetamodelFragment::FinalState</data>
    </node>
    <node id = 'class_UMLMetamodelFragment::StateVertex'>
      <data key = 'label'>class_UMLMetamodelFragment::StateVertex</data>
    </node>
    <node id = 'class_UMLMetamodelFragment::PseudoState'>
      <data key = 'label'>class_UMLMetamodelFragment::PseudoState</data>
    </node>
    <node id = 'class_UMLMetamodelFragment::Transition'>
      <data key = 'label'>class_UMLMetamodelFragment::Transition</data>
    </node>
    <node id = 'class_UMLMetamodelFragment::Event'>
      <data key = 'label'>class_UMLMetamodelFragment::Event</data>
    </node>
    <node id = 'package_UMLMetamodelFragment'>
      <data key = 'label'>package_UMLMetamodelFragment</data>
    </node>
  </graph>
  <graph id = 'PrimitiveTypesGraph' edgedefault = 'undirected'>
    <node id = 'dataType_Boolean'>
      <data key = 'label'>dataType_Boolean</data>
    </node>
    <node id = 'dataType_Integer'>
      <data key = 'label'>dataType_Integer</data>
    </node>
    <node id = 'dataType_String'>
      <data key = 'label'>dataType_String</data>
    </node>
    <node id = 'package_PrimitiveTypes'>
      <data key = 'label'>package_PrimitiveTypes</data>
    </node>
  </graph>
</graphml>
