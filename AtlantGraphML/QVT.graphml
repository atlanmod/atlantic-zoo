<?xml version = '1.0' encoding = 'ISO-8859-1' ?>
<graphml xmlns:xsi = 'http://www.w3.org/2001/XMLSchema-instance' xsi:schemaLocation = 'http://graphml.graphdrawing.org/xmlnshttp://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd'>
  <key id = 'label' for = 'node' attr.name = 'label' attr.type = 'string'/>
  <graph id = 'qvttemplateGraph' edgedefault = 'undirected'>
    <edge id = 'TemplateExp_extends_LiteralExp' source = 'class_qvttemplate::TemplateExp' target = 'class_essentialocl::LiteralExp'/>
    <edge id = 'ObjectTemplateExp_extends_TemplateExp' source = 'class_qvttemplate::ObjectTemplateExp' target = 'class_qvttemplate::TemplateExp'/>
    <edge id = 'CollectionTemplateExp_extends_TemplateExp' source = 'class_qvttemplate::CollectionTemplateExp' target = 'class_qvttemplate::TemplateExp'/>
    <edge id = 'PropertyTemplateItem_extends_Element' source = 'class_qvttemplate::PropertyTemplateItem' target = 'class_emof::Element'/>
    <edge id = 'referenceEdge_TemplateExp2Variable' source = 'class_qvttemplate::TemplateExp' target = 'class_essentialocl::Variable'/>
    <edge id = 'referenceEdge_ObjectTemplateExp2PropertyTemplateItem' source = 'class_qvttemplate::ObjectTemplateExp' target = 'class_qvttemplate::PropertyTemplateItem'/>
    <edge id = 'referenceEdge_CollectionTemplateExp2OclExpression' source = 'class_qvttemplate::CollectionTemplateExp' target = 'class_essentialocl::OclExpression'/>
    <node id = 'class_qvttemplate::TemplateExp'>
      <data key = 'label'>class_qvttemplate::TemplateExp</data>
    </node>
    <node id = 'class_qvttemplate::ObjectTemplateExp'>
      <data key = 'label'>class_qvttemplate::ObjectTemplateExp</data>
    </node>
    <node id = 'class_qvttemplate::CollectionTemplateExp'>
      <data key = 'label'>class_qvttemplate::CollectionTemplateExp</data>
    </node>
    <node id = 'class_qvttemplate::PropertyTemplateItem'>
      <data key = 'label'>class_qvttemplate::PropertyTemplateItem</data>
    </node>
    <node id = 'package_qvttemplate'>
      <data key = 'label'>package_qvttemplate</data>
    </node>
  </graph>
  <graph id = 'imperativeoclGraph' edgedefault = 'undirected'>
    <edge id = 'ImperativeIterateExp_extends_ImperativeLoopExp' source = 'class_imperativeocl::ImperativeIterateExp' target = 'class_imperativeocl::ImperativeLoopExp'/>
    <edge id = 'AssignExp_extends_ImperativeExpression' source = 'class_imperativeocl::AssignExp' target = 'class_imperativeocl::ImperativeExpression'/>
    <edge id = 'BlockExp_extends_ImperativeExpression' source = 'class_imperativeocl::BlockExp' target = 'class_imperativeocl::ImperativeExpression'/>
    <edge id = 'SwitchExp_extends_CallExp' source = 'class_imperativeocl::SwitchExp' target = 'class_essentialocl::CallExp'/>
    <edge id = 'VariableInitExp_extends_ImperativeExpression' source = 'class_imperativeocl::VariableInitExp' target = 'class_imperativeocl::ImperativeExpression'/>
    <edge id = 'WhileExp_extends_ImperativeExpression' source = 'class_imperativeocl::WhileExp' target = 'class_imperativeocl::ImperativeExpression'/>
    <edge id = 'ComputeExp_extends_ImperativeExpression' source = 'class_imperativeocl::ComputeExp' target = 'class_imperativeocl::ImperativeExpression'/>
    <edge id = 'AltExp_extends_ImperativeExpression' source = 'class_imperativeocl::AltExp' target = 'class_imperativeocl::ImperativeExpression'/>
    <edge id = 'UnlinkExp_extends_ImperativeExpression' source = 'class_imperativeocl::UnlinkExp' target = 'class_imperativeocl::ImperativeExpression'/>
    <edge id = 'ReturnExp_extends_ImperativeExpression' source = 'class_imperativeocl::ReturnExp' target = 'class_imperativeocl::ImperativeExpression'/>
    <edge id = 'BreakExp_extends_ImperativeExpression' source = 'class_imperativeocl::BreakExp' target = 'class_imperativeocl::ImperativeExpression'/>
    <edge id = 'TryExp_extends_ImperativeExpression' source = 'class_imperativeocl::TryExp' target = 'class_imperativeocl::ImperativeExpression'/>
    <edge id = 'RaiseExp_extends_ImperativeExpression' source = 'class_imperativeocl::RaiseExp' target = 'class_imperativeocl::ImperativeExpression'/>
    <edge id = 'ContinueExp_extends_ImperativeExpression' source = 'class_imperativeocl::ContinueExp' target = 'class_imperativeocl::ImperativeExpression'/>
    <edge id = 'ForExp_extends_ImperativeLoopExp' source = 'class_imperativeocl::ForExp' target = 'class_imperativeocl::ImperativeLoopExp'/>
    <edge id = 'TupleExp_extends_ImperativeExpression' source = 'class_imperativeocl::TupleExp' target = 'class_imperativeocl::ImperativeExpression'/>
    <edge id = 'Typedef_extends_Class' source = 'class_imperativeocl::Typedef' target = 'class_emof::Class'/>
    <edge id = 'InstantiationExp_extends_ImperativeExpression' source = 'class_imperativeocl::InstantiationExp' target = 'class_imperativeocl::ImperativeExpression'/>
    <edge id = 'DictionaryType_extends_CollectionType' source = 'class_imperativeocl::DictionaryType' target = 'class_essentialocl::CollectionType'/>
    <edge id = 'DictLiteralExp_extends_LiteralExp' source = 'class_imperativeocl::DictLiteralExp' target = 'class_essentialocl::LiteralExp'/>
    <edge id = 'DictLiteralPart_extends_Element' source = 'class_imperativeocl::DictLiteralPart' target = 'class_emof::Element'/>
    <edge id = 'TemplateParameterType_extends_Type' source = 'class_imperativeocl::TemplateParameterType' target = 'class_emof::Type'/>
    <edge id = 'LogExp_extends_ImperativeExpression' source = 'class_imperativeocl::LogExp' target = 'class_imperativeocl::ImperativeExpression'/>
    <edge id = 'AssertExp_extends_ImperativeExpression' source = 'class_imperativeocl::AssertExp' target = 'class_imperativeocl::ImperativeExpression'/>
    <edge id = 'CollectorExp_extends_ImperativeLoopExp' source = 'class_imperativeocl::CollectorExp' target = 'class_imperativeocl::ImperativeLoopExp'/>
    <edge id = 'UnpackExp_extends_ImperativeExpression' source = 'class_imperativeocl::UnpackExp' target = 'class_imperativeocl::ImperativeExpression'/>
    <edge id = 'ListType_extends_CollectionType' source = 'class_imperativeocl::ListType' target = 'class_essentialocl::CollectionType'/>
    <edge id = 'referenceEdge_ImperativeIterateExp2Variable' source = 'class_imperativeocl::ImperativeIterateExp' target = 'class_essentialocl::Variable'/>
    <edge id = 'referenceEdge_AssignExp2OclExpression' source = 'class_imperativeocl::AssignExp' target = 'class_essentialocl::OclExpression'/>
    <edge id = 'referenceEdge_BlockExp2OclExpression' source = 'class_imperativeocl::BlockExp' target = 'class_essentialocl::OclExpression'/>
    <edge id = 'referenceEdge_SwitchExp2AltExp' source = 'class_imperativeocl::SwitchExp' target = 'class_imperativeocl::AltExp'/>
    <edge id = 'referenceEdge_VariableInitExp2Variable' source = 'class_imperativeocl::VariableInitExp' target = 'class_essentialocl::Variable'/>
    <edge id = 'referenceEdge_WhileExp2OclExpression' source = 'class_imperativeocl::WhileExp' target = 'class_essentialocl::OclExpression'/>
    <edge id = 'referenceEdge_ComputeExp2Variable' source = 'class_imperativeocl::ComputeExp' target = 'class_essentialocl::Variable'/>
    <edge id = 'referenceEdge_UnlinkExp2OclExpression' source = 'class_imperativeocl::UnlinkExp' target = 'class_essentialocl::OclExpression'/>
    <edge id = 'referenceEdge_ReturnExp2OclExpression' source = 'class_imperativeocl::ReturnExp' target = 'class_essentialocl::OclExpression'/>
    <edge id = 'referenceEdge_TryExp2OclExpression' source = 'class_imperativeocl::TryExp' target = 'class_essentialocl::OclExpression'/>
    <edge id = 'referenceEdge_RaiseExp2Type' source = 'class_imperativeocl::RaiseExp' target = 'class_emof::Type'/>
    <edge id = 'referenceEdge_TupleExp2OclExpression' source = 'class_imperativeocl::TupleExp' target = 'class_essentialocl::OclExpression'/>
    <edge id = 'referenceEdge_Typedef2Type' source = 'class_imperativeocl::Typedef' target = 'class_emof::Type'/>
    <edge id = 'referenceEdge_DictionaryType2Type' source = 'class_imperativeocl::DictionaryType' target = 'class_emof::Type'/>
    <edge id = 'referenceEdge_DictLiteralExp2DictLiteralPart' source = 'class_imperativeocl::DictLiteralExp' target = 'class_imperativeocl::DictLiteralPart'/>
    <edge id = 'referenceEdge_LogExp2OclExpression' source = 'class_imperativeocl::LogExp' target = 'class_essentialocl::OclExpression'/>
    <edge id = 'referenceEdge_AssertExp2LogExp' source = 'class_imperativeocl::AssertExp' target = 'class_imperativeocl::LogExp'/>
    <edge id = 'referenceEdge_ImperativeLoopExp2OclExpression' source = 'class_imperativeocl::ImperativeLoopExp' target = 'class_essentialocl::OclExpression'/>
    <edge id = 'referenceEdge_CollectorExp2Variable' source = 'class_imperativeocl::CollectorExp' target = 'class_essentialocl::Variable'/>
    <edge id = 'referenceEdge_UnpackExp2Variable' source = 'class_imperativeocl::UnpackExp' target = 'class_essentialocl::Variable'/>
    <edge id = 'referenceEdge_AnonymousTupleType2Type' source = 'class_imperativeocl::AnonymousTupleType' target = 'class_emof::Type'/>
    <edge id = 'referenceEdge_AnonymousTupleLiteralExp2AnonymousTupleLiteralPart' source = 'class_imperativeocl::AnonymousTupleLiteralExp' target = 'class_imperativeocl::AnonymousTupleLiteralPart'/>
    <node id = 'class_imperativeocl::ImperativeIterateExp'>
      <data key = 'label'>class_imperativeocl::ImperativeIterateExp</data>
    </node>
    <node id = 'class_imperativeocl::AssignExp'>
      <data key = 'label'>class_imperativeocl::AssignExp</data>
    </node>
    <node id = 'class_imperativeocl::BlockExp'>
      <data key = 'label'>class_imperativeocl::BlockExp</data>
    </node>
    <node id = 'class_imperativeocl::SwitchExp'>
      <data key = 'label'>class_imperativeocl::SwitchExp</data>
    </node>
    <node id = 'class_imperativeocl::VariableInitExp'>
      <data key = 'label'>class_imperativeocl::VariableInitExp</data>
    </node>
    <node id = 'class_imperativeocl::WhileExp'>
      <data key = 'label'>class_imperativeocl::WhileExp</data>
    </node>
    <node id = 'class_imperativeocl::ComputeExp'>
      <data key = 'label'>class_imperativeocl::ComputeExp</data>
    </node>
    <node id = 'class_imperativeocl::AltExp'>
      <data key = 'label'>class_imperativeocl::AltExp</data>
    </node>
    <node id = 'class_imperativeocl::UnlinkExp'>
      <data key = 'label'>class_imperativeocl::UnlinkExp</data>
    </node>
    <node id = 'class_imperativeocl::ReturnExp'>
      <data key = 'label'>class_imperativeocl::ReturnExp</data>
    </node>
    <node id = 'class_imperativeocl::BreakExp'>
      <data key = 'label'>class_imperativeocl::BreakExp</data>
    </node>
    <node id = 'class_imperativeocl::TryExp'>
      <data key = 'label'>class_imperativeocl::TryExp</data>
    </node>
    <node id = 'class_imperativeocl::RaiseExp'>
      <data key = 'label'>class_imperativeocl::RaiseExp</data>
    </node>
    <node id = 'class_imperativeocl::ContinueExp'>
      <data key = 'label'>class_imperativeocl::ContinueExp</data>
    </node>
    <node id = 'class_imperativeocl::ForExp'>
      <data key = 'label'>class_imperativeocl::ForExp</data>
    </node>
    <node id = 'class_imperativeocl::TupleExp'>
      <data key = 'label'>class_imperativeocl::TupleExp</data>
    </node>
    <node id = 'class_imperativeocl::Typedef'>
      <data key = 'label'>class_imperativeocl::Typedef</data>
    </node>
    <node id = 'class_imperativeocl::InstantiationExp'>
      <data key = 'label'>class_imperativeocl::InstantiationExp</data>
    </node>
    <node id = 'class_imperativeocl::DictionaryType'>
      <data key = 'label'>class_imperativeocl::DictionaryType</data>
    </node>
    <node id = 'class_imperativeocl::DictLiteralExp'>
      <data key = 'label'>class_imperativeocl::DictLiteralExp</data>
    </node>
    <node id = 'class_imperativeocl::DictLiteralPart'>
      <data key = 'label'>class_imperativeocl::DictLiteralPart</data>
    </node>
    <node id = 'class_imperativeocl::TemplateParameterType'>
      <data key = 'label'>class_imperativeocl::TemplateParameterType</data>
    </node>
    <node id = 'class_imperativeocl::LogExp'>
      <data key = 'label'>class_imperativeocl::LogExp</data>
    </node>
    <node id = 'class_imperativeocl::AssertExp'>
      <data key = 'label'>class_imperativeocl::AssertExp</data>
    </node>
    <node id = 'enum_SeverityKind'>
      <data key = 'label'>enum_SeverityKind</data>
    </node>
    <node id = 'class_imperativeocl::ImperativeLoopExp'>
      <data key = 'label'>class_imperativeocl::ImperativeLoopExp</data>
    </node>
    <node id = 'class_imperativeocl::CollectorExp'>
      <data key = 'label'>class_imperativeocl::CollectorExp</data>
    </node>
    <node id = 'class_imperativeocl::ImperativeExpression'>
      <data key = 'label'>class_imperativeocl::ImperativeExpression</data>
    </node>
    <node id = 'class_imperativeocl::UnpackExp'>
      <data key = 'label'>class_imperativeocl::UnpackExp</data>
    </node>
    <node id = 'class_imperativeocl::AnonymousTupleType'>
      <data key = 'label'>class_imperativeocl::AnonymousTupleType</data>
    </node>
    <node id = 'class_imperativeocl::AnonymousTupleLiteralExp'>
      <data key = 'label'>class_imperativeocl::AnonymousTupleLiteralExp</data>
    </node>
    <node id = 'class_imperativeocl::AnonymousTupleLiteralPart'>
      <data key = 'label'>class_imperativeocl::AnonymousTupleLiteralPart</data>
    </node>
    <node id = 'class_imperativeocl::ListType'>
      <data key = 'label'>class_imperativeocl::ListType</data>
    </node>
    <node id = 'package_imperativeocl'>
      <data key = 'label'>package_imperativeocl</data>
    </node>
  </graph>
  <graph id = 'emofGraph' edgedefault = 'undirected'>
    <edge id = 'AnonymousTupleType_extends_Class' source = 'class_imperativeocl::AnonymousTupleType' target = 'class_emof::Class'/>
    <edge id = 'DataType_extends_Type' source = 'class_emof::DataType' target = 'class_emof::Type'/>
    <edge id = 'AnonymousTupleLiteralPart_extends_Element' source = 'class_imperativeocl::AnonymousTupleLiteralPart' target = 'class_emof::Element'/>
    <edge id = 'Tag_extends_Element' source = 'class_emof::Tag' target = 'class_emof::Element'/>
    <edge id = 'Enumeration_extends_DataType' source = 'class_emof::Enumeration' target = 'class_emof::DataType'/>
    <edge id = 'NamedElement_extends_Element' source = 'class_emof::NamedElement' target = 'class_emof::Element'/>
    <edge id = 'Extent_extends_Object' source = 'class_emof::Extent' target = 'class_emof::Object'/>
    <edge id = 'Operation_extends_MultiplicityElement' source = 'class_emof::Operation' target = 'class_emof::MultiplicityElement'/>
    <edge id = 'Package_extends_NamedElement' source = 'class_emof::Package' target = 'class_emof::NamedElement'/>
    <edge id = 'Parameter_extends_MultiplicityElement' source = 'class_emof::Parameter' target = 'class_emof::MultiplicityElement'/>
    <edge id = 'EnumerationLiteral_extends_NamedElement' source = 'class_emof::EnumerationLiteral' target = 'class_emof::NamedElement'/>
    <edge id = 'Property_extends_MultiplicityElement' source = 'class_emof::Property' target = 'class_emof::MultiplicityElement'/>
    <edge id = 'TypedElement_extends_NamedElement' source = 'class_emof::TypedElement' target = 'class_emof::NamedElement'/>
    <edge id = 'PrimitiveType_extends_DataType' source = 'class_emof::PrimitiveType' target = 'class_emof::DataType'/>
    <edge id = 'URIExtent_extends_Extent' source = 'class_emof::URIExtent' target = 'class_emof::Extent'/>
    <edge id = 'Comment_extends_Element' source = 'class_emof::Comment' target = 'class_emof::Element'/>
    <edge id = 'referenceEdge_InstantiationExp2Class' source = 'class_imperativeocl::InstantiationExp' target = 'class_emof::Class'/>
    <edge id = 'referenceEdge_Element2Tag' source = 'class_emof::Element' target = 'class_emof::Tag'/>
    <edge id = 'referenceEdge_Enumeration2EnumerationLiteral' source = 'class_emof::Enumeration' target = 'class_emof::EnumerationLiteral'/>
    <edge id = 'referenceEdge_Operation2Class' source = 'class_emof::Operation' target = 'class_emof::Class'/>
    <edge id = 'referenceEdge_Package2Type' source = 'class_emof::Package' target = 'class_emof::Type'/>
    <edge id = 'referenceEdge_Parameter2Operation' source = 'class_emof::Parameter' target = 'class_emof::Operation'/>
    <edge id = 'referenceEdge_Property2Class' source = 'class_emof::Property' target = 'class_emof::Class'/>
    <edge id = 'referenceEdge_TypedElement2Type' source = 'class_emof::TypedElement' target = 'class_emof::Type'/>
    <edge id = 'referenceEdge_Comment2NamedElement' source = 'class_emof::Comment' target = 'class_emof::NamedElement'/>
    <node id = 'class_emof::Class'>
      <data key = 'label'>class_emof::Class</data>
    </node>
    <node id = 'class_emof::DataType'>
      <data key = 'label'>class_emof::DataType</data>
    </node>
    <node id = 'class_emof::Element'>
      <data key = 'label'>class_emof::Element</data>
    </node>
    <node id = 'class_emof::Tag'>
      <data key = 'label'>class_emof::Tag</data>
    </node>
    <node id = 'class_emof::Enumeration'>
      <data key = 'label'>class_emof::Enumeration</data>
    </node>
    <node id = 'class_emof::NamedElement'>
      <data key = 'label'>class_emof::NamedElement</data>
    </node>
    <node id = 'class_emof::Extent'>
      <data key = 'label'>class_emof::Extent</data>
    </node>
    <node id = 'class_emof::Object'>
      <data key = 'label'>class_emof::Object</data>
    </node>
    <node id = 'class_emof::Operation'>
      <data key = 'label'>class_emof::Operation</data>
    </node>
    <node id = 'class_emof::MultiplicityElement'>
      <data key = 'label'>class_emof::MultiplicityElement</data>
    </node>
    <node id = 'class_emof::Package'>
      <data key = 'label'>class_emof::Package</data>
    </node>
    <node id = 'class_emof::Type'>
      <data key = 'label'>class_emof::Type</data>
    </node>
    <node id = 'class_emof::Parameter'>
      <data key = 'label'>class_emof::Parameter</data>
    </node>
    <node id = 'class_emof::EnumerationLiteral'>
      <data key = 'label'>class_emof::EnumerationLiteral</data>
    </node>
    <node id = 'class_emof::Property'>
      <data key = 'label'>class_emof::Property</data>
    </node>
    <node id = 'class_emof::TypedElement'>
      <data key = 'label'>class_emof::TypedElement</data>
    </node>
    <node id = 'class_emof::PrimitiveType'>
      <data key = 'label'>class_emof::PrimitiveType</data>
    </node>
    <node id = 'class_emof::URIExtent'>
      <data key = 'label'>class_emof::URIExtent</data>
    </node>
    <node id = 'dataType_Boolean'>
      <data key = 'label'>dataType_Boolean</data>
    </node>
    <node id = 'dataType_String'>
      <data key = 'label'>dataType_String</data>
    </node>
    <node id = 'dataType_UnlimitedNatural'>
      <data key = 'label'>dataType_UnlimitedNatural</data>
    </node>
    <node id = 'dataType_Integer'>
      <data key = 'label'>dataType_Integer</data>
    </node>
    <node id = 'dataType_Real'>
      <data key = 'label'>dataType_Real</data>
    </node>
    <node id = 'class_emof::Comment'>
      <data key = 'label'>class_emof::Comment</data>
    </node>
    <node id = 'package_emof'>
      <data key = 'label'>package_emof</data>
    </node>
  </graph>
  <graph id = 'qvtoperationalGraph' edgedefault = 'undirected'>
    <edge id = 'MappingBody_extends_OperationBody' source = 'class_qvtoperational::MappingBody' target = 'class_qvtoperational::OperationBody'/>
    <edge id = 'Helper_extends_ImperativeOperation' source = 'class_qvtoperational::Helper' target = 'class_qvtoperational::ImperativeOperation'/>
    <edge id = 'ResolveInExp_extends_ResolveExp' source = 'class_qvtoperational::ResolveInExp' target = 'class_qvtoperational::ResolveExp'/>
    <edge id = 'OperationalTransformation_extends_Module' source = 'class_qvtoperational::OperationalTransformation' target = 'class_qvtoperational::Module'/>
    <edge id = 'MappingParameter_extends_VarParameter' source = 'class_qvtoperational::MappingParameter' target = 'class_qvtoperational::VarParameter'/>
    <edge id = 'MappingOperation_extends_ImperativeOperation' source = 'class_qvtoperational::MappingOperation' target = 'class_qvtoperational::ImperativeOperation'/>
    <edge id = 'MappingCallExp_extends_ImperativeCallExp' source = 'class_qvtoperational::MappingCallExp' target = 'class_qvtoperational::ImperativeCallExp'/>
    <edge id = 'Constructor_extends_ImperativeOperation' source = 'class_qvtoperational::Constructor' target = 'class_qvtoperational::ImperativeOperation'/>
    <edge id = 'ContextualProperty_extends_Property' source = 'class_qvtoperational::ContextualProperty' target = 'class_emof::Property'/>
    <edge id = 'EntryOperation_extends_ImperativeOperation' source = 'class_qvtoperational::EntryOperation' target = 'class_qvtoperational::ImperativeOperation'/>
    <edge id = 'Library_extends_Module' source = 'class_qvtoperational::Library' target = 'class_qvtoperational::Module'/>
    <edge id = 'ModelParameter_extends_VarParameter' source = 'class_qvtoperational::ModelParameter' target = 'class_qvtoperational::VarParameter'/>
    <edge id = 'ModelType_extends_Class' source = 'class_qvtoperational::ModelType' target = 'class_emof::Class'/>
    <edge id = 'ModuleImport_extends_Element' source = 'class_qvtoperational::ModuleImport' target = 'class_emof::Element'/>
    <edge id = 'ConstructorBody_extends_OperationBody' source = 'class_qvtoperational::ConstructorBody' target = 'class_qvtoperational::OperationBody'/>
    <edge id = 'ObjectExp_extends_InstantiationExp' source = 'class_qvtoperational::ObjectExp' target = 'class_imperativeocl::InstantiationExp'/>
    <edge id = 'referenceEdge_MappingBody2OclExpression' source = 'class_qvtoperational::MappingBody' target = 'class_essentialocl::OclExpression'/>
    <edge id = 'referenceEdge_ResolveExp2OclExpression' source = 'class_qvtoperational::ResolveExp' target = 'class_essentialocl::OclExpression'/>
    <edge id = 'referenceEdge_ResolveInExp2MappingOperation' source = 'class_qvtoperational::ResolveInExp' target = 'class_qvtoperational::MappingOperation'/>
    <edge id = 'referenceEdge_OperationalTransformation2Class' source = 'class_qvtoperational::OperationalTransformation' target = 'class_emof::Class'/>
    <edge id = 'referenceEdge_ContextualProperty2Class' source = 'class_qvtoperational::ContextualProperty' target = 'class_emof::Class'/>
    <edge id = 'referenceEdge_ImperativeOperation2VarParameter' source = 'class_qvtoperational::ImperativeOperation' target = 'class_qvtoperational::VarParameter'/>
    <edge id = 'referenceEdge_ModelType2Package' source = 'class_qvtoperational::ModelType' target = 'class_emof::Package'/>
    <edge id = 'referenceEdge_Module2Tag' source = 'class_qvtoperational::Module' target = 'class_emof::Tag'/>
    <edge id = 'referenceEdge_ModuleImport2ModelType' source = 'class_qvtoperational::ModuleImport' target = 'class_qvtoperational::ModelType'/>
    <edge id = 'referenceEdge_OperationBody2ImperativeOperation' source = 'class_qvtoperational::OperationBody' target = 'class_qvtoperational::ImperativeOperation'/>
    <edge id = 'referenceEdge_ObjectExp2Variable' source = 'class_qvtoperational::ObjectExp' target = 'class_essentialocl::Variable'/>
    <node id = 'class_qvtoperational::MappingBody'>
      <data key = 'label'>class_qvtoperational::MappingBody</data>
    </node>
    <node id = 'class_qvtoperational::Helper'>
      <data key = 'label'>class_qvtoperational::Helper</data>
    </node>
    <node id = 'class_qvtoperational::ResolveExp'>
      <data key = 'label'>class_qvtoperational::ResolveExp</data>
    </node>
    <node id = 'class_qvtoperational::ResolveInExp'>
      <data key = 'label'>class_qvtoperational::ResolveInExp</data>
    </node>
    <node id = 'class_qvtoperational::OperationalTransformation'>
      <data key = 'label'>class_qvtoperational::OperationalTransformation</data>
    </node>
    <node id = 'class_qvtoperational::MappingParameter'>
      <data key = 'label'>class_qvtoperational::MappingParameter</data>
    </node>
    <node id = 'class_qvtoperational::MappingOperation'>
      <data key = 'label'>class_qvtoperational::MappingOperation</data>
    </node>
    <node id = 'class_qvtoperational::MappingCallExp'>
      <data key = 'label'>class_qvtoperational::MappingCallExp</data>
    </node>
    <node id = 'class_qvtoperational::Constructor'>
      <data key = 'label'>class_qvtoperational::Constructor</data>
    </node>
    <node id = 'class_qvtoperational::ContextualProperty'>
      <data key = 'label'>class_qvtoperational::ContextualProperty</data>
    </node>
    <node id = 'class_qvtoperational::EntryOperation'>
      <data key = 'label'>class_qvtoperational::EntryOperation</data>
    </node>
    <node id = 'class_qvtoperational::ImperativeCallExp'>
      <data key = 'label'>class_qvtoperational::ImperativeCallExp</data>
    </node>
    <node id = 'class_qvtoperational::ImperativeOperation'>
      <data key = 'label'>class_qvtoperational::ImperativeOperation</data>
    </node>
    <node id = 'enum_DirectionKind'>
      <data key = 'label'>enum_DirectionKind</data>
    </node>
    <node id = 'class_qvtoperational::Library'>
      <data key = 'label'>class_qvtoperational::Library</data>
    </node>
    <node id = 'class_qvtoperational::ModelParameter'>
      <data key = 'label'>class_qvtoperational::ModelParameter</data>
    </node>
    <node id = 'class_qvtoperational::ModelType'>
      <data key = 'label'>class_qvtoperational::ModelType</data>
    </node>
    <node id = 'class_qvtoperational::Module'>
      <data key = 'label'>class_qvtoperational::Module</data>
    </node>
    <node id = 'class_qvtoperational::ModuleImport'>
      <data key = 'label'>class_qvtoperational::ModuleImport</data>
    </node>
    <node id = 'enum_ImportKind'>
      <data key = 'label'>enum_ImportKind</data>
    </node>
    <node id = 'class_qvtoperational::VarParameter'>
      <data key = 'label'>class_qvtoperational::VarParameter</data>
    </node>
    <node id = 'class_qvtoperational::OperationBody'>
      <data key = 'label'>class_qvtoperational::OperationBody</data>
    </node>
    <node id = 'class_qvtoperational::ConstructorBody'>
      <data key = 'label'>class_qvtoperational::ConstructorBody</data>
    </node>
    <node id = 'class_qvtoperational::ObjectExp'>
      <data key = 'label'>class_qvtoperational::ObjectExp</data>
    </node>
    <node id = 'package_qvtoperational'>
      <data key = 'label'>package_qvtoperational</data>
    </node>
  </graph>
  <graph id = 'qvtcoreGraph' edgedefault = 'undirected'>
    <edge id = 'BottomPattern_extends_CorePattern' source = 'class_qvtcore::BottomPattern' target = 'class_qvtcore::CorePattern'/>
    <edge id = 'GuardPattern_extends_CorePattern' source = 'class_qvtcore::GuardPattern' target = 'class_qvtcore::CorePattern'/>
    <edge id = 'referenceEdge_Area2GuardPattern' source = 'class_qvtcore::Area' target = 'class_qvtcore::GuardPattern'/>
    <edge id = 'referenceEdge_Assignment2BottomPattern' source = 'class_qvtcore::Assignment' target = 'class_qvtcore::BottomPattern'/>
    <edge id = 'referenceEdge_Mapping2Mapping' source = 'class_qvtcore::Mapping' target = 'class_qvtcore::Mapping'/>
    <edge id = 'referenceEdge_EnforcementOperation2BottomPattern' source = 'class_qvtcore::EnforcementOperation' target = 'class_qvtcore::BottomPattern'/>
    <node id = 'class_qvtcore::Area'>
      <data key = 'label'>class_qvtcore::Area</data>
    </node>
    <node id = 'class_qvtcore::Assignment'>
      <data key = 'label'>class_qvtcore::Assignment</data>
    </node>
    <node id = 'class_qvtcore::BottomPattern'>
      <data key = 'label'>class_qvtcore::BottomPattern</data>
    </node>
    <node id = 'class_qvtcore::GuardPattern'>
      <data key = 'label'>class_qvtcore::GuardPattern</data>
    </node>
    <node id = 'class_qvtcore::Mapping'>
      <data key = 'label'>class_qvtcore::Mapping</data>
    </node>
    <node id = 'class_qvtcore::RealizedVariable'>
      <data key = 'label'>class_qvtcore::RealizedVariable</data>
    </node>
    <node id = 'class_qvtcore::CoreDomain'>
      <data key = 'label'>class_qvtcore::CoreDomain</data>
    </node>
    <node id = 'class_qvtcore::CorePattern'>
      <data key = 'label'>class_qvtcore::CorePattern</data>
    </node>
    <node id = 'class_qvtcore::EnforcementOperation'>
      <data key = 'label'>class_qvtcore::EnforcementOperation</data>
    </node>
    <node id = 'enum_EnforcementMode'>
      <data key = 'label'>enum_EnforcementMode</data>
    </node>
    <node id = 'package_qvtcore'>
      <data key = 'label'>package_qvtcore</data>
    </node>
  </graph>
  <graph id = 'qvtbaseGraph' edgedefault = 'undirected'>
    <edge id = 'CoreDomain_extends_Domain' source = 'class_qvtcore::CoreDomain' target = 'class_qvtbase::Domain'/>
    <edge id = 'Transformation_extends_Class' source = 'class_qvtbase::Transformation' target = 'class_emof::Class'/>
    <edge id = 'TypedModel_extends_NamedElement' source = 'class_qvtbase::TypedModel' target = 'class_emof::NamedElement'/>
    <edge id = 'Mapping_extends_Rule' source = 'class_qvtcore::Mapping' target = 'class_qvtbase::Rule'/>
    <edge id = 'Pattern_extends_Element' source = 'class_qvtbase::Pattern' target = 'class_emof::Element'/>
    <edge id = 'Predicate_extends_Element' source = 'class_qvtbase::Predicate' target = 'class_emof::Element'/>
    <edge id = 'Function_extends_Operation' source = 'class_qvtbase::Function' target = 'class_emof::Operation'/>
    <edge id = 'FunctionParameter_extends_Parameter' source = 'class_qvtbase::FunctionParameter' target = 'class_emof::Parameter'/>
    <edge id = 'referenceEdge_Domain2Rule' source = 'class_qvtbase::Domain' target = 'class_qvtbase::Rule'/>
    <edge id = 'referenceEdge_Transformation2Tag' source = 'class_qvtbase::Transformation' target = 'class_emof::Tag'/>
    <edge id = 'referenceEdge_TypedModel2Transformation' source = 'class_qvtbase::TypedModel' target = 'class_qvtbase::Transformation'/>
    <edge id = 'referenceEdge_Pattern2Predicate' source = 'class_qvtbase::Pattern' target = 'class_qvtbase::Predicate'/>
    <edge id = 'referenceEdge_Function2OclExpression' source = 'class_qvtbase::Function' target = 'class_essentialocl::OclExpression'/>
    <node id = 'class_qvtbase::Domain'>
      <data key = 'label'>class_qvtbase::Domain</data>
    </node>
    <node id = 'class_qvtbase::Transformation'>
      <data key = 'label'>class_qvtbase::Transformation</data>
    </node>
    <node id = 'class_qvtbase::TypedModel'>
      <data key = 'label'>class_qvtbase::TypedModel</data>
    </node>
    <node id = 'class_qvtbase::Rule'>
      <data key = 'label'>class_qvtbase::Rule</data>
    </node>
    <node id = 'class_qvtbase::Pattern'>
      <data key = 'label'>class_qvtbase::Pattern</data>
    </node>
    <node id = 'class_qvtbase::Predicate'>
      <data key = 'label'>class_qvtbase::Predicate</data>
    </node>
    <node id = 'class_qvtbase::Function'>
      <data key = 'label'>class_qvtbase::Function</data>
    </node>
    <node id = 'class_qvtbase::FunctionParameter'>
      <data key = 'label'>class_qvtbase::FunctionParameter</data>
    </node>
    <node id = 'package_qvtbase'>
      <data key = 'label'>package_qvtbase</data>
    </node>
  </graph>
  <graph id = 'qvtrelationGraph' edgedefault = 'undirected'>
    <edge id = 'RelationalTransformation_extends_Transformation' source = 'class_qvtrelation::RelationalTransformation' target = 'class_qvtbase::Transformation'/>
    <edge id = 'Relation_extends_Rule' source = 'class_qvtrelation::Relation' target = 'class_qvtbase::Rule'/>
    <edge id = 'RelationDomain_extends_Domain' source = 'class_qvtrelation::RelationDomain' target = 'class_qvtbase::Domain'/>
    <edge id = 'DomainPattern_extends_Pattern' source = 'class_qvtrelation::DomainPattern' target = 'class_qvtbase::Pattern'/>
    <edge id = 'RelationImplementation_extends_Element' source = 'class_qvtrelation::RelationImplementation' target = 'class_emof::Element'/>
    <edge id = 'Key_extends_Element' source = 'class_qvtrelation::Key' target = 'class_emof::Element'/>
    <edge id = 'referenceEdge_RelationalTransformation2Key' source = 'class_qvtrelation::RelationalTransformation' target = 'class_qvtrelation::Key'/>
    <edge id = 'referenceEdge_MappingParameter2RelationDomain' source = 'class_qvtoperational::MappingParameter' target = 'class_qvtrelation::RelationDomain'/>
    <edge id = 'referenceEdge_DomainPattern2TemplateExp' source = 'class_qvtrelation::DomainPattern' target = 'class_qvttemplate::TemplateExp'/>
    <edge id = 'referenceEdge_RelationImplementation2Relation' source = 'class_qvtrelation::RelationImplementation' target = 'class_qvtrelation::Relation'/>
    <node id = 'class_qvtrelation::RelationalTransformation'>
      <data key = 'label'>class_qvtrelation::RelationalTransformation</data>
    </node>
    <node id = 'class_qvtrelation::Relation'>
      <data key = 'label'>class_qvtrelation::Relation</data>
    </node>
    <node id = 'class_qvtrelation::RelationDomain'>
      <data key = 'label'>class_qvtrelation::RelationDomain</data>
    </node>
    <node id = 'class_qvtrelation::DomainPattern'>
      <data key = 'label'>class_qvtrelation::DomainPattern</data>
    </node>
    <node id = 'class_qvtrelation::RelationImplementation'>
      <data key = 'label'>class_qvtrelation::RelationImplementation</data>
    </node>
    <node id = 'class_qvtrelation::Key'>
      <data key = 'label'>class_qvtrelation::Key</data>
    </node>
    <node id = 'package_qvtrelation'>
      <data key = 'label'>package_qvtrelation</data>
    </node>
  </graph>
  <graph id = 'essentialoclGraph' edgedefault = 'undirected'>
    <edge id = 'BooleanLiteralExp_extends_PrimitiveLiteralExp' source = 'class_essentialocl::BooleanLiteralExp' target = 'class_essentialocl::PrimitiveLiteralExp'/>
    <edge id = 'ResolveExp_extends_CallExp' source = 'class_qvtoperational::ResolveExp' target = 'class_essentialocl::CallExp'/>
    <edge id = 'OclExpression_extends_TypedElement' source = 'class_essentialocl::OclExpression' target = 'class_emof::TypedElement'/>
    <edge id = 'UnlimitedNaturalExp_extends_NumericLiteralExp' source = 'class_essentialocl::UnlimitedNaturalExp' target = 'class_essentialocl::NumericLiteralExp'/>
    <edge id = 'IfExp_extends_OclExpression' source = 'class_essentialocl::IfExp' target = 'class_essentialocl::OclExpression'/>
    <edge id = 'LetExp_extends_OclExpression' source = 'class_essentialocl::LetExp' target = 'class_essentialocl::OclExpression'/>
    <edge id = 'RealizedVariable_extends_Variable' source = 'class_qvtcore::RealizedVariable' target = 'class_essentialocl::Variable'/>
    <edge id = 'PropertyCallExp_extends_FeaturePropertyCall' source = 'class_essentialocl::PropertyCallExp' target = 'class_essentialocl::FeaturePropertyCall'/>
    <edge id = 'VariableExp_extends_OclExpression' source = 'class_essentialocl::VariableExp' target = 'class_essentialocl::OclExpression'/>
    <edge id = 'TypeExp_extends_OclExpression' source = 'class_essentialocl::TypeExp' target = 'class_essentialocl::OclExpression'/>
    <edge id = 'LoopExp_extends_CallExp' source = 'class_essentialocl::LoopExp' target = 'class_essentialocl::CallExp'/>
    <edge id = 'IteratorExp_extends_LoopExp' source = 'class_essentialocl::IteratorExp' target = 'class_essentialocl::LoopExp'/>
    <edge id = 'StringLiteralExp_extends_PrimitiveLiteralExp' source = 'class_essentialocl::StringLiteralExp' target = 'class_essentialocl::PrimitiveLiteralExp'/>
    <edge id = 'IntegerLiteralExp_extends_NumericLiteralExp' source = 'class_essentialocl::IntegerLiteralExp' target = 'class_essentialocl::NumericLiteralExp'/>
    <edge id = 'OperationCallExp_extends_FeaturePropertyCall' source = 'class_essentialocl::OperationCallExp' target = 'class_essentialocl::FeaturePropertyCall'/>
    <edge id = 'RealLiteralExp_extends_NumericLiteralExp' source = 'class_essentialocl::RealLiteralExp' target = 'class_essentialocl::NumericLiteralExp'/>
    <edge id = 'AnonymousTupleLiteralExp_extends_LiteralExp' source = 'class_imperativeocl::AnonymousTupleLiteralExp' target = 'class_essentialocl::LiteralExp'/>
    <edge id = 'IterateExp_extends_LoopExp' source = 'class_essentialocl::IterateExp' target = 'class_essentialocl::LoopExp'/>
    <edge id = 'CollectionLiteralExp_extends_LiteralExp' source = 'class_essentialocl::CollectionLiteralExp' target = 'class_essentialocl::LiteralExp'/>
    <edge id = 'CollectionLiteralPart_extends_TypedElement' source = 'class_essentialocl::CollectionLiteralPart' target = 'class_emof::TypedElement'/>
    <edge id = 'CollectionItem_extends_CollectionLiteralPart' source = 'class_essentialocl::CollectionItem' target = 'class_essentialocl::CollectionLiteralPart'/>
    <edge id = 'CollectionRange_extends_CollectionLiteralPart' source = 'class_essentialocl::CollectionRange' target = 'class_essentialocl::CollectionLiteralPart'/>
    <edge id = 'TupleLiteralExp_extends_LiteralExp' source = 'class_essentialocl::TupleLiteralExp' target = 'class_essentialocl::LiteralExp'/>
    <edge id = 'NullLiteralExp_extends_LiteralExp' source = 'class_essentialocl::NullLiteralExp' target = 'class_essentialocl::LiteralExp'/>
    <edge id = 'ExpressionInOcl_extends_OpaqueExpression' source = 'class_essentialocl::ExpressionInOcl' target = 'class_essentialocl::OpaqueExpression'/>
    <edge id = 'InvalidLiteralExp_extends_LiteralExp' source = 'class_essentialocl::InvalidLiteralExp' target = 'class_essentialocl::LiteralExp'/>
    <edge id = 'TupleLiteralPart_extends_TypedElement' source = 'class_essentialocl::TupleLiteralPart' target = 'class_emof::TypedElement'/>
    <edge id = 'BagType_extends_CollectionType' source = 'class_essentialocl::BagType' target = 'class_essentialocl::CollectionType'/>
    <edge id = 'EnumLiteralExp_extends_LiteralExp' source = 'class_essentialocl::EnumLiteralExp' target = 'class_essentialocl::LiteralExp'/>
    <edge id = 'InvalidType_extends_Type' source = 'class_essentialocl::InvalidType' target = 'class_emof::Type'/>
    <edge id = 'OrderedSetType_extends_CollectionType' source = 'class_essentialocl::OrderedSetType' target = 'class_essentialocl::CollectionType'/>
    <edge id = 'SequenceType_extends_CollectionType' source = 'class_essentialocl::SequenceType' target = 'class_essentialocl::CollectionType'/>
    <edge id = 'SetType_extends_CollectionType' source = 'class_essentialocl::SetType' target = 'class_essentialocl::CollectionType'/>
    <edge id = 'TupleType_extends_Class' source = 'class_essentialocl::TupleType' target = 'class_emof::Class'/>
    <edge id = 'VoidType_extends_Type' source = 'class_essentialocl::VoidType' target = 'class_emof::Type'/>
    <edge id = 'AnyType_extends_Class' source = 'class_essentialocl::AnyType' target = 'class_emof::Class'/>
    <edge id = 'referenceEdge_CallExp2OclExpression' source = 'class_essentialocl::CallExp' target = 'class_essentialocl::OclExpression'/>
    <edge id = 'referenceEdge_IfExp2OclExpression' source = 'class_essentialocl::IfExp' target = 'class_essentialocl::OclExpression'/>
    <edge id = 'referenceEdge_LetExp2OclExpression' source = 'class_essentialocl::LetExp' target = 'class_essentialocl::OclExpression'/>
    <edge id = 'referenceEdge_Relation2Variable' source = 'class_qvtrelation::Relation' target = 'class_essentialocl::Variable'/>
    <edge id = 'referenceEdge_PropertyCallExp2Property' source = 'class_essentialocl::PropertyCallExp' target = 'class_emof::Property'/>
    <edge id = 'referenceEdge_VariableExp2Variable' source = 'class_essentialocl::VariableExp' target = 'class_essentialocl::Variable'/>
    <edge id = 'referenceEdge_TypeExp2Type' source = 'class_essentialocl::TypeExp' target = 'class_emof::Type'/>
    <edge id = 'referenceEdge_LoopExp2OclExpression' source = 'class_essentialocl::LoopExp' target = 'class_essentialocl::OclExpression'/>
    <edge id = 'referenceEdge_OperationCallExp2OclExpression' source = 'class_essentialocl::OperationCallExp' target = 'class_essentialocl::OclExpression'/>
    <edge id = 'referenceEdge_IterateExp2Variable' source = 'class_essentialocl::IterateExp' target = 'class_essentialocl::Variable'/>
    <edge id = 'referenceEdge_CollectionLiteralExp2CollectionLiteralPart' source = 'class_essentialocl::CollectionLiteralExp' target = 'class_essentialocl::CollectionLiteralPart'/>
    <edge id = 'referenceEdge_CollectionItem2OclExpression' source = 'class_essentialocl::CollectionItem' target = 'class_essentialocl::OclExpression'/>
    <edge id = 'referenceEdge_CollectionRange2OclExpression' source = 'class_essentialocl::CollectionRange' target = 'class_essentialocl::OclExpression'/>
    <edge id = 'referenceEdge_TupleLiteralExp2TupleLiteralPart' source = 'class_essentialocl::TupleLiteralExp' target = 'class_essentialocl::TupleLiteralPart'/>
    <edge id = 'referenceEdge_ExpressionInOcl2OclExpression' source = 'class_essentialocl::ExpressionInOcl' target = 'class_essentialocl::OclExpression'/>
    <edge id = 'referenceEdge_CollectionType2Type' source = 'class_essentialocl::CollectionType' target = 'class_emof::Type'/>
    <edge id = 'referenceEdge_EnumLiteralExp2EnumerationLiteral' source = 'class_essentialocl::EnumLiteralExp' target = 'class_emof::EnumerationLiteral'/>
    <node id = 'class_essentialocl::BooleanLiteralExp'>
      <data key = 'label'>class_essentialocl::BooleanLiteralExp</data>
    </node>
    <node id = 'class_essentialocl::CallExp'>
      <data key = 'label'>class_essentialocl::CallExp</data>
    </node>
    <node id = 'enum_CollectionKind'>
      <data key = 'label'>enum_CollectionKind</data>
    </node>
    <node id = 'class_essentialocl::OclExpression'>
      <data key = 'label'>class_essentialocl::OclExpression</data>
    </node>
    <node id = 'class_essentialocl::UnlimitedNaturalExp'>
      <data key = 'label'>class_essentialocl::UnlimitedNaturalExp</data>
    </node>
    <node id = 'class_essentialocl::IfExp'>
      <data key = 'label'>class_essentialocl::IfExp</data>
    </node>
    <node id = 'class_essentialocl::LetExp'>
      <data key = 'label'>class_essentialocl::LetExp</data>
    </node>
    <node id = 'class_essentialocl::Variable'>
      <data key = 'label'>class_essentialocl::Variable</data>
    </node>
    <node id = 'class_essentialocl::PropertyCallExp'>
      <data key = 'label'>class_essentialocl::PropertyCallExp</data>
    </node>
    <node id = 'class_essentialocl::VariableExp'>
      <data key = 'label'>class_essentialocl::VariableExp</data>
    </node>
    <node id = 'class_essentialocl::TypeExp'>
      <data key = 'label'>class_essentialocl::TypeExp</data>
    </node>
    <node id = 'class_essentialocl::LoopExp'>
      <data key = 'label'>class_essentialocl::LoopExp</data>
    </node>
    <node id = 'class_essentialocl::IteratorExp'>
      <data key = 'label'>class_essentialocl::IteratorExp</data>
    </node>
    <node id = 'class_essentialocl::StringLiteralExp'>
      <data key = 'label'>class_essentialocl::StringLiteralExp</data>
    </node>
    <node id = 'class_essentialocl::IntegerLiteralExp'>
      <data key = 'label'>class_essentialocl::IntegerLiteralExp</data>
    </node>
    <node id = 'class_essentialocl::OperationCallExp'>
      <data key = 'label'>class_essentialocl::OperationCallExp</data>
    </node>
    <node id = 'class_essentialocl::RealLiteralExp'>
      <data key = 'label'>class_essentialocl::RealLiteralExp</data>
    </node>
    <node id = 'class_essentialocl::LiteralExp'>
      <data key = 'label'>class_essentialocl::LiteralExp</data>
    </node>
    <node id = 'class_essentialocl::IterateExp'>
      <data key = 'label'>class_essentialocl::IterateExp</data>
    </node>
    <node id = 'class_essentialocl::PrimitiveLiteralExp'>
      <data key = 'label'>class_essentialocl::PrimitiveLiteralExp</data>
    </node>
    <node id = 'class_essentialocl::NumericLiteralExp'>
      <data key = 'label'>class_essentialocl::NumericLiteralExp</data>
    </node>
    <node id = 'class_essentialocl::CollectionLiteralExp'>
      <data key = 'label'>class_essentialocl::CollectionLiteralExp</data>
    </node>
    <node id = 'class_essentialocl::CollectionLiteralPart'>
      <data key = 'label'>class_essentialocl::CollectionLiteralPart</data>
    </node>
    <node id = 'class_essentialocl::CollectionItem'>
      <data key = 'label'>class_essentialocl::CollectionItem</data>
    </node>
    <node id = 'class_essentialocl::CollectionRange'>
      <data key = 'label'>class_essentialocl::CollectionRange</data>
    </node>
    <node id = 'class_essentialocl::TupleLiteralExp'>
      <data key = 'label'>class_essentialocl::TupleLiteralExp</data>
    </node>
    <node id = 'class_essentialocl::NullLiteralExp'>
      <data key = 'label'>class_essentialocl::NullLiteralExp</data>
    </node>
    <node id = 'class_essentialocl::ExpressionInOcl'>
      <data key = 'label'>class_essentialocl::ExpressionInOcl</data>
    </node>
    <node id = 'class_essentialocl::OpaqueExpression'>
      <data key = 'label'>class_essentialocl::OpaqueExpression</data>
    </node>
    <node id = 'class_essentialocl::InvalidLiteralExp'>
      <data key = 'label'>class_essentialocl::InvalidLiteralExp</data>
    </node>
    <node id = 'class_essentialocl::FeaturePropertyCall'>
      <data key = 'label'>class_essentialocl::FeaturePropertyCall</data>
    </node>
    <node id = 'class_essentialocl::TupleLiteralPart'>
      <data key = 'label'>class_essentialocl::TupleLiteralPart</data>
    </node>
    <node id = 'class_essentialocl::BagType'>
      <data key = 'label'>class_essentialocl::BagType</data>
    </node>
    <node id = 'class_essentialocl::CollectionType'>
      <data key = 'label'>class_essentialocl::CollectionType</data>
    </node>
    <node id = 'class_essentialocl::EnumLiteralExp'>
      <data key = 'label'>class_essentialocl::EnumLiteralExp</data>
    </node>
    <node id = 'class_essentialocl::InvalidType'>
      <data key = 'label'>class_essentialocl::InvalidType</data>
    </node>
    <node id = 'class_essentialocl::OrderedSetType'>
      <data key = 'label'>class_essentialocl::OrderedSetType</data>
    </node>
    <node id = 'class_essentialocl::SequenceType'>
      <data key = 'label'>class_essentialocl::SequenceType</data>
    </node>
    <node id = 'class_essentialocl::SetType'>
      <data key = 'label'>class_essentialocl::SetType</data>
    </node>
    <node id = 'class_essentialocl::TupleType'>
      <data key = 'label'>class_essentialocl::TupleType</data>
    </node>
    <node id = 'class_essentialocl::VoidType'>
      <data key = 'label'>class_essentialocl::VoidType</data>
    </node>
    <node id = 'class_essentialocl::AnyType'>
      <data key = 'label'>class_essentialocl::AnyType</data>
    </node>
    <node id = 'package_essentialocl'>
      <data key = 'label'>package_essentialocl</data>
    </node>
  </graph>
</graphml>
