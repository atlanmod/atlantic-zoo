<?xml version = '1.0' encoding = 'ISO-8859-1' ?>
<graphml xmlns:xsi = 'http://www.w3.org/2001/XMLSchema-instance' xsi:schemaLocation = 'http://graphml.graphdrawing.org/xmlnshttp://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd'>
  <key id = 'label' for = 'node' attr.name = 'label' attr.type = 'string'/>
  <graph id = 'ASMGraph' edgedefault = 'undirected'>
    <edge id = 'XAsmFile_extends_LocatedElement' source = 'class_ASM::XAsmFile' target = 'class_ASM::LocatedElement'/>
    <edge id = 'XAsmSpec_extends_XAsmFile' source = 'class_ASM::XAsmSpec' target = 'class_ASM::XAsmFile'/>
    <edge id = 'Asm_extends_LocatedElement' source = 'class_ASM::Asm' target = 'class_ASM::LocatedElement'/>
    <edge id = 'Signature_extends_LocatedElement' source = 'class_ASM::Signature' target = 'class_ASM::LocatedElement'/>
    <edge id = 'Argument_extends_VariableDecl' source = 'class_ASM::Argument' target = 'class_ASM::VariableDecl'/>
    <edge id = 'Body_extends_XAsmFile' source = 'class_ASM::Body' target = 'class_ASM::XAsmFile'/>
    <edge id = 'MetaInformation_extends_LocatedElement' source = 'class_ASM::MetaInformation' target = 'class_ASM::LocatedElement'/>
    <edge id = 'AccessUpdateFunction_extends_LocatedElement' source = 'class_ASM::AccessUpdateFunction' target = 'class_ASM::LocatedElement'/>
    <edge id = 'Declaration_extends_LocatedElement' source = 'class_ASM::Declaration' target = 'class_ASM::LocatedElement'/>
    <edge id = 'Function_extends_Declaration' source = 'class_ASM::Function' target = 'class_ASM::Declaration'/>
    <edge id = 'Parameter_extends_LocatedElement' source = 'class_ASM::Parameter' target = 'class_ASM::LocatedElement'/>
    <edge id = 'Universe_extends_Declaration' source = 'class_ASM::Universe' target = 'class_ASM::Declaration'/>
    <edge id = 'Initialization_extends_LocatedElement' source = 'class_ASM::Initialization' target = 'class_ASM::LocatedElement'/>
    <edge id = 'Term_extends_LocatedElement' source = 'class_ASM::Term' target = 'class_ASM::LocatedElement'/>
    <edge id = 'Constant_extends_Term' source = 'class_ASM::Constant' target = 'class_ASM::Term'/>
    <edge id = 'FunctionOrVariableTerm_extends_Term' source = 'class_ASM::FunctionOrVariableTerm' target = 'class_ASM::Term'/>
    <edge id = 'OperatorTerm_extends_Term' source = 'class_ASM::OperatorTerm' target = 'class_ASM::Term'/>
    <edge id = 'BooleanConstant_extends_Constant' source = 'class_ASM::BooleanConstant' target = 'class_ASM::Constant'/>
    <edge id = 'IntegerConstant_extends_Constant' source = 'class_ASM::IntegerConstant' target = 'class_ASM::Constant'/>
    <edge id = 'StringConstant_extends_Constant' source = 'class_ASM::StringConstant' target = 'class_ASM::Constant'/>
    <edge id = 'UndefConstant_extends_Constant' source = 'class_ASM::UndefConstant' target = 'class_ASM::Constant'/>
    <edge id = 'Rule_extends_LocatedElement' source = 'class_ASM::Rule' target = 'class_ASM::LocatedElement'/>
    <edge id = 'SkipRule_extends_Rule' source = 'class_ASM::SkipRule' target = 'class_ASM::Rule'/>
    <edge id = 'AsmInvocation_extends_Rule' source = 'class_ASM::AsmInvocation' target = 'class_ASM::Rule'/>
    <edge id = 'UpdateRule_extends_Rule' source = 'class_ASM::UpdateRule' target = 'class_ASM::Rule'/>
    <edge id = 'ChooseRule_extends_Rule' source = 'class_ASM::ChooseRule' target = 'class_ASM::Rule'/>
    <edge id = 'DoForallRule_extends_Rule' source = 'class_ASM::DoForallRule' target = 'class_ASM::Rule'/>
    <edge id = 'ConditionalRule_extends_Rule' source = 'class_ASM::ConditionalRule' target = 'class_ASM::Rule'/>
    <edge id = 'ElseIf_extends_LocatedElement' source = 'class_ASM::ElseIf' target = 'class_ASM::LocatedElement'/>
    <edge id = 'ExtendRule_extends_Rule' source = 'class_ASM::ExtendRule' target = 'class_ASM::Rule'/>
    <edge id = 'ElementDecl_extends_LocatedElement' source = 'class_ASM::ElementDecl' target = 'class_ASM::LocatedElement'/>
    <edge id = 'Extension_extends_LocatedElement' source = 'class_ASM::Extension' target = 'class_ASM::LocatedElement'/>
    <edge id = 'ReturnRule_extends_Rule' source = 'class_ASM::ReturnRule' target = 'class_ASM::Rule'/>
    <edge id = 'referenceEdge_XAsmSpec2Asm' source = 'class_ASM::XAsmSpec' target = 'class_ASM::Asm'/>
    <edge id = 'referenceEdge_Signature2Argument' source = 'class_ASM::Signature' target = 'class_ASM::Argument'/>
    <edge id = 'referenceEdge_Body2Declaration' source = 'class_ASM::Body' target = 'class_ASM::Declaration'/>
    <edge id = 'referenceEdge_MetaInformation2Signature' source = 'class_ASM::MetaInformation' target = 'class_ASM::Signature'/>
    <edge id = 'referenceEdge_AccessUpdateFunction2Function' source = 'class_ASM::AccessUpdateFunction' target = 'class_ASM::Function'/>
    <edge id = 'referenceEdge_Universe2Universe' source = 'class_ASM::Universe' target = 'class_ASM::Universe'/>
    <edge id = 'referenceEdge_Initialization2Rule' source = 'class_ASM::Initialization' target = 'class_ASM::Rule'/>
    <edge id = 'referenceEdge_FunctionOrVariableTerm2ElementDecl' source = 'class_ASM::FunctionOrVariableTerm' target = 'class_ASM::ElementDecl'/>
    <edge id = 'referenceEdge_OperatorTerm2Term' source = 'class_ASM::OperatorTerm' target = 'class_ASM::Term'/>
    <edge id = 'referenceEdge_AsmInvocation2Term' source = 'class_ASM::AsmInvocation' target = 'class_ASM::Term'/>
    <edge id = 'referenceEdge_UpdateRule2FunctionOrVariableTerm' source = 'class_ASM::UpdateRule' target = 'class_ASM::FunctionOrVariableTerm'/>
    <edge id = 'referenceEdge_ChooseRule2VariableDecl' source = 'class_ASM::ChooseRule' target = 'class_ASM::VariableDecl'/>
    <edge id = 'referenceEdge_DoForallRule2VariableDecl' source = 'class_ASM::DoForallRule' target = 'class_ASM::VariableDecl'/>
    <edge id = 'referenceEdge_ConditionalRule2Term' source = 'class_ASM::ConditionalRule' target = 'class_ASM::Term'/>
    <edge id = 'referenceEdge_ElseIf2Term' source = 'class_ASM::ElseIf' target = 'class_ASM::Term'/>
    <edge id = 'referenceEdge_ExtendRule2Extension' source = 'class_ASM::ExtendRule' target = 'class_ASM::Extension'/>
    <edge id = 'referenceEdge_ReturnRule2Term' source = 'class_ASM::ReturnRule' target = 'class_ASM::Term'/>
    <node id = 'class_ASM::LocatedElement'>
      <data key = 'label'>class_ASM::LocatedElement</data>
    </node>
    <node id = 'class_ASM::XAsmFile'>
      <data key = 'label'>class_ASM::XAsmFile</data>
    </node>
    <node id = 'class_ASM::XAsmSpec'>
      <data key = 'label'>class_ASM::XAsmSpec</data>
    </node>
    <node id = 'class_ASM::Asm'>
      <data key = 'label'>class_ASM::Asm</data>
    </node>
    <node id = 'class_ASM::Signature'>
      <data key = 'label'>class_ASM::Signature</data>
    </node>
    <node id = 'class_ASM::Argument'>
      <data key = 'label'>class_ASM::Argument</data>
    </node>
    <node id = 'class_ASM::Body'>
      <data key = 'label'>class_ASM::Body</data>
    </node>
    <node id = 'class_ASM::MetaInformation'>
      <data key = 'label'>class_ASM::MetaInformation</data>
    </node>
    <node id = 'class_ASM::AccessUpdateFunction'>
      <data key = 'label'>class_ASM::AccessUpdateFunction</data>
    </node>
    <node id = 'class_ASM::Declaration'>
      <data key = 'label'>class_ASM::Declaration</data>
    </node>
    <node id = 'class_ASM::Function'>
      <data key = 'label'>class_ASM::Function</data>
    </node>
    <node id = 'class_ASM::Parameter'>
      <data key = 'label'>class_ASM::Parameter</data>
    </node>
    <node id = 'class_ASM::Universe'>
      <data key = 'label'>class_ASM::Universe</data>
    </node>
    <node id = 'class_ASM::Initialization'>
      <data key = 'label'>class_ASM::Initialization</data>
    </node>
    <node id = 'class_ASM::Term'>
      <data key = 'label'>class_ASM::Term</data>
    </node>
    <node id = 'class_ASM::Constant'>
      <data key = 'label'>class_ASM::Constant</data>
    </node>
    <node id = 'class_ASM::FunctionOrVariableTerm'>
      <data key = 'label'>class_ASM::FunctionOrVariableTerm</data>
    </node>
    <node id = 'class_ASM::OperatorTerm'>
      <data key = 'label'>class_ASM::OperatorTerm</data>
    </node>
    <node id = 'class_ASM::BooleanConstant'>
      <data key = 'label'>class_ASM::BooleanConstant</data>
    </node>
    <node id = 'class_ASM::IntegerConstant'>
      <data key = 'label'>class_ASM::IntegerConstant</data>
    </node>
    <node id = 'class_ASM::StringConstant'>
      <data key = 'label'>class_ASM::StringConstant</data>
    </node>
    <node id = 'class_ASM::UndefConstant'>
      <data key = 'label'>class_ASM::UndefConstant</data>
    </node>
    <node id = 'class_ASM::Rule'>
      <data key = 'label'>class_ASM::Rule</data>
    </node>
    <node id = 'class_ASM::SkipRule'>
      <data key = 'label'>class_ASM::SkipRule</data>
    </node>
    <node id = 'class_ASM::AsmInvocation'>
      <data key = 'label'>class_ASM::AsmInvocation</data>
    </node>
    <node id = 'class_ASM::UpdateRule'>
      <data key = 'label'>class_ASM::UpdateRule</data>
    </node>
    <node id = 'class_ASM::ChooseRule'>
      <data key = 'label'>class_ASM::ChooseRule</data>
    </node>
    <node id = 'class_ASM::DoForallRule'>
      <data key = 'label'>class_ASM::DoForallRule</data>
    </node>
    <node id = 'class_ASM::ConditionalRule'>
      <data key = 'label'>class_ASM::ConditionalRule</data>
    </node>
    <node id = 'class_ASM::ElseIf'>
      <data key = 'label'>class_ASM::ElseIf</data>
    </node>
    <node id = 'class_ASM::ExtendRule'>
      <data key = 'label'>class_ASM::ExtendRule</data>
    </node>
    <node id = 'class_ASM::ElementDecl'>
      <data key = 'label'>class_ASM::ElementDecl</data>
    </node>
    <node id = 'class_ASM::VariableDecl'>
      <data key = 'label'>class_ASM::VariableDecl</data>
    </node>
    <node id = 'class_ASM::Extension'>
      <data key = 'label'>class_ASM::Extension</data>
    </node>
    <node id = 'class_ASM::ReturnRule'>
      <data key = 'label'>class_ASM::ReturnRule</data>
    </node>
    <node id = 'package_ASM'>
      <data key = 'label'>package_ASM</data>
    </node>
  </graph>
  <graph id = 'EnumGraph' edgedefault = 'undirected'>
    <node id = 'enum_AccessUpdateType'>
      <data key = 'label'>enum_AccessUpdateType</data>
    </node>
    <node id = 'enum_AsmType'>
      <data key = 'label'>enum_AsmType</data>
    </node>
    <node id = 'package_Enum'>
      <data key = 'label'>package_Enum</data>
    </node>
  </graph>
  <graph id = 'PrimitiveTypesGraph' edgedefault = 'undirected'>
    <node id = 'dataType_String'>
      <data key = 'label'>dataType_String</data>
    </node>
    <node id = 'dataType_Integer'>
      <data key = 'label'>dataType_Integer</data>
    </node>
    <node id = 'dataType_Boolean'>
      <data key = 'label'>dataType_Boolean</data>
    </node>
    <node id = 'package_PrimitiveTypes'>
      <data key = 'label'>package_PrimitiveTypes</data>
    </node>
  </graph>
</graphml>
