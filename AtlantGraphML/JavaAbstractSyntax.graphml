<?xml version = '1.0' encoding = 'ISO-8859-1' ?>
<graphml xmlns:xsi = 'http://www.w3.org/2001/XMLSchema-instance' xsi:schemaLocation = 'http://graphml.graphdrawing.org/xmlnshttp://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd'>
  <key id = 'label' for = 'node' attr.name = 'label' attr.type = 'string'/>
  <graph id = 'JavaAbstractSyntaxGraph' edgedefault = 'undirected'>
    <edge id = 'AnonymousClassDeclaration_extends_ASTNode' source = 'class_JavaAbstractSyntax::AnonymousClassDeclaration' target = 'class_JavaAbstractSyntax::ASTNode'/>
    <edge id = 'BodyDeclaration_extends_ASTNode' source = 'class_JavaAbstractSyntax::BodyDeclaration' target = 'class_JavaAbstractSyntax::ASTNode'/>
    <edge id = 'CatchClause_extends_ASTNode' source = 'class_JavaAbstractSyntax::CatchClause' target = 'class_JavaAbstractSyntax::ASTNode'/>
    <edge id = 'Comment_extends_ASTNode' source = 'class_JavaAbstractSyntax::Comment' target = 'class_JavaAbstractSyntax::ASTNode'/>
    <edge id = 'CompilationUnit_extends_ASTNode' source = 'class_JavaAbstractSyntax::CompilationUnit' target = 'class_JavaAbstractSyntax::ASTNode'/>
    <edge id = 'Expression_extends_ASTNode' source = 'class_JavaAbstractSyntax::Expression' target = 'class_JavaAbstractSyntax::ASTNode'/>
    <edge id = 'ImportDeclaration_extends_ASTNode' source = 'class_JavaAbstractSyntax::ImportDeclaration' target = 'class_JavaAbstractSyntax::ASTNode'/>
    <edge id = 'MemberRef_extends_ASTNode' source = 'class_JavaAbstractSyntax::MemberRef' target = 'class_JavaAbstractSyntax::ASTNode'/>
    <edge id = 'MemberValuePair_extends_ASTNode' source = 'class_JavaAbstractSyntax::MemberValuePair' target = 'class_JavaAbstractSyntax::ASTNode'/>
    <edge id = 'MethodRef_extends_ASTNode' source = 'class_JavaAbstractSyntax::MethodRef' target = 'class_JavaAbstractSyntax::ASTNode'/>
    <edge id = 'MethodRefParameter_extends_ASTNode' source = 'class_JavaAbstractSyntax::MethodRefParameter' target = 'class_JavaAbstractSyntax::ASTNode'/>
    <edge id = 'Modifier_extends_ASTNode' source = 'class_JavaAbstractSyntax::Modifier' target = 'class_JavaAbstractSyntax::ASTNode'/>
    <edge id = 'PackageDeclaration_extends_ASTNode' source = 'class_JavaAbstractSyntax::PackageDeclaration' target = 'class_JavaAbstractSyntax::ASTNode'/>
    <edge id = 'Statement_extends_ASTNode' source = 'class_JavaAbstractSyntax::Statement' target = 'class_JavaAbstractSyntax::ASTNode'/>
    <edge id = 'TagElement_extends_ASTNode' source = 'class_JavaAbstractSyntax::TagElement' target = 'class_JavaAbstractSyntax::ASTNode'/>
    <edge id = 'TextElement_extends_ASTNode' source = 'class_JavaAbstractSyntax::TextElement' target = 'class_JavaAbstractSyntax::ASTNode'/>
    <edge id = 'Type_extends_ASTNode' source = 'class_JavaAbstractSyntax::Type' target = 'class_JavaAbstractSyntax::ASTNode'/>
    <edge id = 'TypeParameter_extends_ASTNode' source = 'class_JavaAbstractSyntax::TypeParameter' target = 'class_JavaAbstractSyntax::ASTNode'/>
    <edge id = 'VariableDeclaration_extends_ASTNode' source = 'class_JavaAbstractSyntax::VariableDeclaration' target = 'class_JavaAbstractSyntax::ASTNode'/>
    <edge id = 'AbstractTypeDeclaration_extends_BodyDeclaration' source = 'class_JavaAbstractSyntax::AbstractTypeDeclaration' target = 'class_JavaAbstractSyntax::BodyDeclaration'/>
    <edge id = 'AnnotationTypeMemberDeclaration_extends_BodyDeclaration' source = 'class_JavaAbstractSyntax::AnnotationTypeMemberDeclaration' target = 'class_JavaAbstractSyntax::BodyDeclaration'/>
    <edge id = 'EnumConstantDeclaration_extends_BodyDeclaration' source = 'class_JavaAbstractSyntax::EnumConstantDeclaration' target = 'class_JavaAbstractSyntax::BodyDeclaration'/>
    <edge id = 'FieldDeclaration_extends_BodyDeclaration' source = 'class_JavaAbstractSyntax::FieldDeclaration' target = 'class_JavaAbstractSyntax::BodyDeclaration'/>
    <edge id = 'Initializer_extends_BodyDeclaration' source = 'class_JavaAbstractSyntax::Initializer' target = 'class_JavaAbstractSyntax::BodyDeclaration'/>
    <edge id = 'MethodDeclaration_extends_BodyDeclaration' source = 'class_JavaAbstractSyntax::MethodDeclaration' target = 'class_JavaAbstractSyntax::BodyDeclaration'/>
    <edge id = 'AnnotationTypeDeclaration_extends_AbstractTypeDeclaration' source = 'class_JavaAbstractSyntax::AnnotationTypeDeclaration' target = 'class_JavaAbstractSyntax::AbstractTypeDeclaration'/>
    <edge id = 'EnumDeclaration_extends_AbstractTypeDeclaration' source = 'class_JavaAbstractSyntax::EnumDeclaration' target = 'class_JavaAbstractSyntax::AbstractTypeDeclaration'/>
    <edge id = 'TypeDeclaration_extends_AbstractTypeDeclaration' source = 'class_JavaAbstractSyntax::TypeDeclaration' target = 'class_JavaAbstractSyntax::AbstractTypeDeclaration'/>
    <edge id = 'BlockComment_extends_Comment' source = 'class_JavaAbstractSyntax::BlockComment' target = 'class_JavaAbstractSyntax::Comment'/>
    <edge id = 'Javadoc_extends_Comment' source = 'class_JavaAbstractSyntax::Javadoc' target = 'class_JavaAbstractSyntax::Comment'/>
    <edge id = 'LineComment_extends_Comment' source = 'class_JavaAbstractSyntax::LineComment' target = 'class_JavaAbstractSyntax::Comment'/>
    <edge id = 'Annotation_extends_Expression' source = 'class_JavaAbstractSyntax::Annotation' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'ArrayAccess_extends_Expression' source = 'class_JavaAbstractSyntax::ArrayAccess' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'ArrayCreation_extends_Expression' source = 'class_JavaAbstractSyntax::ArrayCreation' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'ArrayInitializer_extends_Expression' source = 'class_JavaAbstractSyntax::ArrayInitializer' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'Assignment_extends_Expression' source = 'class_JavaAbstractSyntax::Assignment' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'BooleanLiteral_extends_Expression' source = 'class_JavaAbstractSyntax::BooleanLiteral' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'CastExpression_extends_Expression' source = 'class_JavaAbstractSyntax::CastExpression' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'CharacterLiteral_extends_Expression' source = 'class_JavaAbstractSyntax::CharacterLiteral' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'ClassInstanceCreation_extends_Expression' source = 'class_JavaAbstractSyntax::ClassInstanceCreation' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'ConditionalExpression_extends_Expression' source = 'class_JavaAbstractSyntax::ConditionalExpression' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'FieldAccess_extends_Expression' source = 'class_JavaAbstractSyntax::FieldAccess' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'InfixExpression_extends_Expression' source = 'class_JavaAbstractSyntax::InfixExpression' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'InstanceofExpression_extends_Expression' source = 'class_JavaAbstractSyntax::InstanceofExpression' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'MethodInvocation_extends_Expression' source = 'class_JavaAbstractSyntax::MethodInvocation' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'Name_extends_Expression' source = 'class_JavaAbstractSyntax::Name' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'NullLiteral_extends_Expression' source = 'class_JavaAbstractSyntax::NullLiteral' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'NumberLiteral_extends_Expression' source = 'class_JavaAbstractSyntax::NumberLiteral' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'ParenthesizedExpression_extends_Expression' source = 'class_JavaAbstractSyntax::ParenthesizedExpression' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'PostfixExpression_extends_Expression' source = 'class_JavaAbstractSyntax::PostfixExpression' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'PrefixExpression_extends_Expression' source = 'class_JavaAbstractSyntax::PrefixExpression' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'StringLiteral_extends_Expression' source = 'class_JavaAbstractSyntax::StringLiteral' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'SuperFieldAccess_extends_Expression' source = 'class_JavaAbstractSyntax::SuperFieldAccess' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'SuperMethodInvocation_extends_Expression' source = 'class_JavaAbstractSyntax::SuperMethodInvocation' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'ThisExpression_extends_Expression' source = 'class_JavaAbstractSyntax::ThisExpression' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'TypeLiteral_extends_Expression' source = 'class_JavaAbstractSyntax::TypeLiteral' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'VariableDeclarationExpression_extends_Expression' source = 'class_JavaAbstractSyntax::VariableDeclarationExpression' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'AssertStatement_extends_Statement' source = 'class_JavaAbstractSyntax::AssertStatement' target = 'class_JavaAbstractSyntax::Statement'/>
    <edge id = 'Block_extends_Statement' source = 'class_JavaAbstractSyntax::Block' target = 'class_JavaAbstractSyntax::Statement'/>
    <edge id = 'BreakStatement_extends_Statement' source = 'class_JavaAbstractSyntax::BreakStatement' target = 'class_JavaAbstractSyntax::Statement'/>
    <edge id = 'ConstructorInvocation_extends_Statement' source = 'class_JavaAbstractSyntax::ConstructorInvocation' target = 'class_JavaAbstractSyntax::Statement'/>
    <edge id = 'ContinueStatement_extends_Statement' source = 'class_JavaAbstractSyntax::ContinueStatement' target = 'class_JavaAbstractSyntax::Statement'/>
    <edge id = 'DoStatement_extends_Statement' source = 'class_JavaAbstractSyntax::DoStatement' target = 'class_JavaAbstractSyntax::Statement'/>
    <edge id = 'EmptyStatement_extends_Statement' source = 'class_JavaAbstractSyntax::EmptyStatement' target = 'class_JavaAbstractSyntax::Statement'/>
    <edge id = 'EnhancedForStatement_extends_Statement' source = 'class_JavaAbstractSyntax::EnhancedForStatement' target = 'class_JavaAbstractSyntax::Statement'/>
    <edge id = 'ExpressionStatement_extends_Statement' source = 'class_JavaAbstractSyntax::ExpressionStatement' target = 'class_JavaAbstractSyntax::Statement'/>
    <edge id = 'ForStatement_extends_Statement' source = 'class_JavaAbstractSyntax::ForStatement' target = 'class_JavaAbstractSyntax::Statement'/>
    <edge id = 'IfStatement_extends_Statement' source = 'class_JavaAbstractSyntax::IfStatement' target = 'class_JavaAbstractSyntax::Statement'/>
    <edge id = 'LabeledStatement_extends_Statement' source = 'class_JavaAbstractSyntax::LabeledStatement' target = 'class_JavaAbstractSyntax::Statement'/>
    <edge id = 'ReturnStatement_extends_Statement' source = 'class_JavaAbstractSyntax::ReturnStatement' target = 'class_JavaAbstractSyntax::Statement'/>
    <edge id = 'SuperConstructorInvocation_extends_Statement' source = 'class_JavaAbstractSyntax::SuperConstructorInvocation' target = 'class_JavaAbstractSyntax::Statement'/>
    <edge id = 'SwitchCase_extends_Statement' source = 'class_JavaAbstractSyntax::SwitchCase' target = 'class_JavaAbstractSyntax::Statement'/>
    <edge id = 'SwitchStatement_extends_Statement' source = 'class_JavaAbstractSyntax::SwitchStatement' target = 'class_JavaAbstractSyntax::Statement'/>
    <edge id = 'SynchronizedStatement_extends_Statement' source = 'class_JavaAbstractSyntax::SynchronizedStatement' target = 'class_JavaAbstractSyntax::Statement'/>
    <edge id = 'ThrowStatement_extends_Statement' source = 'class_JavaAbstractSyntax::ThrowStatement' target = 'class_JavaAbstractSyntax::Statement'/>
    <edge id = 'TryStatement_extends_Statement' source = 'class_JavaAbstractSyntax::TryStatement' target = 'class_JavaAbstractSyntax::Statement'/>
    <edge id = 'TypeDeclarationStatement_extends_Statement' source = 'class_JavaAbstractSyntax::TypeDeclarationStatement' target = 'class_JavaAbstractSyntax::Statement'/>
    <edge id = 'VariableDeclarationStatement_extends_Statement' source = 'class_JavaAbstractSyntax::VariableDeclarationStatement' target = 'class_JavaAbstractSyntax::Statement'/>
    <edge id = 'WhileStatement_extends_Statement' source = 'class_JavaAbstractSyntax::WhileStatement' target = 'class_JavaAbstractSyntax::Statement'/>
    <edge id = 'ArrayType_extends_Type' source = 'class_JavaAbstractSyntax::ArrayType' target = 'class_JavaAbstractSyntax::Type'/>
    <edge id = 'ParameterizedType_extends_Type' source = 'class_JavaAbstractSyntax::ParameterizedType' target = 'class_JavaAbstractSyntax::Type'/>
    <edge id = 'PrimitiveType_extends_Type' source = 'class_JavaAbstractSyntax::PrimitiveType' target = 'class_JavaAbstractSyntax::Type'/>
    <edge id = 'QualifiedType_extends_Type' source = 'class_JavaAbstractSyntax::QualifiedType' target = 'class_JavaAbstractSyntax::Type'/>
    <edge id = 'SimpleType_extends_Type' source = 'class_JavaAbstractSyntax::SimpleType' target = 'class_JavaAbstractSyntax::Type'/>
    <edge id = 'WildcardType_extends_Type' source = 'class_JavaAbstractSyntax::WildcardType' target = 'class_JavaAbstractSyntax::Type'/>
    <edge id = 'SingleVariableDeclaration_extends_VariableDeclaration' source = 'class_JavaAbstractSyntax::SingleVariableDeclaration' target = 'class_JavaAbstractSyntax::VariableDeclaration'/>
    <edge id = 'VariableDeclarationFragment_extends_VariableDeclaration' source = 'class_JavaAbstractSyntax::VariableDeclarationFragment' target = 'class_JavaAbstractSyntax::VariableDeclaration'/>
    <edge id = 'QualifiedName_extends_Name' source = 'class_JavaAbstractSyntax::QualifiedName' target = 'class_JavaAbstractSyntax::Name'/>
    <edge id = 'SimpleName_extends_Name' source = 'class_JavaAbstractSyntax::SimpleName' target = 'class_JavaAbstractSyntax::Name'/>
    <edge id = 'MarkerAnnotation_extends_Annotation' source = 'class_JavaAbstractSyntax::MarkerAnnotation' target = 'class_JavaAbstractSyntax::Annotation'/>
    <edge id = 'NormalAnnotation_extends_Annotation' source = 'class_JavaAbstractSyntax::NormalAnnotation' target = 'class_JavaAbstractSyntax::Annotation'/>
    <edge id = 'SingleMemberAnnotation_extends_Annotation' source = 'class_JavaAbstractSyntax::SingleMemberAnnotation' target = 'class_JavaAbstractSyntax::Annotation'/>
    <edge id = 'referenceEdge_AST2ASTNode' source = 'class_JavaAbstractSyntax::AST' target = 'class_JavaAbstractSyntax::ASTNode'/>
    <edge id = 'referenceEdge_AnonymousClassDeclaration2BodyDeclaration' source = 'class_JavaAbstractSyntax::AnonymousClassDeclaration' target = 'class_JavaAbstractSyntax::BodyDeclaration'/>
    <edge id = 'referenceEdge_CatchClause2Block' source = 'class_JavaAbstractSyntax::CatchClause' target = 'class_JavaAbstractSyntax::Block'/>
    <edge id = 'referenceEdge_Comment2ASTNode' source = 'class_JavaAbstractSyntax::Comment' target = 'class_JavaAbstractSyntax::ASTNode'/>
    <edge id = 'referenceEdge_CompilationUnit2Comment' source = 'class_JavaAbstractSyntax::CompilationUnit' target = 'class_JavaAbstractSyntax::Comment'/>
    <edge id = 'referenceEdge_ImportDeclaration2Name' source = 'class_JavaAbstractSyntax::ImportDeclaration' target = 'class_JavaAbstractSyntax::Name'/>
    <edge id = 'referenceEdge_MemberRef2SimpleName' source = 'class_JavaAbstractSyntax::MemberRef' target = 'class_JavaAbstractSyntax::SimpleName'/>
    <edge id = 'referenceEdge_MemberValuePair2SimpleName' source = 'class_JavaAbstractSyntax::MemberValuePair' target = 'class_JavaAbstractSyntax::SimpleName'/>
    <edge id = 'referenceEdge_MethodRef2SimpleName' source = 'class_JavaAbstractSyntax::MethodRef' target = 'class_JavaAbstractSyntax::SimpleName'/>
    <edge id = 'referenceEdge_MethodRefParameter2SimpleName' source = 'class_JavaAbstractSyntax::MethodRefParameter' target = 'class_JavaAbstractSyntax::SimpleName'/>
    <edge id = 'referenceEdge_PackageDeclaration2Annotation' source = 'class_JavaAbstractSyntax::PackageDeclaration' target = 'class_JavaAbstractSyntax::Annotation'/>
    <edge id = 'referenceEdge_TagElement2ASTNode' source = 'class_JavaAbstractSyntax::TagElement' target = 'class_JavaAbstractSyntax::ASTNode'/>
    <edge id = 'referenceEdge_TypeParameter2SimpleName' source = 'class_JavaAbstractSyntax::TypeParameter' target = 'class_JavaAbstractSyntax::SimpleName'/>
    <edge id = 'referenceEdge_VariableDeclaration2Expression' source = 'class_JavaAbstractSyntax::VariableDeclaration' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'referenceEdge_AbstractTypeDeclaration2BodyDeclaration' source = 'class_JavaAbstractSyntax::AbstractTypeDeclaration' target = 'class_JavaAbstractSyntax::BodyDeclaration'/>
    <edge id = 'referenceEdge_AnnotationTypeMemberDeclaration2Expression' source = 'class_JavaAbstractSyntax::AnnotationTypeMemberDeclaration' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'referenceEdge_EnumConstantDeclaration2Expression' source = 'class_JavaAbstractSyntax::EnumConstantDeclaration' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'referenceEdge_FieldDeclaration2VariableDeclarationFragment' source = 'class_JavaAbstractSyntax::FieldDeclaration' target = 'class_JavaAbstractSyntax::VariableDeclarationFragment'/>
    <edge id = 'referenceEdge_Initializer2Block' source = 'class_JavaAbstractSyntax::Initializer' target = 'class_JavaAbstractSyntax::Block'/>
    <edge id = 'referenceEdge_MethodDeclaration2Block' source = 'class_JavaAbstractSyntax::MethodDeclaration' target = 'class_JavaAbstractSyntax::Block'/>
    <edge id = 'referenceEdge_EnumDeclaration2Type' source = 'class_JavaAbstractSyntax::EnumDeclaration' target = 'class_JavaAbstractSyntax::Type'/>
    <edge id = 'referenceEdge_TypeDeclaration2Type' source = 'class_JavaAbstractSyntax::TypeDeclaration' target = 'class_JavaAbstractSyntax::Type'/>
    <edge id = 'referenceEdge_Javadoc2TagElement' source = 'class_JavaAbstractSyntax::Javadoc' target = 'class_JavaAbstractSyntax::TagElement'/>
    <edge id = 'referenceEdge_ArrayAccess2Expression' source = 'class_JavaAbstractSyntax::ArrayAccess' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'referenceEdge_ArrayCreation2Expression' source = 'class_JavaAbstractSyntax::ArrayCreation' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'referenceEdge_ArrayInitializer2Expression' source = 'class_JavaAbstractSyntax::ArrayInitializer' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'referenceEdge_Assignment2Expression' source = 'class_JavaAbstractSyntax::Assignment' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'referenceEdge_CastExpression2Expression' source = 'class_JavaAbstractSyntax::CastExpression' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'referenceEdge_ClassInstanceCreation2Expression' source = 'class_JavaAbstractSyntax::ClassInstanceCreation' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'referenceEdge_ConditionalExpression2Expression' source = 'class_JavaAbstractSyntax::ConditionalExpression' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'referenceEdge_FieldAccess2Expression' source = 'class_JavaAbstractSyntax::FieldAccess' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'referenceEdge_InfixExpression2Expression' source = 'class_JavaAbstractSyntax::InfixExpression' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'referenceEdge_InstanceofExpression2Expression' source = 'class_JavaAbstractSyntax::InstanceofExpression' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'referenceEdge_MethodInvocation2Expression' source = 'class_JavaAbstractSyntax::MethodInvocation' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'referenceEdge_ParenthesizedExpression2Expression' source = 'class_JavaAbstractSyntax::ParenthesizedExpression' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'referenceEdge_PostfixExpression2Expression' source = 'class_JavaAbstractSyntax::PostfixExpression' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'referenceEdge_PrefixExpression2Expression' source = 'class_JavaAbstractSyntax::PrefixExpression' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'referenceEdge_SuperFieldAccess2SimpleName' source = 'class_JavaAbstractSyntax::SuperFieldAccess' target = 'class_JavaAbstractSyntax::SimpleName'/>
    <edge id = 'referenceEdge_SuperMethodInvocation2Expression' source = 'class_JavaAbstractSyntax::SuperMethodInvocation' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'referenceEdge_ThisExpression2Name' source = 'class_JavaAbstractSyntax::ThisExpression' target = 'class_JavaAbstractSyntax::Name'/>
    <edge id = 'referenceEdge_TypeLiteral2Type' source = 'class_JavaAbstractSyntax::TypeLiteral' target = 'class_JavaAbstractSyntax::Type'/>
    <edge id = 'referenceEdge_VariableDeclarationExpression2VariableDeclarationFragment' source = 'class_JavaAbstractSyntax::VariableDeclarationExpression' target = 'class_JavaAbstractSyntax::VariableDeclarationFragment'/>
    <edge id = 'referenceEdge_AssertStatement2Expression' source = 'class_JavaAbstractSyntax::AssertStatement' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'referenceEdge_BreakStatement2SimpleName' source = 'class_JavaAbstractSyntax::BreakStatement' target = 'class_JavaAbstractSyntax::SimpleName'/>
    <edge id = 'referenceEdge_ConstructorInvocation2Expression' source = 'class_JavaAbstractSyntax::ConstructorInvocation' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'referenceEdge_ContinueStatement2SimpleName' source = 'class_JavaAbstractSyntax::ContinueStatement' target = 'class_JavaAbstractSyntax::SimpleName'/>
    <edge id = 'referenceEdge_DoStatement2Statement' source = 'class_JavaAbstractSyntax::DoStatement' target = 'class_JavaAbstractSyntax::Statement'/>
    <edge id = 'referenceEdge_EnhancedForStatement2Statement' source = 'class_JavaAbstractSyntax::EnhancedForStatement' target = 'class_JavaAbstractSyntax::Statement'/>
    <edge id = 'referenceEdge_ExpressionStatement2Expression' source = 'class_JavaAbstractSyntax::ExpressionStatement' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'referenceEdge_ForStatement2Statement' source = 'class_JavaAbstractSyntax::ForStatement' target = 'class_JavaAbstractSyntax::Statement'/>
    <edge id = 'referenceEdge_IfStatement2Statement' source = 'class_JavaAbstractSyntax::IfStatement' target = 'class_JavaAbstractSyntax::Statement'/>
    <edge id = 'referenceEdge_LabeledStatement2Statement' source = 'class_JavaAbstractSyntax::LabeledStatement' target = 'class_JavaAbstractSyntax::Statement'/>
    <edge id = 'referenceEdge_ReturnStatement2Expression' source = 'class_JavaAbstractSyntax::ReturnStatement' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'referenceEdge_SuperConstructorInvocation2Expression' source = 'class_JavaAbstractSyntax::SuperConstructorInvocation' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'referenceEdge_SwitchCase2Expression' source = 'class_JavaAbstractSyntax::SwitchCase' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'referenceEdge_SwitchStatement2Expression' source = 'class_JavaAbstractSyntax::SwitchStatement' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'referenceEdge_SynchronizedStatement2Block' source = 'class_JavaAbstractSyntax::SynchronizedStatement' target = 'class_JavaAbstractSyntax::Block'/>
    <edge id = 'referenceEdge_ThrowStatement2Expression' source = 'class_JavaAbstractSyntax::ThrowStatement' target = 'class_JavaAbstractSyntax::Expression'/>
    <edge id = 'referenceEdge_TryStatement2CatchClause' source = 'class_JavaAbstractSyntax::TryStatement' target = 'class_JavaAbstractSyntax::CatchClause'/>
    <edge id = 'referenceEdge_TypeDeclarationStatement2AbstractTypeDeclaration' source = 'class_JavaAbstractSyntax::TypeDeclarationStatement' target = 'class_JavaAbstractSyntax::AbstractTypeDeclaration'/>
    <edge id = 'referenceEdge_VariableDeclarationStatement2VariableDeclarationFragment' source = 'class_JavaAbstractSyntax::VariableDeclarationStatement' target = 'class_JavaAbstractSyntax::VariableDeclarationFragment'/>
    <edge id = 'referenceEdge_WhileStatement2Statement' source = 'class_JavaAbstractSyntax::WhileStatement' target = 'class_JavaAbstractSyntax::Statement'/>
    <edge id = 'referenceEdge_ArrayType2Type' source = 'class_JavaAbstractSyntax::ArrayType' target = 'class_JavaAbstractSyntax::Type'/>
    <edge id = 'referenceEdge_ParameterizedType2Type' source = 'class_JavaAbstractSyntax::ParameterizedType' target = 'class_JavaAbstractSyntax::Type'/>
    <edge id = 'referenceEdge_QualifiedType2SimpleName' source = 'class_JavaAbstractSyntax::QualifiedType' target = 'class_JavaAbstractSyntax::SimpleName'/>
    <edge id = 'referenceEdge_SimpleType2Name' source = 'class_JavaAbstractSyntax::SimpleType' target = 'class_JavaAbstractSyntax::Name'/>
    <edge id = 'referenceEdge_WildcardType2Type' source = 'class_JavaAbstractSyntax::WildcardType' target = 'class_JavaAbstractSyntax::Type'/>
    <edge id = 'referenceEdge_SingleVariableDeclaration2Type' source = 'class_JavaAbstractSyntax::SingleVariableDeclaration' target = 'class_JavaAbstractSyntax::Type'/>
    <edge id = 'referenceEdge_QualifiedName2SimpleName' source = 'class_JavaAbstractSyntax::QualifiedName' target = 'class_JavaAbstractSyntax::SimpleName'/>
    <edge id = 'referenceEdge_NormalAnnotation2MemberValuePair' source = 'class_JavaAbstractSyntax::NormalAnnotation' target = 'class_JavaAbstractSyntax::MemberValuePair'/>
    <edge id = 'referenceEdge_SingleMemberAnnotation2Expression' source = 'class_JavaAbstractSyntax::SingleMemberAnnotation' target = 'class_JavaAbstractSyntax::Expression'/>
    <node id = 'class_JavaAbstractSyntax::AST'>
      <data key = 'label'>class_JavaAbstractSyntax::AST</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::ASTNode'>
      <data key = 'label'>class_JavaAbstractSyntax::ASTNode</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::AnonymousClassDeclaration'>
      <data key = 'label'>class_JavaAbstractSyntax::AnonymousClassDeclaration</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::BodyDeclaration'>
      <data key = 'label'>class_JavaAbstractSyntax::BodyDeclaration</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::CatchClause'>
      <data key = 'label'>class_JavaAbstractSyntax::CatchClause</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::Comment'>
      <data key = 'label'>class_JavaAbstractSyntax::Comment</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::CompilationUnit'>
      <data key = 'label'>class_JavaAbstractSyntax::CompilationUnit</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::Expression'>
      <data key = 'label'>class_JavaAbstractSyntax::Expression</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::ImportDeclaration'>
      <data key = 'label'>class_JavaAbstractSyntax::ImportDeclaration</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::MemberRef'>
      <data key = 'label'>class_JavaAbstractSyntax::MemberRef</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::MemberValuePair'>
      <data key = 'label'>class_JavaAbstractSyntax::MemberValuePair</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::MethodRef'>
      <data key = 'label'>class_JavaAbstractSyntax::MethodRef</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::MethodRefParameter'>
      <data key = 'label'>class_JavaAbstractSyntax::MethodRefParameter</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::ExtendedModifier'>
      <data key = 'label'>class_JavaAbstractSyntax::ExtendedModifier</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::Modifier'>
      <data key = 'label'>class_JavaAbstractSyntax::Modifier</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::PackageDeclaration'>
      <data key = 'label'>class_JavaAbstractSyntax::PackageDeclaration</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::Statement'>
      <data key = 'label'>class_JavaAbstractSyntax::Statement</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::TagElement'>
      <data key = 'label'>class_JavaAbstractSyntax::TagElement</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::TextElement'>
      <data key = 'label'>class_JavaAbstractSyntax::TextElement</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::Type'>
      <data key = 'label'>class_JavaAbstractSyntax::Type</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::TypeParameter'>
      <data key = 'label'>class_JavaAbstractSyntax::TypeParameter</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::VariableDeclaration'>
      <data key = 'label'>class_JavaAbstractSyntax::VariableDeclaration</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::AbstractTypeDeclaration'>
      <data key = 'label'>class_JavaAbstractSyntax::AbstractTypeDeclaration</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::AnnotationTypeMemberDeclaration'>
      <data key = 'label'>class_JavaAbstractSyntax::AnnotationTypeMemberDeclaration</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::EnumConstantDeclaration'>
      <data key = 'label'>class_JavaAbstractSyntax::EnumConstantDeclaration</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::FieldDeclaration'>
      <data key = 'label'>class_JavaAbstractSyntax::FieldDeclaration</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::Initializer'>
      <data key = 'label'>class_JavaAbstractSyntax::Initializer</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::MethodDeclaration'>
      <data key = 'label'>class_JavaAbstractSyntax::MethodDeclaration</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::AnnotationTypeDeclaration'>
      <data key = 'label'>class_JavaAbstractSyntax::AnnotationTypeDeclaration</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::EnumDeclaration'>
      <data key = 'label'>class_JavaAbstractSyntax::EnumDeclaration</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::TypeDeclaration'>
      <data key = 'label'>class_JavaAbstractSyntax::TypeDeclaration</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::BlockComment'>
      <data key = 'label'>class_JavaAbstractSyntax::BlockComment</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::Javadoc'>
      <data key = 'label'>class_JavaAbstractSyntax::Javadoc</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::LineComment'>
      <data key = 'label'>class_JavaAbstractSyntax::LineComment</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::Annotation'>
      <data key = 'label'>class_JavaAbstractSyntax::Annotation</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::ArrayAccess'>
      <data key = 'label'>class_JavaAbstractSyntax::ArrayAccess</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::ArrayCreation'>
      <data key = 'label'>class_JavaAbstractSyntax::ArrayCreation</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::ArrayInitializer'>
      <data key = 'label'>class_JavaAbstractSyntax::ArrayInitializer</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::Assignment'>
      <data key = 'label'>class_JavaAbstractSyntax::Assignment</data>
    </node>
    <node id = 'enum_AssignementOperatorKind'>
      <data key = 'label'>enum_AssignementOperatorKind</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::BooleanLiteral'>
      <data key = 'label'>class_JavaAbstractSyntax::BooleanLiteral</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::CastExpression'>
      <data key = 'label'>class_JavaAbstractSyntax::CastExpression</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::CharacterLiteral'>
      <data key = 'label'>class_JavaAbstractSyntax::CharacterLiteral</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::ClassInstanceCreation'>
      <data key = 'label'>class_JavaAbstractSyntax::ClassInstanceCreation</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::ConditionalExpression'>
      <data key = 'label'>class_JavaAbstractSyntax::ConditionalExpression</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::FieldAccess'>
      <data key = 'label'>class_JavaAbstractSyntax::FieldAccess</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::InfixExpression'>
      <data key = 'label'>class_JavaAbstractSyntax::InfixExpression</data>
    </node>
    <node id = 'enum_InfixExpressionOperatorKind'>
      <data key = 'label'>enum_InfixExpressionOperatorKind</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::InstanceofExpression'>
      <data key = 'label'>class_JavaAbstractSyntax::InstanceofExpression</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::MethodInvocation'>
      <data key = 'label'>class_JavaAbstractSyntax::MethodInvocation</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::Name'>
      <data key = 'label'>class_JavaAbstractSyntax::Name</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::NullLiteral'>
      <data key = 'label'>class_JavaAbstractSyntax::NullLiteral</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::NumberLiteral'>
      <data key = 'label'>class_JavaAbstractSyntax::NumberLiteral</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::ParenthesizedExpression'>
      <data key = 'label'>class_JavaAbstractSyntax::ParenthesizedExpression</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::PostfixExpression'>
      <data key = 'label'>class_JavaAbstractSyntax::PostfixExpression</data>
    </node>
    <node id = 'enum_PostfixExpresssionOperatorKind'>
      <data key = 'label'>enum_PostfixExpresssionOperatorKind</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::PrefixExpression'>
      <data key = 'label'>class_JavaAbstractSyntax::PrefixExpression</data>
    </node>
    <node id = 'enum_PrefixExpresssionOperatorKind'>
      <data key = 'label'>enum_PrefixExpresssionOperatorKind</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::StringLiteral'>
      <data key = 'label'>class_JavaAbstractSyntax::StringLiteral</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::SuperFieldAccess'>
      <data key = 'label'>class_JavaAbstractSyntax::SuperFieldAccess</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::SuperMethodInvocation'>
      <data key = 'label'>class_JavaAbstractSyntax::SuperMethodInvocation</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::ThisExpression'>
      <data key = 'label'>class_JavaAbstractSyntax::ThisExpression</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::TypeLiteral'>
      <data key = 'label'>class_JavaAbstractSyntax::TypeLiteral</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::VariableDeclarationExpression'>
      <data key = 'label'>class_JavaAbstractSyntax::VariableDeclarationExpression</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::AssertStatement'>
      <data key = 'label'>class_JavaAbstractSyntax::AssertStatement</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::Block'>
      <data key = 'label'>class_JavaAbstractSyntax::Block</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::BreakStatement'>
      <data key = 'label'>class_JavaAbstractSyntax::BreakStatement</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::ConstructorInvocation'>
      <data key = 'label'>class_JavaAbstractSyntax::ConstructorInvocation</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::ContinueStatement'>
      <data key = 'label'>class_JavaAbstractSyntax::ContinueStatement</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::DoStatement'>
      <data key = 'label'>class_JavaAbstractSyntax::DoStatement</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::EmptyStatement'>
      <data key = 'label'>class_JavaAbstractSyntax::EmptyStatement</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::EnhancedForStatement'>
      <data key = 'label'>class_JavaAbstractSyntax::EnhancedForStatement</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::ExpressionStatement'>
      <data key = 'label'>class_JavaAbstractSyntax::ExpressionStatement</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::ForStatement'>
      <data key = 'label'>class_JavaAbstractSyntax::ForStatement</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::IfStatement'>
      <data key = 'label'>class_JavaAbstractSyntax::IfStatement</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::LabeledStatement'>
      <data key = 'label'>class_JavaAbstractSyntax::LabeledStatement</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::ReturnStatement'>
      <data key = 'label'>class_JavaAbstractSyntax::ReturnStatement</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::SuperConstructorInvocation'>
      <data key = 'label'>class_JavaAbstractSyntax::SuperConstructorInvocation</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::SwitchCase'>
      <data key = 'label'>class_JavaAbstractSyntax::SwitchCase</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::SwitchStatement'>
      <data key = 'label'>class_JavaAbstractSyntax::SwitchStatement</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::SynchronizedStatement'>
      <data key = 'label'>class_JavaAbstractSyntax::SynchronizedStatement</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::ThrowStatement'>
      <data key = 'label'>class_JavaAbstractSyntax::ThrowStatement</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::TryStatement'>
      <data key = 'label'>class_JavaAbstractSyntax::TryStatement</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::TypeDeclarationStatement'>
      <data key = 'label'>class_JavaAbstractSyntax::TypeDeclarationStatement</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::VariableDeclarationStatement'>
      <data key = 'label'>class_JavaAbstractSyntax::VariableDeclarationStatement</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::WhileStatement'>
      <data key = 'label'>class_JavaAbstractSyntax::WhileStatement</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::ArrayType'>
      <data key = 'label'>class_JavaAbstractSyntax::ArrayType</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::ParameterizedType'>
      <data key = 'label'>class_JavaAbstractSyntax::ParameterizedType</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::PrimitiveType'>
      <data key = 'label'>class_JavaAbstractSyntax::PrimitiveType</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::QualifiedType'>
      <data key = 'label'>class_JavaAbstractSyntax::QualifiedType</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::SimpleType'>
      <data key = 'label'>class_JavaAbstractSyntax::SimpleType</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::WildcardType'>
      <data key = 'label'>class_JavaAbstractSyntax::WildcardType</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::SingleVariableDeclaration'>
      <data key = 'label'>class_JavaAbstractSyntax::SingleVariableDeclaration</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::VariableDeclarationFragment'>
      <data key = 'label'>class_JavaAbstractSyntax::VariableDeclarationFragment</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::QualifiedName'>
      <data key = 'label'>class_JavaAbstractSyntax::QualifiedName</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::SimpleName'>
      <data key = 'label'>class_JavaAbstractSyntax::SimpleName</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::MarkerAnnotation'>
      <data key = 'label'>class_JavaAbstractSyntax::MarkerAnnotation</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::NormalAnnotation'>
      <data key = 'label'>class_JavaAbstractSyntax::NormalAnnotation</data>
    </node>
    <node id = 'class_JavaAbstractSyntax::SingleMemberAnnotation'>
      <data key = 'label'>class_JavaAbstractSyntax::SingleMemberAnnotation</data>
    </node>
    <node id = 'package_JavaAbstractSyntax'>
      <data key = 'label'>package_JavaAbstractSyntax</data>
    </node>
  </graph>
  <graph id = 'PrimitiveTypesGraph' edgedefault = 'undirected'>
    <node id = 'dataType_String'>
      <data key = 'label'>dataType_String</data>
    </node>
    <node id = 'dataType_Boolean'>
      <data key = 'label'>dataType_Boolean</data>
    </node>
    <node id = 'dataType_Integer'>
      <data key = 'label'>dataType_Integer</data>
    </node>
    <node id = 'dataType_Character'>
      <data key = 'label'>dataType_Character</data>
    </node>
    <node id = 'package_PrimitiveTypes'>
      <data key = 'label'>package_PrimitiveTypes</data>
    </node>
  </graph>
</graphml>
