package Metamodel;

package SDM {
  class SystemDefinitionModel {
    !ordered val Information#sdm information;
    !ordered val Import[*]#sdm ~import;
    !ordered ref DesignData designData;
    !ordered ref SettingDefinitions settingDefinitions;
    !ordered val SDMCommunicationDefinition[*]#sdm communicationDefinition;
    !ordered val SDMContainmentDefinition[*]#sdm containmentDefinition;
    !ordered val SDMDelegationDefinition[*]#sdm delegationDefinition;
    !ordered val SDMReferenceDefinition[*]#sdm referenceDefinition;
    !ordered val SDMEndpointDefinition[*]#sdm endpointDefinition;
    !ordered val SDMResourceDefinition[*]#sdm resourceDefinition;
    !ordered val SDMSystemDefinition[*]#sdm systemDefinition;
    !ordered val SDMConstraintDefinition[*]#sdm constraintDefinition;
    !ordered val SDMManager[*]#sdm manager;
    !ordered ref NameSpace nameSpace;
    !ordered ref NamespaceIdentity[1] namespaceIdentity;
    !ordered ref Culture[*] documentLanguage;
    !ordered ref CompilationHashType[*] compilationHash;
  }

  class Information {
    !ordered ref SystemDefinitionModel[1]#information sdm;
    !unique !ordered attr String friendlyname;
    !unique !ordered attr String companyname;
    !unique !ordered attr String copyright;
    !unique !ordered attr String trademark;
    !ordered ref Description description;
    !unique !ordered attr String comments;
    !ordered ref FourPartVersionType compilerversion;
  }

  class Import {
    !ordered ref SystemDefinitionModel[1]#~import sdm;
    !ordered ref SimpleName[1] alias;
    !ordered val ImportNamespaceIdentity[1]#~import identity;
  }

  class ImportNamespaceIdentity extends NamespaceIdentity {
    !ordered ref Import[1]#identity ~import;
  }

  class SDMCommunicationDefinition extends CommunicationDefinition {
    !ordered ref SystemDefinitionModel[1]#communicationDefinition sdm;
  }

  class SDMContainmentDefinition extends ContainmentDefinition {
    !ordered ref SystemDefinitionModel[1]#containmentDefinition sdm;
  }

  class SDMDelegationDefinition extends DelegationDefinition {
    !ordered ref SystemDefinitionModel[1]#delegationDefinition sdm;
  }

  class SDMReferenceDefinition extends ReferenceDefinition {
    !ordered ref SystemDefinitionModel[1]#referenceDefinition sdm;
  }

  class SDMEndpointDefinition extends EndpointDefinition {
    !ordered ref SystemDefinitionModel[1]#endpointDefinition sdm;
  }

  class SDMResourceDefinition extends ResourceDefinition {
    !ordered ref SystemDefinitionModel[1]#resourceDefinition sdm;
  }

  class SDMSystemDefinition extends SystemDefinition {
    !ordered ref SystemDefinitionModel[1]#systemDefinition sdm;
  }

  class SDMConstraintDefinition extends ConstraintDefinition {
    !ordered ref SystemDefinitionModel[1]#constraintDefinition sdm;
  }

  class SDMManager extends ManagerDeclaration {
    !ordered ref SystemDefinitionModel[1]#manager sdm;
  }

  class ManagerDeclaration {
    !ordered ref Description description;
    !ordered ref SimpleName name;
    !unique !ordered attr String[1] assemblyName;
    !ordered ref FourPartVersionType version;
    !ordered ref PublicKeyTokenType publicKeyToken;
    !ordered ref CultureNeutral culture;
    !unique !ordered attr Platform platform;
    !ordered ref Path sourcePath;
  }

  class ObjectDefinition extends Definition {
    !ordered val OBFlow[*]#objectDefinition flow;
    !ordered val OBRelationshipConstraint[*]#objectDefinition relationshipConstraint;
    !ordered val OBConstraint[*]#objectDefinition constraint;
    !ordered val OBConstraintGroup[*]#objectDefinition constraintGroup;
    !ordered val OBEndpointDefinition[*]#objectDefinition endpointDefinition;
    !ordered val OBSystemDefinition[*]#objectDefinition systemDefinition;
    !ordered val OBResourceDefinition[*]#objectDefinition resourceDefinition;
    !ordered val OBCommunicationDefinition[*]#objectDefinition communicationDefinition;
    !ordered val OBContainmentDefinition[*]#objectDefinition containmentDefinition;
    !ordered val OBDelegationDefinition[*]#objectDefinition delegationDefinition;
    !ordered val OBReferenceDefinition[*]#objectDefinition referenceDefinition;
    !ordered val OBHostingDefinition[*]#objectDefinition hostingDefinition;
    !ordered val OBEndpoint[*]#objectDefinition endpoint;
    !ordered val OBSubsystem[*]#objectDefinition subsystem;
    !ordered val OBResource[*]#objectDefinition resource;
    !ordered val OBHosting[*]#objectDefinition hosting;
    !ordered val OBContainment[*]#objectDefinition containment;
    !ordered val OBConnection[*]#objectDefinition connection;
    !ordered val OBDelegation[*]#objectDefinition delegation;
    !ordered val OBReference[*]#objectDefinition obreference;
    !unique !ordered attr String layer;
    !ordered ref QualifiedName ~extends;
    !unique !ordered attr Boolean ~abstract;
  }

  class OBFlow extends FlowMember {
    !ordered ref ObjectDefinition[1]#flow objectDefinition;
  }

  class OBRelationshipConstraint extends RelationshipConstraint {
    !ordered ref ObjectDefinition[1]#relationshipConstraint objectDefinition;
  }

  class OBConstraint extends ConstraintMember {
    !ordered ref ObjectDefinition[1]#constraint objectDefinition;
  }

  class OBConstraintGroup extends ConstraintGroup {
    !ordered ref ObjectDefinition[1]#constraintGroup objectDefinition;
  }

  class OBEndpointDefinition extends EndpointDefinition {
    !ordered ref ObjectDefinition[1]#endpointDefinition objectDefinition;
  }

  class OBSystemDefinition extends SystemDefinition {
    !ordered ref ObjectDefinition[1]#systemDefinition objectDefinition;
  }

  class OBResourceDefinition extends ResourceDefinition {
    !ordered ref ObjectDefinition[1]#resourceDefinition objectDefinition;
  }

  class OBCommunicationDefinition extends CommunicationDefinition {
    !ordered ref ObjectDefinition[1]#communicationDefinition objectDefinition;
  }

  class OBContainmentDefinition extends ContainmentDefinition {
    !ordered ref ObjectDefinition[1]#containmentDefinition objectDefinition;
  }

  class OBDelegationDefinition extends DelegationDefinition {
    !ordered ref ObjectDefinition[1]#delegationDefinition objectDefinition;
  }

  class OBReferenceDefinition extends ReferenceDefinition {
    !ordered ref ObjectDefinition[1]#referenceDefinition objectDefinition;
  }

  class OBHostingDefinition extends HostingDefinition {
    !ordered ref ObjectDefinition[1]#hostingDefinition objectDefinition;
  }

  class OBEndpoint extends EndpointMember {
    !ordered ref ObjectDefinition[1]#endpoint objectDefinition;
  }

  class OBSubsystem extends SystemMember {
    !ordered ref ObjectDefinition[1]#subsystem objectDefinition;
  }

  class OBResource extends ResourceMember {
    !ordered ref ObjectDefinition[1]#resource objectDefinition;
  }

  class OBHosting extends HostingMember {
    !ordered ref ObjectDefinition[1]#hosting objectDefinition;
  }

  class OBContainment extends ContainmentMember {
    !ordered ref ObjectDefinition[1]#containment objectDefinition;
  }

  class OBConnection extends CommunicationMember {
    !ordered ref ObjectDefinition[1]#connection objectDefinition;
  }

  class OBDelegation extends DelegationMember {
    !ordered ref ObjectDefinition[1]#delegation objectDefinition;
  }

  class OBReference extends ReferenceMember {
    !ordered ref ObjectDefinition[1]#obreference objectDefinition;
  }

  class SystemDefinition extends ObjectDefinition {
    !unique !ordered attr Boolean simulationRoot;
  }

  class EndpointDefinition extends ObjectDefinition {
  }

  class ResourceDefinition extends ObjectDefinition {
  }

  class RelationshipDefinition extends Definition {
    !ordered val RDObjectConstraint[*]#relationshipDefinition objectConstraint;
    !ordered val RDConstraint[*]#relationshipDefinition constraint;
    !ordered val RDConstraintGroup[*]#relationshipDefinition constraintGroup;
    !ordered val RDFlow[*]#relationshipDefinition flow;
    !ordered val RDConnection[*]#relationshipDefinition connection;
    !ordered val RDHosting[*]#relationshipDefinition hosting;
    !ordered val RDDelegation[*]#relationshipDefinition delegation;
    !ordered val RDReference[*]#relationshipDefinition reference;
    !ordered val RDContainment[*]#relationshipDefinition containment;
    !ordered ref QualifiedName[1] ~extends;
    !unique !ordered attr Boolean ~abstract;
  }

  class RDObjectConstraint extends ObjectConstraint {
    !ordered ref RelationshipDefinition[1]#objectConstraint relationshipDefinition;
  }

  class RDConstraint extends ConstraintMember {
    !ordered ref RelationshipDefinition[1]#constraint relationshipDefinition;
  }

  class RDConstraintGroup extends ConstraintGroup {
    !ordered ref RelationshipDefinition[1]#constraintGroup relationshipDefinition;
  }

  class RDFlow extends FlowMember {
    !ordered ref RelationshipDefinition[1]#flow relationshipDefinition;
  }

  class RDConnection extends CommunicationMember {
    !ordered ref RelationshipDefinition[1]#connection relationshipDefinition;
  }

  class RDHosting extends HostingMember {
    !ordered ref RelationshipDefinition[1]#hosting relationshipDefinition;
  }

  class RDDelegation extends DelegationMember {
    !ordered ref RelationshipDefinition[1]#delegation relationshipDefinition;
  }

  class RDReference extends ReferenceMember {
    !ordered ref RelationshipDefinition[1]#reference relationshipDefinition;
  }

  class RDContainment extends ContainmentMember {
    !ordered ref RelationshipDefinition[1]#containment relationshipDefinition;
  }

  class CommunicationDefinition extends RelationshipDefinition {
    !ordered ref QualifiedName[1] clientDefinition;
    !ordered ref QualifiedName[1] serverDefinition;
  }

  class HostingDefinition extends RelationshipDefinition {
    !ordered ref QualifiedName[1] guestDefinition;
    !ordered ref QualifiedName[1] hostDefinition;
    !unique !ordered attr Boolean[1] simulationRoot;
  }

  class ContainmentDefinition extends RelationshipDefinition {
    !ordered ref QualifiedName[1] parentDefinition;
    !ordered ref QualifiedName[1] memberDefinition;
  }

  class DelegationDefinition extends RelationshipDefinition {
    !ordered ref QualifiedName[1] proxyDefinition;
    !ordered ref QualifiedName[1] delegateDefinition;
  }

  class ReferenceDefinition extends RelationshipDefinition {
    !ordered ref QualifiedName[1] dependentDefinition;
    !ordered ref QualifiedName[1] sourceDefinition;
  }

  class Member {
    !ordered ref Description[*] description;
    !ordered ref DesignData[1] designData;
    !ordered val MembSettingValue[*]#member settingValue;
    !ordered val MembSettingValueList[*]#member settingValueList;
    !ordered ref SimpleName[1] name;
    !ordered ref QualifiedName[1] definition;
  }

  class MembSettingValue extends SettingValue {
    !ordered ref Member[1]#settingValue member;
  }

  class MembSettingValueList extends SettingValueList {
    !ordered ref Member[1]#settingValueList member;
  }

  class ObjectMember extends Member {
    !ordered ref MinOccurs minOccurs;
    !ordered ref MaxOccurs maxOccurs;
    !unique !ordered attr Boolean[1] reference;
    !unique !ordered attr Boolean proxy;
  }

  class RelationshipMember extends Member {
  }

  class SystemMember extends ObjectMember {
  }

  class EndpointMember extends ObjectMember {
  }

  class ResourceMember extends ObjectMember {
  }

  class HostingMember extends RelationshipMember {
    !ordered ref Path[1] guestMember;
    !ordered ref Path[1] hostMember;
  }

  class CommunicationMember extends RelationshipMember {
    !ordered ref Path[1] clientMember;
    !ordered ref Path[1] serverMember;
  }

  class ContainmentMember extends RelationshipMember {
    !ordered ref Path[1] childMember;
  }

  class DelegationMember extends RelationshipMember {
    !ordered ref Path[1] proxyMember;
    !ordered ref Path[1] delegateMember;
  }

  class ReferenceMember extends RelationshipMember {
    !ordered ref Path[1] dependentMember;
    !ordered ref Path[1] sourceMember;
  }

  class DesignData {
    !ordered val NameSpace[*]#designData nameSpace;
  }

  class NameSpace extends Element {
    !ordered ref DesignData[1]#nameSpace designData;
  }

  class ObjectConstraint extends StructuralConstraint {
    !ordered val OCConstraint[*]#objectConstraint constraint;
    !ordered val OCRelationshipConstraint[*]#objectConstraint_OC relationshipConstraint;
    !ordered val OCConstraintGroup[*]#objectConstraint_OC constraintGroup;
    !unique !ordered attr RolesList[1] primaryRole;
    !ordered ref QualifiedName[1] primaryObjectDefinition;
    !unique !ordered attr RolesList[*] secondaryRole;
    !ordered ref QualifiedName[*] secondaryObjectDefinition;
    !ordered ref MinOccurs[*] minOccurs;
    !ordered ref MaxOccurs[*] maxOccurs;
  }

  class OCConstraint extends ConstraintMember {
    !ordered ref ObjectConstraint[1]#constraint objectConstraint;
  }

  class OCRelationshipConstraint extends RelationshipConstraint {
    !ordered ref ObjectConstraint[1]#relationshipConstraint objectConstraint_OC;
  }

  class OCConstraintGroup extends ConstraintGroup {
    !ordered ref ObjectConstraint[1]#constraintGroup objectConstraint_OC;
  }

  class RelationshipConstraint extends StructuralConstraint {
    !ordered val RCConstraint[*]#relationshipConstraint constraint;
    !ordered val RCRelationshipConstraint[*]#relationshipConstraint_RC relationshipConstraint;
    !ordered val RCObjectConstraint[*]#relationshipConstraint_RC objectConstraint;
    !ordered val RCConstraintGroup[*]#relationshipConstraint_RC constraintGroup;
    !ordered ref QualifiedName[1] relationshipDefinition;
    !unique !ordered attr RolesList[1] targetRole;
    !ordered ref QualifiedName targetObjectDefinition;
    !ordered ref MinOccurs minOccurs;
    !ordered ref MaxOccurs maxOccurs;
    !unique !ordered attr Boolean delegationAware;
  }

  class RCConstraint extends ConstraintMember {
    !ordered ref RelationshipConstraint[1]#constraint relationshipConstraint;
  }

  class RCRelationshipConstraint extends RelationshipConstraint {
    !ordered ref RelationshipConstraint[1]#relationshipConstraint relationshipConstraint_RC;
  }

  class RCObjectConstraint extends ObjectConstraint {
    !ordered ref RelationshipConstraint[1]#objectConstraint relationshipConstraint_RC;
  }

  class RCConstraintGroup extends ConstraintGroup {
    !ordered ref RelationshipConstraint[1]#constraintGroup relationshipConstraint_RC;
  }

  class ConstraintGroup extends StructuralConstraint {
    !ordered val CGConstraint[*]#constraintGroup constraint;
    !ordered val CGRelationshipConstraint[*]#constraintGroup_CG relationshipConstraint;
    !ordered val CGObjectConstraint[*]#constraintGroup_CG objectConstraint;
  }

  class CGConstraint extends ConstraintMember {
    !ordered ref ConstraintGroup[1]#constraint constraintGroup;
  }

  class CGRelationshipConstraint extends RelationshipConstraint {
    !ordered ref ConstraintGroup[1]#relationshipConstraint constraintGroup_CG;
  }

  class CGObjectConstraint extends ObjectConstraint {
    !ordered ref ConstraintGroup[1]#objectConstraint constraintGroup_CG;
  }

  class StructuralConstraint {
    !ordered ref Description description;
    !ordered ref DesignData designData;
    !ordered ref SimpleName[1] name;
    !unique !ordered attr ConstraintEvaluation evaluate;
    !unique !ordered attr Boolean raiseError;
    !unique !ordered attr Boolean returnEarly;
  }

  class ConstraintDefinition extends Definition {
    !ordered val CDRelationshipConstraint[*]#constraintDefinition relationshipConstraint;
    !ordered val CDConstraintGroup[*]#constraintDefinition constraintGroup;
    !ordered val CDObjectConstraint[*]#constraintDefinition objectConstraint;
    !ordered val CDConstraint[*]#constraintDefinition constraint;
    !ordered ref QualifiedName targetDefinition;
    !unique !ordered attr Boolean returnEarly;
  }

  class CDRelationshipConstraint extends RelationshipConstraint {
    !ordered ref ConstraintDefinition[1]#relationshipConstraint constraintDefinition;
  }

  class CDConstraintGroup extends ConstraintGroup {
    !ordered ref ConstraintDefinition[1]#constraintGroup constraintDefinition;
  }

  class CDObjectConstraint extends ObjectConstraint {
    !ordered ref ConstraintDefinition[1]#objectConstraint constraintDefinition;
  }

  class CDConstraint extends ConstraintMember {
    !ordered ref ConstraintDefinition[1]#constraint constraintDefinition;
  }

  class ConstraintMember extends Member {
    !ordered ref Input[*] input;
    !unique !ordered attr Boolean raiseError;
    !unique !ordered attr ConstraintEvaluation evaluate;
  }

  class Definition {
    !ordered ref Description description;
    !ordered ref DesignData designData;
    !ordered val DefSettingDeclaration[*]#definition_DSD settingDeclaration;
    !ordered val DefSettingValue[*]#definition settingValue;
    !ordered val DefSettingValueList[*]#definition settingValueList;
    !ordered ref SimpleName[1] name;
    !ordered ref QualifiedName manager;
    !unique !ordered attr String className;
  }

  class DefSettingDeclaration extends SettingMember {
    !ordered ref Definition[1]#settingDeclaration definition_DSD;
  }

  class DefSettingValue extends SettingValue {
    !ordered ref Definition[1]#settingValue definition;
  }

  class DefSettingValueList extends SettingValueList {
    !ordered ref Definition[1]#settingValueList definition;
  }

  class SimpleName extends Element {
  }

  class QualifiedName extends Element {
  }

  class Path extends Element {
  }

  class SettingPath extends Element {
  }

  class NamespaceIdentity {
    !ordered ref Path[1] name;
    !ordered ref FourPartVersionType version;
    !ordered ref PublicKeyType publicKey;
    !ordered ref PublicKeyTokenType publicKeyToken;
    !ordered ref CultureNeutral culture;
    !unique !ordered attr Platform platform;
  }

  class FlowDefinition extends Definition {
  }

  class FlowMember extends Member {
    !ordered ref Input[*] input;
    !ordered ref Output[*] output;
  }

  class ValueTransfer {
    !ordered ref SimpleName[1] name;
    !ordered ref SettingPath[1] path;
    !unique !ordered attr Boolean cast;
    !unique !ordered attr Boolean convert;
  }

  class Output extends ValueTransfer {
    !unique !ordered attr Boolean fixed;
    !unique !ordered attr Boolean replace;
  }

  class Input extends ValueTransfer {
  }

  class SettingDefinitions {
    !ordered ref NameSpace nameSpace;
    !ordered ref QualifiedName[1] manager;
    !unique !ordered attr String[1] clrNameSpace;
  }

  class SettingMember extends Member {
    !ordered ref Facet[*] facet;
    !ordered ref SettingsAttributes[1] settingAttributes;
  }

  class SettingsAttributes {
    !unique !ordered attr Boolean[1] list;
    !unique !ordered attr SettingMemberAccess[1] access;
    !unique !ordered attr SettingMemberSecure[1] secure;
    !unique !ordered attr Boolean[1] deploymentTime;
    !unique !ordered attr Boolean[1] required;
    !unique !ordered attr Boolean[1] canBeNull;
    !unique !ordered attr Boolean[1] elementsCanBeNull;
    !unique !ordered attr String[1] defaultRead;
    !unique !ordered attr String[1] defaultWrite;
  }

  enum SettingMemberAccess {
    ReadWrite = 0;
    ReadOnly = 0;
    WriteOnly = 0;
  }

  enum SettingMemberSecure {
    Always = 0;
    PerInstance = 0;
    Never = 0;
  }

  class Facet {
    !ordered ref SimpleName[1] name;
  }

  class SettingValue {
    !unique !ordered attr String[*] contents;
    !ordered ref SettingValueAttributes[1] settingValueAttributes;
  }

  class SettingValueList {
    !ordered ref Value[*] value;
    !ordered ref SettingValueAttributes[1] settingValueAttributes;
  }

  class Value {
    !unique !ordered attr String[*] contents;
    !unique !ordered attr Boolean[1] null;
  }

  class SettingValueAttributes {
    !ordered ref SettingPath[1] path;
    !unique !ordered attr Boolean null;
    !unique !ordered attr Boolean fixed;
    !unique !ordered attr Boolean unset;
    !ordered ref QualifiedName definition;
    !unique !ordered attr Boolean convert;
    !unique !ordered attr Boolean secure;
    !unique !ordered attr Boolean reference;
  }

  class Description {
    !ordered val Entry[*]#description entry;
    !unique !ordered attr String resourceId;
    !ordered ref QualifiedName manager;
  }

  class Entry extends DescriptionEntry {
    !ordered ref Description[1]#entry description;
  }

  class DescriptionEntry {
    !unique !ordered attr String[1] name;
    !unique !ordered attr String resourceId;
    !ordered ref QualifiedName manager;
    !ordered val Substitute#descriptionEntry substitute;
  }

  class Substitute extends PathList {
    !ordered val DescriptionEntry#substitute descriptionEntry;
  }

  class PathList {
    !ordered ref SettingPath[*] settingPath;
  }

  class MaxOccurs extends Element {
  }

  class MinOccurs extends Element {
  }

  class FourPartVersionType extends Element {
  }

  class PublicKeyType extends Element {
  }

  class PublicKeyTokenType extends Element {
  }

  class CompilationHashType extends Element {
  }

  enum RolesList {
    Host = 0;
    Guest = 0;
    Parent = 0;
    Member = 0;
    Source = 0;
    Dependent = 0;
    Proxy = 0;
    Delegate = 0;
    Client = 0;
    Server = 0;
  }

  class Culture extends Element {
  }

  class CultureNeutral extends Element {
  }

  enum ProcessorArchitectures {
    x86 = 0;
    ia64 = 0;
    amd64 = 0;
    wow64 = 0;
    msil = 0;
    shx = 0;
    arm = 0;
    data = 0;
  }

  enum Platform {
    x86 = 0;
    ia64 = 0;
    amd64 = 0;
    wow64 = 0;
    msil = 0;
    shx = 0;
    arm = 0;
    data = 0;
    * = 0;
    neutral = 0;
  }

  enum ConstraintEvaluation {
    Design = 0;
    Never = 0;
  }

  class Element {
    !unique !ordered attr String[1] value;
  }

}

package PrimitiveTypes {
  datatype String : "";

  datatype Integer : "";

  datatype Boolean : "";

}

