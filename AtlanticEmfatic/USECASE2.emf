package Metamodel;

package USECASEUML {
  class Requirement {
  }

  class NonFunctionnelRequirement extends Requirement {
    !ordered ref UseCase[*]#scoped_by scopes;
  }

  class FunctionnelRequirement extends Requirement {
    !ordered ref UseCase[*]#specified_by specifies;
  }

  class UseCase {
    !ordered ref ScenarioDescription[*]#useCase scenario;
    !ordered ref Condition[*]#constrained_with condition;
    !ordered ref Role[*]#interacted_with interacter;
    !ordered ref FunctionnelRequirement[*]#specifies specified_by;
    !ordered ref NonFunctionnelRequirement[*]#scopes scoped_by;
    !ordered ref Goal[+]#to_meet meet_by;
  }

  class Goal {
    !ordered ref UseCase[+]#meet_by to_meet;
  }

  class Role {
    !ordered ref UseCase[*]#interacter interacted_with;
  }

  class HumanRole extends Role {
  }

  class SystemRole extends Role {
  }

  class EventRole extends Role {
  }

  class Manage extends UseCase {
    !ordered ref Resource[*] managed_Resource;
  }

  class Resource {
  }

  class ScenarioDescription {
    !ordered ref UseCase[1]#scenario useCase;
  }

  class Condition {
    !ordered ref UseCase[*]#condition constrained_with;
  }

  class Pre extends Condition {
  }

  class Post extends Condition {
  }

}

package PrimitiveTypes {
  datatype String : "";

  datatype Boolean : "";

  datatype Integer : "";

}

