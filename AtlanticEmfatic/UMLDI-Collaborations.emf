package Metamodel;

package Core {
  abstract class Element {
  }

  abstract class ModelElement extends Element {
    !ordered ref Namespace#ownedElement namespace;
    !unique !ordered attr String name;
    !unique !ordered attr Data_Types.VisibilityKind visibility;
    !unique !ordered attr Boolean[1] isSpecification;
  }

  abstract class GeneralizableElement extends ModelElement {
    !ordered ref Generalization[*]#child generalization;
    !unique !ordered attr Boolean[1] isRoot;
    !unique !ordered attr Boolean[1] isLeaf;
    !unique !ordered attr Boolean[1] isAbstract;
  }

  abstract class Namespace extends ModelElement {
    !ordered val ModelElement[*]#namespace ownedElement;
  }

  abstract class Classifier extends GeneralizableElement, Namespace {
    !ordered ref Generalization[*]#powertype powertypeRange;
    val Feature[*]#owner feature;
  }

  abstract class Feature extends ModelElement {
    !ordered ref Classifier#feature owner;
    !unique !ordered attr Data_Types.ScopeKind[1] ownerScope;
  }

  abstract class StructuralFeature extends Feature {
    !ordered ref Classifier[1] type;
    !unique !ordered attr Data_Types.Multiplicity multiplicity;
    !unique !ordered attr Data_Types.ChangeableKind changeability;
    !unique !ordered attr Data_Types.ScopeKind targetScope;
    !unique !ordered attr Data_Types.OrderingKind ordering;
  }

  class AssociationEnd extends ModelElement {
    !ordered ref Association[1]#connection association;
    !ordered ref Classifier[*] specification;
    !ordered ref Classifier[1] participant;
    val Attribute[*]#associationEnd qualifier;
    !unique !ordered attr Boolean[1] isNavigable;
    !unique !ordered attr Data_Types.OrderingKind ordering;
    !unique !ordered attr Data_Types.AggregationKind aggregation;
    !unique !ordered attr Data_Types.ScopeKind targetScope;
    !unique !ordered attr Data_Types.Multiplicity multiplicity;
    !unique !ordered attr Data_Types.ChangeableKind changeability;
  }

  abstract class Relationship extends ModelElement {
  }

  class Association extends GeneralizableElement, Relationship {
    val AssociationEnd[2..*]#association connection;
  }

  class Attribute extends StructuralFeature {
    !ordered ref AssociationEnd#qualifier associationEnd;
    !unique !ordered attr Data_Types.Expression initialValue;
  }

  abstract class BehavioralFeature extends Feature {
    val Parameter[*]#behavioralFeature parameter;
    !unique !ordered attr Boolean[1] isQuery;
  }

  class Operation extends BehavioralFeature {
    !unique !ordered attr Data_Types.CallConcurrencyKind concurrency;
    !unique !ordered attr Boolean[1] isRoot;
    !unique !ordered attr Boolean[1] isLeaf;
    !unique !ordered attr Boolean[1] isAbstract;
    !unique !ordered attr String specification;
  }

  class Parameter extends ModelElement {
    !ordered ref Classifier[1] type;
    !ordered ref BehavioralFeature#parameter behavioralFeature;
    !unique !ordered attr Data_Types.Expression defaultValue;
    !unique !ordered attr Data_Types.ParameterDirectionKind[1] kind;
  }

  class Generalization extends Relationship {
    !ordered ref GeneralizableElement[1] parent;
    !ordered ref Classifier#powertypeRange powertype;
    !ordered ref GeneralizableElement[1]#generalization child;
    !unique !ordered attr String discriminator;
  }

}

package Common_Behavior {
  abstract class Instance extends Core.ModelElement {
    !ordered val Instance[*] ownedInstance;
    !ordered ref LinkEnd[*]#instance linkEnd;
    !ordered ref Core.Classifier[+] classifier;
    !ordered ref ComponentInstance#resident componentInstance;
    !ordered val AttributeLink[*]#instance slot;
    !ordered val Link[*] ownedLink;
  }

  class Signal extends Core.Classifier {
  }

  abstract class Action extends Core.ModelElement {
    val Argument[*]#action actualArgument;
    !ordered ref ActionSequence#action actionSequence;
    !unique !ordered attr Data_Types.IterationExpression recurrence;
    !unique !ordered attr Data_Types.ObjectSetExpression target;
    !unique !ordered attr Boolean[1] isAsynchronous;
    !unique !ordered attr Data_Types.ActionExpression script;
  }

  class CreateAction extends Action {
    !ordered ref Core.Classifier[1] instantiation;
  }

  class DestroyAction extends Action {
  }

  class UninterpretedAction extends Action {
  }

  class AttributeLink extends Core.ModelElement {
    !ordered ref Instance#slot instance;
    !ordered ref Instance[1] value;
    !ordered ref LinkEnd#qualifiedValue linkEnd;
    !ordered ref Core.Attribute[1] attribute;
  }

  class Object extends Instance {
  }

  class Link extends Core.ModelElement {
    !ordered ref Core.Association[1] association;
    !ordered val LinkEnd[2..*]#link connection;
  }

  class LinkObject extends Object, Link {
  }

  class DataValue extends Instance {
  }

  class CallAction extends Action {
    !ordered ref Core.Operation[1] operation;
  }

  class SendAction extends Action {
    !ordered ref Signal[1] signal;
  }

  class ActionSequence extends Action {
    val Action[*]#actionSequence action;
  }

  class Argument extends Core.ModelElement {
    !ordered ref Action#actualArgument action;
    !unique !ordered attr Data_Types.Expression[1] value;
  }

  class Reception extends Core.BehavioralFeature {
    !ordered ref Signal[1] signal;
    !unique !ordered attr String specification;
    !unique !ordered attr Boolean[1] isRoot;
    !unique !ordered attr Boolean[1] isLeaf;
    !unique !ordered attr Boolean[1] isAbstract;
  }

  class LinkEnd extends Core.ModelElement {
    !ordered ref Link[1]#connection link;
    val AttributeLink[*]#linkEnd qualifiedValue;
    !ordered ref Instance[1]#linkEnd instance;
    !ordered ref Core.AssociationEnd[1] associationEnd;
  }

  class ReturnAction extends Action {
  }

  class TerminateAction extends Action {
  }

  class Stimulus extends Core.ModelElement {
    ref Instance[*] argument;
    !ordered ref Link communicationLink;
    !ordered ref Instance[1] receiver;
    !ordered ref Action[1] dispatchAction;
    !ordered ref Instance[1] sender;
  }

  class Exception extends Signal {
  }

  class ComponentInstance extends Instance {
    !ordered ref Instance[*]#componentInstance resident;
    !ordered ref NodeInstance#resident nodeInstance;
  }

  class NodeInstance extends Instance {
    !ordered ref ComponentInstance[*]#nodeInstance resident;
  }

  class SubsystemInstance extends Instance {
  }

}

package Collaborations {
  class Collaboration extends Core.GeneralizableElement, Core.Namespace {
    !ordered ref Collaboration[*] usedCollaboration;
    !ordered ref Core.Operation representedOperation;
    !ordered ref Core.Classifier representedClassifier;
    !ordered val Interaction[*]#context interaction;
    !ordered ref Core.ModelElement[*] constrainingElement;
  }

  class ClassifierRole extends Core.Classifier {
    !ordered ref Core.ModelElement[*] availableContents;
    !ordered ref Core.Classifier[+] base;
    !ordered ref Common_Behavior.Instance[*] conformingInstance;
    !ordered ref Core.Feature[*] availableFeature;
    !unique !ordered attr Data_Types.Multiplicity multiplicity;
  }

  class AssociationRole extends Core.Association {
    !ordered ref Core.Association base;
    !ordered ref Common_Behavior.Link[*] conformingLink;
    !ordered ref Message[*]#communicationConnection message;
    !unique !ordered attr Data_Types.Multiplicity multiplicity;
  }

  class AssociationEndRole extends Core.AssociationEnd {
    !ordered ref Core.AssociationEnd base;
    !ordered ref Core.Attribute[*] availableQualifier;
    !unique !ordered attr Data_Types.Multiplicity collaborationMultiplicity;
  }

  class Message extends Core.ModelElement {
    !ordered ref Interaction[1]#message interaction;
    !ordered ref Common_Behavior.Stimulus[*] conformingStimulus;
    !ordered ref Common_Behavior.Action[1] action;
    !ordered ref AssociationRole#message communicationConnection;
    !ordered ref Message activator;
    !ordered ref ClassifierRole[1] receiver;
    !ordered ref ClassifierRole[1] sender;
    !ordered ref Message[*] predecessor;
  }

  class Interaction extends Core.ModelElement {
    !ordered val Message[+]#interaction message;
    !ordered ref Collaboration[1]#interaction context;
  }

  class InteractionInstanceSet extends Core.ModelElement {
    !ordered ref Interaction interaction;
    !ordered ref CollaborationInstanceSet[1]#interactionInstanceSet context;
    !ordered ref Common_Behavior.Stimulus[+] participatingStimulus;
  }

  class CollaborationInstanceSet extends Core.ModelElement {
    !ordered ref Collaboration collaboration;
    !ordered ref Core.ModelElement[*] constrainingElement;
    !ordered ref Common_Behavior.Instance[+] participatingInstance;
    !ordered val InteractionInstanceSet[*]#context interactionInstanceSet;
    !ordered ref Common_Behavior.Link[*] participatingLink;
  }

}

package Data_Types {
  enum AggregationKind {
    ak_none = 0;
    ak_aggregate = 0;
    ak_composite = 0;
  }

  enum ChangeableKind {
    ck_changeable = 0;
    ck_frozen = 0;
    ck_addOnly = 0;
  }

  enum OrderingKind {
    ok_unordered = 0;
    ok_ordered = 0;
  }

  enum CallConcurrencyKind {
    cck_sequential = 0;
    cck_guarded = 0;
    cck_concurrent = 0;
  }

  enum ParameterDirectionKind {
    pdk_in = 0;
    pdk_inout = 0;
    pdk_out = 0;
    pdk_return = 0;
  }

  enum ScopeKind {
    sk_instance = 0;
    sk_classifier = 0;
  }

  enum VisibilityKind {
    vk_public = 0;
    vk_protected = 0;
    vk_private = 0;
    vk_package = 0;
  }

  class Multiplicity {
    !ordered val MultiplicityRange[+]#multiplicity range;
  }

  class MultiplicityRange {
    !ordered ref Multiplicity[1]#range multiplicity;
    !unique !ordered attr Integer[1] lower;
    !unique !ordered attr Integer[1] upper;
  }

  class Expression {
    !unique !ordered attr String language;
    !unique !ordered attr String[1] body;
  }

  class BooleanExpression extends Expression {
  }

  class ObjectSetExpression extends Expression {
  }

  class ActionExpression extends Expression {
  }

  class IterationExpression extends Expression {
  }

}

package PrimitiveTypes {
  datatype Boolean : "";

  datatype Float : "";

  datatype Integer : "";

  datatype Long : "";

  datatype String : "";

  datatype Double : "";

}

