-- @name		WordprocessingMLBasicDef
-- @version		1.2
-- @domains		Microsoft Office Word, XML
-- @authors		Hugo Bruneliere (hugo.bruneliere <at> gmail.com)
-- @date		2005/07/01
-- @extends		WordprocessingMLSimplified
-- @description	This metamodel describes a basic subset of WordprocessingML, an XML dialect developed by Microsoft to represent the information in an Word document. This metamodel takes back in details the concepts expressed in the simplified WordprocessingML metamodel and adds the notion of Office document properties.
-- @see			office.xsd, wordnet.xsd; Microsoft Office 2003 XML Reference Schemas; http://www.microsoft.com/downloads/details.aspx?familyid=FE118952-3547-420A-A412-00A2662442D9&displaylang=en

package WordprocessingMLBasicDef {

-- @begin MS Office - Special Types definition

	-- @comment The format for date/time fields is yyyy-mm-ddThh:mm:ssZ. (This format can be described as follows: a four-digit year, hyphen, two-digit month, hyphen, two-digit day, uppercase letter T, two-digit hour, colon, two-digit minute value, colon, two-digit seconds value, uppercase letter Z.).
	class DateTimeType {
		attribute year : Integer;
		attribute month : Integer;
		attribute day : Integer;
		attribute hour : Integer;
		attribute minute : Integer;
		attribute second : Integer;	
	}
	
	-- @comment The format for the version is n.nn.
	class VersionType {
		attribute n : Integer;
		attribute nn : Integer;
	}
	
	-- @comment Office manages four types of value : String, Float, DateTime and Boolean.
	abstract class ValueType {}
	
	class StringValue extends ValueType {
		attribute value : String;
	}
	
	class FloatValue extends ValueType {
		attribute value : Double;
	}
	
	class DateTimeTypeValue extends ValueType {
		reference value : DateTimeType;
	}
	
	class BooleanValue extends ValueType {
		attribute value : Boolean;
	}
	
-- @end MS Office - Special Types definition


-- @begin MS Office - Office Document Common Properties
-- @comment This zone describes elements that are shared by Microsoft Office Word 2003 and Microsoft Office Excel 2003. They contain general document properties (author, createdate, etc.), document summary and statistics (word count, etc.), custom document properties and information related to smart tags that appear in a document.

	-- @comment Defines the collection of standard document properties.
	class DocumentPropertiesCollection {
		reference dp_wordDocument : WordDocument oppositeOf wd_docProperties;
	
		-- @comment The title of a document. The title can be different from the file name. 
		attribute title[0-1] : String;
		-- @comment The subject of the document. This property may be used to group similar files.
		attribute subject[0-1] : String;
		-- @comment Keywords may be used when searching for the document.
		attribute keywords[0-1] : String;
		-- @comment The short description of the document. Comments may also be used when searching for the document. 
		attribute description[0-1] : String;
		-- @comment The category of the file. This property may be used to group similar files.
		attribute category[0-1] : String;
		-- @comment  The name of the person who first created the document. The name of the person who last saved the document is contained in the "lastAuthor" attribute. 
		attribute author[0-1] : String;
		-- @comment  The name of the person who last saved the document. The original author is contained in the "author" attribute. 
		attribute lastAuthor[0-1] : String;
		-- @comment The name of the author's manager. This property may be used in searches to group all the documents of authors having the same manager. 
		attribute manager[0-1] : String;
		-- @comment	 The author's employer. This property may be used in searches to group all of the documents from the same company. 
		attribute company[0-1] : String;
		-- @comment	The path or URL that is used for all hyperlinks with the same base address in a document. This property can be an Internet address (for example, http://www.microsoft.com), a path to a folder on your hard disk (for example, c:\personal\documents), or a path to a folder on a network (for example, \\exampleserver\public\documents). 
		attribute hyperlinkBase[0-1] : String;
		-- @comment	The number of times the document was saved. If no change was made since the document was last saved, this number is not updated in Word. 
		attribute revision[0-1] : Integer;
		-- @comment The viewing format of a document.
		attribute presentationFormat[0-1] : String;
		-- @comment A unique identification number for the document. 
		attribute guid[0-1] : String;
		-- @comment  The name of the application that last updated the document. Word and Excel do not update this element. 
		attribute appName[0-1] : String;
		-- @comment The version of the application used to create the document. Word and Excel update this element. 
		reference version[0-1] container : VersionType;
		-- @comment The number of minutes since it was created that the document was open for making changes (even if no changes are made). 
		attribute totalTime[0-1] : Integer;
		-- @comment The date and time that the document was last printed. Word omits this element if the document has not been printed.  
		reference lastPrinted[0-1] container : DateTimeType;
		-- @comment The date and time that the document was created. 
		reference created[0-1] container : DateTimeType;
		-- @comment The date and time that the document was last saved. 
		reference lastSaved[0-1] container : DateTimeType;
		-- @comment An estimate of the number of pages in the document. 
		attribute pages[0-1] : Integer;
		-- @comment  An estimate of the number of words in the document. 
		attribute words[0-1] : Integer;
		-- @comment An estimate of the number of characters in the document, not counting spaces.
		attribute characters[0-1] : Integer;
		-- @comment An estimate of the number of characters in the document, counting spaces. 
		attribute charactersWithSpaces[0-1] : Integer;
		-- @comment An estimate of the number of bytes in the document. 
		attribute bytes[0-1] : Integer;
		-- @comment An estimate of the number of lines in the document. 
		attribute lines[0-1] : Integer;
		-- @comment An estimate of the number of paragraphs in the document. 
		attribute paragraphs[0-1] : Integer;
	} 
	
	-- @comment Defines the collection of custom document properties.
	class CustomDocumentPropertiesCollection {
		reference cdp_wordDocument : WordDocument oppositeOf wd_customDocProperties;
		
		reference customDocumentProperties[1-*] container :  CustomDocumentProperty oppositeOf customDocumentProperty_cdpe;
	} 

	-- @comment A custom property is a name/value pair.
	class CustomDocumentProperty {
		reference customDocumentProperty_cdpe : CustomDocumentPropertiesCollection oppositeOf customDocumentProperties;
		attribute name : String;
		-- @comment Defines the value of the custom property in the correct type
		reference value container : ValueType;
	}

	-- @comment Defines a smart tag used in the document.
	class SmartTagType {
		reference smartTagType_ste : SmartTagsCollection oppositeOf smartTagTypes;
	
		-- @comment Gets or sets the namespace Uniform Resource Identifier (URI) for a smart tag
		attribute namespaceuri : String;
		-- @comment Gets or sets the element name used for a smart tag
		attribute name : String;
		-- @comment Gets or sets the URL for a smart tag provided by the smart tag provider
		attribute url[0-1] : String;
	}
	
	-- @comment Defines a a collection of smart tags.
	class SmartTagsCollection {
		reference st_wordDocument : WordDocument oppositeOf wd_smartTags;
		
		reference smartTagTypes[*] container : SmartTagType oppositeOf smartTagType_ste;
	}

-- @end MS Office - Office Document Common Properties


-- @begin MS Office - Word special types
	
		-- @comment Defines a property that uses a string.
		class StringProperty extends StringType {}
		
		-- @comment Defines the string value type
		class StringType {
			-- @comment Gets or sets the value of a string.
			attribute val : String;
		}
	
		-- @comment Specifies the different break types.
		enumeration BreakType {
			literal bt_page;
			literal bt_column;
			literal bt_text_wrapping;
		}
		
		-- @comment Specifies the different footnote/endnote values
		enumeration NoteValue {
			-- @comment Normal footnote/endnote.
			literal ftn_normal;
			-- @comment Separates document text from footnotes/endnotes.
			literal ftn_separator;
			-- @comment Is printed above footnotes/endnotes on the next page when footnotes/endnotes overflow onto the next page.
			literal ftn_continuation_separator;
			-- @comment A notice to let readers now that the footnotes/endnotes have continued on the next page.
			literal ftn_continuation_notice;
		}
		
		-- @comment Defines the two different values of the On/Off type.
		enumeration OnOffType {
			literal oot_on;
			literal oot_off;
		}
		
		-- @comment Defines a property that uses a field character type.
		enumeration FldCharTypeProperty {
			literal fctp_begin;
			literal fctp_separate;
			literal fctp_end;
		}
		
-- @end MS Office - Word special types
	
	
-- @begin MS Office - Word Document Basic Definition
	
	-- @comment Defines a Microsoft Office Word 2003 document.
	class WordDocument {
		-- @comment Defines the general properties of the Office document
		reference wd_smartTags[0-1] container : SmartTagsCollection oppositeOf st_wordDocument; 
		reference wd_docProperties[0-1] container : DocumentPropertiesCollection oppositeOf dp_wordDocument;
		reference wd_customDocProperties[0-1] container : CustomDocumentPropertiesCollection oppositeOf cdp_wordDocument;
					
		-- @comment Specifies whether to ignore an element and its contents. If a namespace is specified for the ignoreSubtree element's val attribute (val=uri), when Word encounters an element in this namespace, Word will ignore the element and all of its contents.
		reference ignoreSubtree[0-1] container : StringProperty;
		-- @comment Specifies whether to ignore an element, but process its contents. If a namespace is specified for the ignoreElements element's val attribute (val=uri), when Word encounters an element in this namespace, Word ignores only the element (all of the element's contents will be processed).
		reference ignoreElements[0-1] container : StringProperty;		
			
		-- @comment Represents the font definitions.
		reference fonts[0-1] container : FontsListElt oppositeOf fle_wordDocument;
		-- @comment Represents the list definitions (for example, the Bullets and Numbering options).
		reference lists[0-1] container : ListsElt oppositeOf le_wordDocument;
		-- @comment Represents the style definitions.
		reference styles[0-1] container : StylesElt oppositeOf se_wordDocument;	
		-- @comment Represents the document properties.
		reference docPr[0-1] container : DocPrElt oppositeOf dpe_wordDocument;		
		
		-- @comment Contains the body of the document.
		reference body container : BodyElt oppositeOf be_wordDocument;		
			
		-- @comment Macros, HTML, embedded objects and OCX controls are not managed by this metamodel.
	}

	-- @comment Defines the document properties.
	class DocPrElt {
		reference dpe_wordDocument : WordDocument oppositeOf docPr;
		-- to supplement if necessary...
	}
	
	-- @comment Defines the body of the document.
	class BodyElt{
		reference be_wordDocument : WordDocument oppositeOf body;
		
		-- @comment Defines the elements contained in the body of the document.
		reference blockLevelElts[*] ordered container : BlockLevelElt oppositeOf ble_bodyElt;
		
		-- @comment Represents the section properties for the very last section in the document.
		reference sectPr[0-1] container : SectPrElt oppositeOf spe_bodyElt;	
	}
	
	-- @comment Elements that can occur anywhere where we start a new block, such inside the body, comments, headers, textboxes, etc.
	abstract class BlockLevelElt {
		reference ble_bodyElt : BodyElt oppositeOf blockLevelElts;
		reference ble_note : NoteElt oppositeOf n_blockLevelElts;
	}
	
	-- @comment Block level elements that can occur inside a cfChunk and other places.
	abstract class BlockLevelChunkElt extends BlockLevelElt {}
	
	
	-- @begin Detail of ParaElt
	
	-- @comment Defines a paragraph element; analogous to the HTML &lt;p&gt; tag.
	class ParaElt extends BlockLevelChunkElt {
		-- @comment Represents the paragraph properties.
		reference pPr[0-1] container : ParaPrElt oppositeOf ppe_pElt;
		
		-- @comment Represents the content of a paragraph.
		reference pContentElts[*] ordered container : ParaContentElt oppositeOf pce_pElt;
	}
	
	-- @comment Defines a collection of paragraph settings.
	class ParaPrElt {
		reference ppe_pElt : ParaElt oppositeOf pPr;
		-- to supplement if necessary...
	}
	
	-- @comment Defines an element contained in a paragraph.
	abstract class ParaContentElt {
		reference  pce_pElt : ParaElt oppositeOf pContentElts;
	}
	
	-- @comment Defines a run of content (text, picture, and so on) and groups run properties with this content.
	class RunElt extends ParaContentElt {
		-- @comment Represents properties of the contents of this run.
		reference rPr[0-1] container : RunPrElt oppositeOf rpe_rElt;
		
		-- @comment Represents the content of this run.
		reference rContentElts[*] ordered container : RunContentElt oppositeOf rce_rElt;
	}
	
	-- @comment Defines a collection of settings of the contents of this run.
	class RunPrElt {
		reference rpe_rElt : RunElt oppositeOf rPr;
		-- to supplement if necessary...
	}
	
	-- @comment Defines an element contained in a run.
	abstract class RunContentElt {
		reference  rce_rElt : RunElt oppositeOf rContentElts;
	}
	
	-- @comment Represents a text-wrapping break.
	class BreakElt extends RunContentElt {
		-- @comment Specifies the break type.
		attribute type[0-1] : BreakType;
	}
	
	-- @comment Represents text content.
	class Text extends RunContentElt, StringType {}
	
	-- @comment Represents revision-deleted text content. Using this element instead of the "Text" element does not make text revision-marked deleted. The delText element should be inside an Annotation Markup Language (AML) Word.Deletion block.
	class DelText extends RunContentElt, StringType {}
	
	-- @comment Represents field instruction content.
	class InstrText extends RunContentElt, StringType {}
	
	-- @comment Represents revision-deleted field-instruction content. Using this element instead of the instrText element does not make field-instruction text revision-marked deleted. The delInstrText element should be inside an Annotation Markup Language (AML) Word.Deletion block.
	class DelInstrText extends RunContentElt, StringType {} 
	
	-- @comment Represents a nonbreaking hyphen 
	class NoBreakHyphen extends RunContentElt {}
	
	-- @comment Represents a soft-hyphen (optional hyphen). 
	class SoftHyphen extends RunContentElt {}
	
	-- @comment Represents an annotation reference mark.
	class AnnotationRef extends RunContentElt {}
				
	-- @comment Represents a footnote reference mark.
	class FootnoteRef extends RunContentElt {}
			
	-- @comment Represents an endnote reference mark.
	class EndnoteRef extends RunContentElt {}
				
	-- @comment Represents a footnote or endnote separator mark.
	class Separator extends RunContentElt {}
			
	-- @comment Represents a footnote or endnote continuation separator mark.
	class ContinuationSeparator extends RunContentElt {}
	
	-- @comment Represents a page number at display time.
	class PgNum extends RunContentElt {}
	
	-- @comment Specifies that this paragraph mark isn't a paragraph mark -- it's just a carriage return in the paragraph.
	class Cr extends RunContentElt {}
				
	-- @comment Represents a footnote that appears at this point in the document. 
	class Footnote extends RunContentElt, NoteElt {}
	
	-- @comment Represents a footnote that appears at this point in the document. 
	class Endnote extends RunContentElt, NoteElt {}
	
	-- @comment Defines a note that appears at this point in the document. The contents of the footnote are in this element.
	abstract class NoteElt {
		-- @comment Represents the content of the footnote.
		reference n_blockLevelElts[1-*] ordered container : BlockLevelElt oppositeOf ble_note;
		-- @comment Gets or sets the note type. This attribute is required if this is a note separator.
		attribute type[0-1] : NoteValue;
		-- @comment Suppresses automatic insertion of an endnote reference character.
		attribute suppressRef[0-1] : OnOffType;
	}		
		
	-- @comment Represents a picture or other binary object that appears at this point in the document.	
	class Picture extends RunContentElt, PictureType {}
	
	-- @comment Represents a symbol character.
	class Symbol extends RunContentElt, SymElt {}
	
	-- @comment Defines a symbol character.
	class SymElt {
		-- @comment Gets or sets the symbol font.
		reference font container : StringType;
		-- @comment It is an hexadecimal number. Gets or sets the character code of the symbol.
		reference char container : StringType;
	}
	
	-- @comment Represents a tab character.
	class Tab extends RunContentElt, TabElt {}
	
	-- @comment Represents a field-delimiting character
	class FldChar extends RunContentElt, FldCharElt {}
		
	-- @comment Defines a field-delimiting character.
	class FldCharElt {
		-- @comment Represents field data.
		reference fldData[0-1] container : StringType;
		-- @comment Specifies whether this field-delimiting character begins a field definition, separates the field definition from the field instructions, or ends the field definition.
		attribute fldCharType : FldCharTypeProperty;
		-- @comment Gets or sets whether the field is locked from being recalculated.
		attribute fldLock : OnOffType;
	}
	
	-- @end Detail of ParaElt
	
-- @end MS Office - Word Document Basic Definition


-- @begin Options not managed by this metamodel

	-- @comment Defines a collection of fonts.
	class FontsListElt {
		reference fle_wordDocument : WordDocument oppositeOf fonts;
	}
	
	-- @comment Defines a collection of lists.
	class ListsElt {
		reference le_wordDocument : WordDocument oppositeOf lists;
	}
	
	-- @comment Defines a collection of styles.
	class StylesElt {
		reference se_wordDocument : WordDocument oppositeOf styles;	
	}
	
	-- @comment Defines print settings for a section of the document.
	class SectPrElt {
		reference spe_bodyElt : BodyElt oppositeOf sectPr;
		-- to supplement if necessary...	
	}
	
	-- @comment Information about run-level elements' proofing tools and range protection permissions.
	class RunLevelElt extends BlockLevelChunkElt {}
	
	-- @comment Represents a context-free chunk - allows in-line definition of style sheet, font, and list items.
	class CfChunk extends BlockLevelElt {}
	
	-- @comment Represents simple Word field (with plain text instructions). These fields are run-time calculated entities in Word (for example, page numbers).
	class SimpleFieldElt extends ParaContentElt {
		-- attribute fldSimple....
	}
	
	-- @comment Represents a hyperlink element (analogous to HTML &lt;a href=...&gt; tag).
	class HLinkElt extends ParaContentElt {
		-- attribute hlink....
	}
	
	-- @comment Represents a link from a master document to a subdocument.
	class SubDocElt extends ParaContentElt {
		-- to supplement...
	}
	
	-- @comment Defines a picture.
	class PictureType {
		-- to supplement...
	}
	
	-- @comment Defines a tab stop.
	class TabElt {
		-- to supplement...
	}	
	
-- @end Options not managed by this metamodel	

}


package PrimitiveTypes {
	
	datatype Integer;
	datatype String;
	datatype Boolean;
	datatype Double;

}