-- @name		SpreadsheetMLWorkbookProp
-- @version		1.1
-- @domains		Microsoft Office Excel, XML
-- @authors		Hugo Bruneliere (hugo.bruneliere <at> gmail.com)
-- @date		2005/06/29
-- @extends 	SpreadsheetMLBasicDef 
-- @description	This metamodel describes a subset of SpreadsheetML, an XML dialect developed by Microsoft to represent the information in an Excel spreadsheet. This metamodel takes back in details the concepts expressed in the basic SpreadsheetML metamodel and adds the notion of Excel Workbook specific properties.  
-- @see			office.xsd, excelss.xsd, excel.xsd; Microsoft Office 2003 XML Reference Schemas; http://www.microsoft.com/downloads/details.aspx?familyid=FE118952-3547-420A-A412-00A2662442D9&displaylang=en

package SpreadsheetMLWorkbookProp {

-- @begin MS Office - Special Types definition

	-- @comment The format for date/time fields is yyyy-mm-ddThh:mm:ssZ. (This format can be described as follows: a four-digit year, hyphen, two-digit month, hyphen, two-digit day, uppercase letter T, two-digit hour, colon, two-digit minute value, colon, two-digit seconds value, uppercase letter Z.).
	class DateTimeType {
		attribute year : Integer;
		attribute month : Integer;
		attribute day : Integer;
		attribute hour : Integer;
		attribute minute : Integer;
		attribute second : Integer;	
	}
	
	-- @comment The format for the version is n.nn.
	class VersionType {
		attribute n : Integer;
		attribute nn : Integer;
	}
	
	-- @comment Office manages five types of value : String, Number, DateTime, Boolean and Error.
	abstract class ValueType {
		reference vt_data : Data oppositeOf value;
	}
	
	class StringValue extends ValueType {
		attribute value : String;
	}
	
	class NumberValue extends ValueType {
		attribute value : Double;
	}
	
	class DateTimeTypeValue extends ValueType {
		reference value container : DateTimeType;
	}
	
	class BooleanValue extends ValueType {
		attribute value : Boolean;
	}
	
	class ErrorValue extends ValueType {}
	
-- @end MS Office - Special Types definition


-- @begin MS Office - Office Document Common Properties
-- @comment This zone describes elements that are shared by Microsoft Office Word 2003 and Microsoft Office Excel 2003. They contain general document properties (author, createdate, etc.), document summary and statistics (word count, etc.), custom document properties and information related to smart tags that appear in a document.

	-- @comment Defines the collection of standard document properties.
	class DocumentPropertiesCollection {
		reference dp_workbook : Workbook oppositeOf wb_docProperties;
	
		-- @comment The title of a document. The title can be different from the file name. 
		attribute title[0-1] : String;
		-- @comment The subject of the document. This property may be used to group similar files.
		attribute subject[0-1] : String;
		-- @comment Keywords may be used when searching for the document.
		attribute keywords[0-1] : String;
		-- @comment The short description of the document. Comments may also be used when searching for the document. 
		attribute description[0-1] : String;
		-- @comment The category of the file. This property may be used to group similar files.
		attribute category[0-1] : String;
		-- @comment  The name of the person who first created the document. The name of the person who last saved the document is contained in the "lastAuthor" attribute. 
		attribute author[0-1] : String;
		-- @comment  The name of the person who last saved the document. The original author is contained in the "author" attribute. 
		attribute lastAuthor[0-1] : String;
		-- @comment The name of the author's manager. This property may be used in searches to group all the documents of authors having the same manager. 
		attribute manager[0-1] : String;
		-- @comment	 The author's employer. This property may be used in searches to group all of the documents from the same company. 
		attribute company[0-1] : String;
		-- @comment	The path or URL that is used for all hyperlinks with the same base address in a document. This property can be an Internet address (for example, http://www.microsoft.com), a path to a folder on your hard disk (for example, c:\personal\documents), or a path to a folder on a network (for example, \\exampleserver\public\documents). 
		attribute hyperlinkBase[0-1] : String;
		-- @comment	The number of times the document was saved. If no change was made since the document was last saved, this number is not updated in Word. 
		attribute revision[0-1] : Integer;
		-- @comment The viewing format of a document.
		attribute presentationFormat[0-1] : String;
		-- @comment A unique identification number for the document. 
		attribute guid[0-1] : String;
		-- @comment  The name of the application that last updated the document. Word and Excel do not update this element. 
		attribute appName[0-1] : String;
		-- @comment The version of the application used to create the document. Word and Excel update this element. 
		reference version[0-1] container : VersionType;
		-- @comment The number of minutes since it was created that the document was open for making changes (even if no changes are made). 
		attribute totalTime[0-1] : Integer;
		-- @comment The date and time that the document was last printed. Word omits this element if the document has not been printed.  
		reference lastPrinted[0-1] container : DateTimeType;
		-- @comment The date and time that the document was created. 
		reference created[0-1] container : DateTimeType;
		-- @comment The date and time that the document was last saved. 
		reference lastSaved[0-1] container : DateTimeType;
		-- @comment An estimate of the number of pages in the document. 
		attribute pages[0-1] : Integer;
		-- @comment  An estimate of the number of words in the document. 
		attribute words[0-1] : Integer;
		-- @comment An estimate of the number of characters in the document, not counting spaces.
		attribute characters[0-1] : Integer;
		-- @comment An estimate of the number of characters in the document, counting spaces. 
		attribute charactersWithSpaces[0-1] : Integer;
		-- @comment An estimate of the number of bytes in the document. 
		attribute bytes[0-1] : Integer;
		-- @comment An estimate of the number of lines in the document. 
		attribute lines[0-1] : Integer;
		-- @comment An estimate of the number of paragraphs in the document. 
		attribute paragraphs[0-1] : Integer;
	} 
	
	-- @comment Defines the collection of custom document properties.
	class CustomDocumentPropertiesCollection {
		reference cdp_workbook : Workbook oppositeOf wb_customDocProperties;
		
		reference customDocumentProperties[1-*] container :  CustomDocumentProperty oppositeOf customDocumentProperty_cdpe;
	} 

	-- @comment A custom property is a name/value pair.
	class CustomDocumentProperty {
		reference customDocumentProperty_cdpe : CustomDocumentPropertiesCollection oppositeOf customDocumentProperties;
		attribute name : String;
		-- @comment Defines the value of the custom property in the correct type
		reference value container : ValueType;
	}

	-- @comment Defines a smart tag used in the document.
	class SmartTagType {
		reference smartTagType_ste : SmartTagsCollection oppositeOf smartTagTypes;
	
		-- @comment Gets or sets the namespace Uniform Resource Identifier (URI) for a smart tag
		attribute namespaceuri : String;
		-- @comment Gets or sets the element name used for a smart tag
		attribute name : String;
		-- @comment Gets or sets the URL for a smart tag provided by the smart tag provider
		attribute url[0-1] : String;
	}
	
	-- @comment Defines a a collection of smart tags.
	class SmartTagsCollection {
		reference st_workbook : Workbook oppositeOf wb_smartTags;
		reference st_cell : Cell oppositeOf c_smartTags;
		
		reference smartTagTypes[*] container : SmartTagType oppositeOf smartTagType_ste;
	}

-- @end MS Office - Office Document Common Properties


-- @begin MS Office - Excel workbook basic definition
	
	-- @comment Defines a workbook that will contain one or more Worksheet elements.
	class Workbook {
		-- @comment Defines the general properties of the Office document
		reference wb_smartTags[0-1] container : SmartTagsCollection oppositeOf st_workbook; 
		reference wb_docProperties[0-1] container : DocumentPropertiesCollection oppositeOf dp_workbook;
		reference wb_customDocProperties[0-1] container : CustomDocumentPropertiesCollection oppositeOf cdp_workbook;
		
		-- @comment Defines th specific properties of an Excel workbook
		reference wb_excelWorkbook[0-1] container : ExcelWorkbook oppositeOf ew_workbook;	
					
		-- @comment At least one instance of the Worksheet element is required for a valid spreadsheet but the XML schema permit having no instance.
		reference wb_worksheets[*] ordered container : Worksheet oppositeOf ws_workbook;
	}

	-- @comment Defines a worksheet within the current workbook.
	class Worksheet {
		reference ws_workbook : Workbook oppositeOf wb_worksheets;
		
		-- @comment Only one instance of a Table element is valid for a single worksheet. 
		reference ws_table[0-1] container : Table oppositeOf t_worksheet;
		
		-- @comment Specifies the name of a worksheet. This value must be unique within the list of worksheet names of a given workbook.
		attribute name : String;
		
		-- Other elements such as "WorksheetOptions", "Watches", "DataTable"... are not managed by this version.
	}
	
	-- @comment Defines an element that can have a particular style (and especially a user-defined style). 
	abstract class StyledElement {
		-- the styles are not defined in this version of the metamodel
		-- see the following versions... 	
	}
	
	-- @comment Defines the table to contain the cells that constitute a worksheet.
	class Table extends StyledElement {
		reference t_worksheet :  Worksheet oppositeOf ws_table;
		
		-- @comment A table contains columns and rows.
		reference t_cols[*] ordered container : Column oppositeOf c_table;
		reference t_rows[*] ordered container : Row oppositeOf r_table;
		
		-- @comment Specifies the default width in points of columns in a table. This value must be greater than zero.
		attribute defaultColumnWidth[0-1] : Double;
		-- @comment Specifies the default height in points of rows in a table. This value must be greater than zero.
		attribute defaultRowHeight[0-1] : Double;
		-- @comment Specifies the total number of columns in a table. This attribute must have a value that is equal to the actual number of columns in the table for the document to be valid.
		attribute expandedColumnCount[0-1] : Integer;
		-- @comment Specifies the total number of rows in a table. This attribute must have a value that is equal to the actual number of rows in the table for the document to be valid.
		attribute expandedRowCount[0-1] : Integer;
		-- @comment Specifies the index of the column in a spreadsheet that defines the first column of a table. This value must be greater than zero.
		attribute leftCell[0-1] : Integer;
		-- @comment Specifies the index of the row in a spreadsheet that defines the top row of a table. This value must be greater than zero.
		attribute topCell[0-1] : Integer;
		-- @comment Specifies that the columns in this table should occupy the entire height (all rows) of the worksheet.
		attribute fullColumns[0-1] : Boolean;
		-- @comment Specifies that the rows in this table should occupy the entire width (all columns) of the worksheet.
		attribute fullRows[0-1] : Boolean;
	}

	-- @comment Defines a table element, that is to say a column, a row or a cell.
	abstract class TableElement extends StyledElement {
		-- @comment Specifies the position of the element in the table. For a cell, it specifies the column index.  
		attribute index[0-1] : Integer;  
	}
	
	-- @comment Defines a row or a column.
	abstract class ColOrRowElement extends TableElement {
		-- @comment Specifies whether a row or a column is hidden.
		attribute hidden[0-1] : Boolean;
		-- @comment Specifies the number of adjacent columns/rows with the same formatting as the defined column/row. This integer mustn't be negative.
		attribute span[0-1] : Integer;
	}
	
	-- @comment Defines the formatting and properties for a column
	class Column extends ColOrRowElement {
		reference c_table : Table oppositeOf t_cols;
		
		-- @comment Specifies whether a column is automatically resized to fit numeric and date values. Columns are not resized to fit text data.
		attribute autoFitWidth[0-1] : Boolean;
		-- @comment Specifies the width of a column in points. This value must be greater than or equal to zero. 
		attribute width[0-1] : Double;
	}
	
	-- @comment Defines the formatting and properties for a row
	class Row extends ColOrRowElement {
		reference r_table : Table oppositeOf t_rows;
		
		-- @comment A row contains zero or more cells.
		reference r_cells[*] ordered container : Cell oppositeOf c_row;
		
		-- @comment Specifies whether the height of a row is automatically resized to fit the contents of cells.
		attribute autoFitHeight[0-1] : Boolean;
		-- @comment Specifies the height of a row in points. This value must be greater than or equal to zero.
		attribute height[0-1] : Double;
	}
	
	-- @comment Defines the properties of a cell in a worksheet.
	class Cell extends TableElement {
		reference c_smartTags[*] container : SmartTagsCollection oppositeOf st_cell;
		-- @comment A cell is contained in a row.
		reference c_row : Row oppositeOf r_cells;
		
		-- @comment Specifies the range of cells to which an array formula applies.
		attribute arrayRange[0-1] : String;
		-- @comment Specifies a formula for a cell.
		attribute formula[0-1] : String;
		-- @comment Specifies a URL to which to which a cell is linked.
		attribute hRef[0-1] : String;
		-- @comment Specifies the number of adjacent cells to merge with the current cell. The cells to merge will be to the right of the current cell unless the worksheet is set to display left-to-right.
		attribute mergeAcross[0-1] : Double;
		-- @comment Specifies the number of adjacent cells below the current cell that are to be merged with the current cell.
		attribute mergeDown[0-1] : Double;
		-- @comment A cell can contain a data.
		reference c_data[0-1] container : Data oppositeOf d_cell;
		-- @comment A comment can be associated with a cell.
		reference c_comment[0-1] container : Comment oppositeOf c_cell;
	}
	
	-- @comment Describes a comment that can be associated with a cell
	class Comment {
		reference c_cell : Cell oppositeOf c_comment;
		
		-- @comment Specifies the contents of the comment
		reference com_data container : Data oppositeOf d_comment;
		-- @comment Specifies the author of a comment.
		attribute author[0-1] : String;
		-- @comment Specifies whether a comment is always displayed or is displayed only when the user rests the curser on the cell.
		attribute showAlways[0-1] : Boolean;	
	}
	
	-- @comment Specifies the value of a cell. The value should be specified in the format and type appropriate for (String, Number, DateTime, Boolean or Error).
	class Data {
		reference d_cell : Cell oppositeOf c_data;
		reference d_comment : Comment oppositeOf com_data;
		
		-- @comment Defines the value of the cell in the correct type
		reference value container : ValueType oppositeOf vt_data;
	}
	

-- @end MS Office - Excel workbook basic definition


-- @begin MS Office - Excel workbook specific Properties
	
	-- @comment Contains the properties of a workbook.
	class ExcelWorkbook {
		reference ew_workbook : Workbook oppositeOf wb_excelWorkbook;
		
		-- @comment "PublishObjects" and "SupBook" options are not managed in the current version.
		
		-- @comment Default value is 1. Specifies the number of sheets selected in a workbook. 
		attribute selectedSheets[0-1] : Integer;
		-- @comment Specifies whether a workbook window is hidden.
		attribute windowHidden[0-1] : Boolean;
		-- @comment Specifies whether the horizontal scroll bar in a workbook window is hidden.
		attribute hideHorizontalScrollBar[0-1] : Boolean;
		-- @comment Specifies whether the vertical scroll bar in a workbook window is hidden.
		attribute hideVerticalScrollBar[0-1] : Boolean;
		-- @comment Specifies whether the worksheet tabs in a workbook window are hidden.
		attribute hideWorkbookTabs[0-1] : Boolean;			
		-- @comment Contains a value specifying the height in points of a workbook window.
		attribute windowHeight[0-1] : Double;
		-- @comment Contains a value in points that specifies the width of a workbook window.
		attribute windowWidth[0-1] : Double;
		-- @comment Contains a value in points that specifies the horizontal position of a workbook window relative to the left border of the application window.
		attribute windowTopX[0-1] : Double;
		-- @comment Contains a value in points that specifies the vertical position of a workbook window relative to the top border of the application window.
		attribute windowTopY[0-1] : Double; 
		-- @comment Default value is 1. Contains the index number of the active worksheet in a workbook. 
		attribute activeSheet[0-1] : Integer;
		-- @comment Contains the name of the active chart in a workbook.
		attribute activeChart[0-1] : String;
		-- @comment  Default value is 1. Specifies that all worksheets before to the worksheet identified in this element are hidden and that no navigation tabs are shown for hidden sheets.
		attribute firstVisibleSheet[0-1] : Integer;	
		-- @comment Prevents the PivotTable Field List dialog box from appearing when the user moves the input focus to the PivotTable view.
		attribute hidePivotTableFieldList[0-1] : Boolean;	
		-- @comment Specifies whether the structure of a workbook is protected.
		attribute protectStructure[0-1] : Boolean;	
		-- @comment Specifies whether the worksheet windows are protected.
		attribute protectWindows[0-1] : Boolean;	
		-- @comment Specifies whether ink comments are displayed.
		attribute displayInkNotes[0-1] : Boolean;	
		-- @comment Causes smart tags in the document to be saved to the XML spreadsheet.	
		attribute embedSaveSmartTags[0-1] : Boolean;
		-- @comment Enables Excel 2002 to warn users that they may lose data on save back to XMLSS, when the XMLSS loaded was created with Excel 2003. This element will only be written into the XMLSS if were writing out the MapInfo collection (new feature in Excel 2003).
		attribute futureVer[0-1] : String;
		-- @comment Default value is 600. Specifies the ratio of the worksheet tab area width to the width of the horizontal scroll bar. 		
		attribute tabRatio[0-1] : Integer;
		-- @comment Specifies whether a workbook window is minimized.	
		attribute windowIconic[0-1] : Boolean;
		-- @comment DefaultValue is "DisplayShapes". Specifies whether drawing objects are displayed, placeholders are displayed in their place, or all drawing objects are hidden in a workbook.
		attribute displayDrawingObjects[0-1] : DisplayDrawingObjectsType; 
		-- @comment Specifies whether a backup file is created when you save a workbook.	
		attribute createBackup[0-1] : Boolean;		
		-- @comment Default value is "AutomaticCalculation". Specifies the mode of calculation for a workbook.
		attribute calculation[0-1] : CalculationWorkbookType;		
		-- @comment Specifies whether a workbook is calculated before it is saved.	
		attribute doNotCalculateBeforeSave[0-1] : Boolean;	
		-- @comment Specifies the date system used in a workbook.	
		attribute date1904[0-1] : Boolean;
		-- @comment Specifies that references are in R1C1 reference style.	
		attribute refModeR1C1[0-1] : Boolean;			
		-- @comment Specifies whether to track the number of iterations through circular references in formulas.
		attribute iteration[0-1] : Boolean;
		-- @comment Specifies the maximum number of iterations when resolving circular references in Excel.
		attribute maxIterations[0-1] : Integer;
		-- @comment Default value is 0.001. Specifies the maximum amount of change for a value between each iteration when Excel resolves circular references in formulas.
		attribute maxChange[0-1] : Double;
		-- @comment Specifies whether calculations are performed using the precision of numbers as they are displayed. 	
		attribute precisionAsDisplayed[0-1] : Boolean;	
		-- @comment Specifies whether the values in linked cells are saved.	
		attribute doNotSaveLinkValues[0-1] : Boolean;	
		-- @comment Suppresses autorecovery of documents if Excel fails.	
		attribute noAutoRecover[0-1] : Boolean;	
		-- @comment Specifies whether range names are allowed in formulas. 	
		attribute acceptLabelsInFormulas[0-1] : Boolean;	
		-- @comment Specifies whether a workbook has already been calculated.	
		attribute uncalced[0-1] : Boolean;	

	}

	-- @comment This type is used to determine what drawing objects have to be displayed. 
	enumeration DisplayDrawingObjectsType {
		literal ddot_displayShapes;
		literal ddot_placeHolders;
		literal ddot_hideAll;
	}
	
	-- @comment This type is used to determine the mode of calculation for a workbook.
	enumeration CalculationWorkbookType {
		literal cwt_automaticCalculation;
		literal cwt_manualCalculation;
		literal cwt_semiAutomaticCalculation;
	}
	
-- @end MS Office - Excel workbook specific Properties

}


package PrimitiveTypes {
	
	datatype Integer;
	datatype String;
	datatype Boolean;
	datatype Double;

}