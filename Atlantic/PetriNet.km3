-- @name		PetriNet
-- @version		1.0
-- @domains		Petri Net, PNML
-- @authors		David Touzet (david.touzet@univ-nantes.fr)
-- @date		2005/07/18	
-- @description	The PetriNet metamodel describes the different model elements that compose a Petri net model, as well as the way they can be linked to each other. A PetriNet model is composed of Transitions, Places and Arcs. The PetriNet entity, as well as the Transition and the Place ones, inherits from the abstract Element entity that defines a "name" attribute. An Arc is an abstract entity which is associated with a "weight" attribute. Each Arc is either of the TransToPlaceArc or PlaceToTransArc kind. A TransToPlaceArc connects a Transition to a Place, whereas a PlaceToTransArc connects a Place to a Transition. A Place can have several outgoing PlaceToTransArcs and several incoming TransToPlaceArcs. Similarly, a Transition can have several incoming PlaceToTransArcs and several outgoing TransToPlaceArcs. Each TransToPlaceArc has a source Transition and a target Place. In the same way, each PlaceToTransArc has a source Place and a target Transition.
-- @see			http://www.informatik.huberlin.de/top/pnml/about.html

package PetriNet {

	abstract class Element {
		attribute name : String;
	}

	class PetriNet extends Element {
		reference places[1-*] container : Place;
		reference transitions[*] container : Transition;
		reference arcs [*] container : Arc;
	}

	class Place extends Element {
		reference incoming [*] : TransToPlaceArc oppositeOf target;
		reference outgoing [*] : PlaceToTransArc oppositeOf source;
	}

	class Transition extends Element {
		reference incoming [1-*] : PlaceToTransArc oppositeOf target;
		reference outgoing [1-*] : TransToPlaceArc oppositeOf source;
	}
	
	abstract class Arc {
		attribute weight : Integer;
	}
	
	class PlaceToTransArc extends Arc {
		reference source : Place oppositeOf outgoing;
		reference target : Transition oppositeOf incoming;
	}

	class TransToPlaceArc extends Arc {
		reference source : Transition oppositeOf outgoing;
		reference target : Place oppositeOf incoming;
	}
}

package PrimitiveTypes {
	datatype String;
	datatype Integer;
}
