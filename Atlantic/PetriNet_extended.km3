-- @name		PetriNet_extended
-- @version		1.0
-- @domains		Petri net
-- @authors		Hugo Bruneliere (hugo.bruneliere <at> gmail.com), Pierrick Guyard (pierrick.guyard <at> gmail.com)
-- @date		2005/08/11
-- @description	This basic metamodel describes Petri Net. It consists of places, transitions and directed arcs that connect them, so arcs run between places and transitions, not between places and places or transitions and transitions.  There is two sorts of arcs : the ones which connect places with transitions, and the other start at a transition and end at a place. Places can contain tokens; the current state of the modeled system (the marking) is given by the number (and type if the tokens are distinguishable) of tokens in each place. Transitions are active components. They model activities which can occur (the transition fires), thus changing the state of the system (the marking of the Petri net). Transitions are only allowed to fire if they are enabled, which means that all the preconditions for the activity must be fulfilled (there are enough tokens available in the input places).  When the transition fires, it removes tokens from its input places and adds some at all of its output places. The number of tokens removed / added depends on the cardinality of each arc (weight). The interactive firing of transitions in subsequent markings is called token game.
-- @see			Petri_Net.km3

package PetriNet {

	abstract class LocatedElement {
		attribute location : String;
	}
	
	abstract class NamedElement extends LocatedElement {
		attribute name : String;
	}

	-- @comment top element
	class PetriNet extends NamedElement {
		reference elements[*] container : Element oppositeOf net;
		reference arcs[*] container : Arc oppositeOf net;
		reference execs[*] : Execution oppositeOf net;
	}
	
	-- @begin elements
	
	abstract class Element extends NamedElement {
		reference net : PetriNet oppositeOf elements;
	}
	
	class Place extends Element {
		reference incomingArc[*] : TransitionToPlace oppositeOf to;
		reference outgoingArc[*] : PlaceToTransition oppositeOf from;
	}
	
	class Transition extends Element {
		reference incomingArc[1-*] : PlaceToTransition oppositeOf to;
		reference outgoingArc[1-*] :  TransitionToPlace oppositeOf from;	
	}
	
	-- @end elements
	
	
	--@begin arcs

	abstract class Arc extends NamedElement {
		attribute weight : Integer;
		reference net : PetriNet oppositeOf arcs;	
	}
	
	class PlaceToTransition extends Arc {
		reference from : Place oppositeOf outgoingArc;
		reference to : Transition oppositeOf incomingArc;
	}
	
	class TransitionToPlace extends Arc {
		reference from : Transition oppositeOf outgoingArc;
		reference to : Place oppositeOf incomingArc;
	}
	
	--@end arcs
	
	class Execution {
		reference net : PetriNet oppositeOf execs;
		reference markings[*] container : Marking oppositeOf exec;
		reference movements[*] container : Movement oppositeOf exec;
	}
	
	class Token {
		reference placedAt : Place;
		reference marking : Marking oppositeOf tokens;
	}
	
	class Marking {
		reference exec : Execution oppositeOf markings;
		reference tokens[*] container : Token oppositeOf marking;
	}
	
	class Movement {
		reference exec : Execution oppositeOf movements;
		reference fire : Transition;
		reference source : Marking;
		reference target : Marking;
	}

}

package PrimitiveTypes {
	datatype String;
	datatype Integer;
}