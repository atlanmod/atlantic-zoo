-- @name		WSDL
-- @version		0.1
-- @domains		Web Services
-- @authors		Hugo Bruneliere (hugo.bruneliere <at> gmail.com), Pierrick Guyard (pierrick.guyard <at> gmail.com)
-- @date		2005/08/11
-- @description	This basic metamodel describes a part of WSDL. WSDL (Web Services Description Language) is an XML format for describing network services as a set of endpoints operating on messages containing either document-oriented or procedure-oriented information. The operations and messages are described abstractly, and then bound to a concrete network protocol and message format to define an endpoint. Related concrete endpoints are combined into abstract endpoints (services). WSDL is extensible to allow description of endpoints and their messages regardless of what message formats or network protocols are used to communicate. WSDL service definitions provide documentation for distributed systems and serve as a recipe for automating the details involved in applications communication.  A WSDL document defines services as collections of network endpoints, or ports. In WSDL, the abstract definition of endpoints and messages is separated from their concrete network deployment or data format bindings.This allows the reuse of abstract definitions: messages, which are abstract descriptions of the data being exchanged, and port types which are abstract collections of operations. The concrete protocol and data format specifications for a particular port type constitutes a reusable binding. A port is defined by associating a network address with a reusable binding, and a collection of ports define a service. Hence, a WSDL document uses the following elements in the definition of network services: Types- a container for data type definitions using some type system (such as XSD). Message- an abstract, typed definition of the data being communicated. Operation- an abstract description of an action supported by the service. Port Type- an abstract set of operations supported by one or more endpoints.  Binding- a concrete protocol and data format specification for a particular port type.  Port- a single endpoint defined as a combination of a binding and a network address.  Service- a collection of related endpoints.
-- @see			http://www.w3.org/TR/wsdl

package WSDL {

	class Port {
		attribute name : String;
		reference service : Service oppositeOf ports;
		reference binding : Binding oppositeOf ports;
	}
	
	class Service {
		attribute name : String;
		reference ports[*] container : Port oppositeOf service;
	}
		
	class Param {
		attribute name : String;
		reference message : Message oppositeOf params;
	}
	
	class Input extends Param {
		reference "operation" : Operation oppositeOf input;
	}
	
	class Output extends Param {
		reference "operation" : Operation oppositeOf output;
	}
	
	class PortType {
		attribute name : String;
		reference operations[*] container : Operation oppositeOf type;
		reference bindings[*] : Binding oppositeOf type;
	}
	
	class Operation {
		attribute name : String;
		reference input[0-1] container : Input oppositeOf "operation";
		reference output[0-1] container : Output oppositeOf "operation";
		reference type : PortType oppositeOf operations;
		reference faults[*] container : Fault oppositeOf "operation";
	}
	
	class StartWithExtensions {}

	class Binding extends StartWithExtensions {
		attribute name : String;
		reference ports[*] : Port oppositeOf binding;
		reference type : PortType oppositeOf bindings;
		reference operations[*] container : BindingOperation oppositeOf bind;
	}
	
	class BindingFault extends StartWithExtensions {
		reference "operation" container : BindingOperation oppositeOf faults;
		reference binding : Fault;
	}
	
	class BindingOperation extends StartWithExtensions {
		attribute name : String;
		reference bind : Binding oppositeOf operations;
		reference binding : Operation;
		reference input[0-1] : StartWithExtensions;
		reference output[0-1] : StartWithExtensions;
		reference faults[*] container : BindingFault oppositeOf "operation";
	}
	
	class Fault {
		attribute name : String;
		reference "operation" : Operation oppositeOf faults;
		reference message : Message oppositeOf faults;
	}
	
	class Message {
		attribute name : String;
		reference params[*] : Param oppositeOf message;
		reference faults[*] : Fault oppositeOf message;
		reference parts[*] : Part oppositeOf message;
	}
	
	class Part {
		attribute name : String;
		reference message : Message oppositeOf parts;
	}
}

package PrimitiveTypes {
	datatype String;
}