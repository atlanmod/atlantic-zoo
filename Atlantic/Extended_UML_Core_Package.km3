-- @name 		Extended UML Core Package
-- @domains 	UML
-- @authors 	Julien Baudry (jul.baudry@gmail.com)
-- @date 		2006/07/10
-- @description This metamodel fragment describes extended UML core package metamodel
-- @see 		This metamodel fragment has been extracted from information available in the following article:
-- @see 		Article "On Using UML Class Diagrams for Object-Oriented Database Design"
-- @see 		by Yongzhen Ou
-- @see 		Page 177, Section 3, Fig. 1 Extended UML Core Package
-- @see 		Lecture Notes in Computer Science 1618
-- @see 		Jean Bézivin, Pierre-Alain Muller
-- @see 		The Unified Modeling Language UML 98: Beyond the notation

package ExtendedUMLCorePackage {

	class ModelElement {
		reference name : Name;
	}
	
	class Name{
	}
	
	class AssociationEnd extends ModelElement {
		attribute isNavigable : Boolean;
		attribute isOrdered : Boolean;
		reference aggregation : AggregationKind;
		reference multiplicity : Multiplicity;
		reference changeable : ChangeableKind;
		reference TargetScope : ScopeKind;
		reference rfIntegrety : RlIntegretyKind;
		reference rlIntegrety : RlIntegretyKind;
	}
	
	class AggregationKind{
	}
	
	class Multiplicity {
	}
	
	class ChangeableKind {
	}
	
	class ScopeKind {
	}
	
	class RfIntegretyKind {
	}
	
	class RlIntegretyKind {
	}
	
	class Namespace extends ModelElement {
	}
	
	class GeneralizableElement extends Namespace {
	}
	
	class Classifier extends GeneralizableElement {
	}
	
	class Class extends Classifier {
		attribute isActive : Boolean;
		reference mutliplicity : Multiplicity;
		reference key [*] container : Key oppositeOf classOwner;
	}
	
	abstract class Key extends ModelElement {
		reference classOwner : Class oppositeOf key;
	}

	class Feature extends ModelElement {
	}
	
	class StructureFeature extends Feature {
	}
	
	abstract class Constraint extends Feature {
	}
	
	class Attribute extends StructureFeature {
		reference initialValue : Expression;
		attribute isKey : Boolean;
		attribute isUnique : Boolean;
	}
	
	class Expression {
	}
}

package PrimitiveTypes {
	datatype Boolean;
	datatype Integer;
	datatype String;
}