-- @name		UMLDI Use Cases
-- @version		0.1
-- @domains		UML
-- @authors		David Touzet
-- @date		2006/02/21	
-- @description	This is a simplified metamodel of UML Use Cases diagram according to the UML Diagram Interchange standard. The source metamodel of UML is well described by the OMG. It has been voluntarily simplified to be used more easily.
-- @see			UML Diagram Interchange 2.0 Adopted specification, OMG, http://www.omg.org/cgibin/doc?ptc/20030901, Unified Modeling Language (UML), version 1.5. http://www.omg.org/technology/documents/formal/uml.htm.

package Core {
	abstract class Element {
	}

	abstract class ModelElement extends Element {
		reference namespace[0-1] : Namespace oppositeOf ownedElement;
		attribute name[0-1] : String;
		attribute visibility[0-1] : VisibilityKind;
		attribute isSpecification : Boolean;
	}

	abstract class GeneralizableElement extends ModelElement {
		reference generalization[*] : Generalization oppositeOf child;
		attribute isRoot : Boolean;
		attribute isLeaf : Boolean;
		attribute isAbstract : Boolean;
	}

	abstract class Namespace extends ModelElement {
		reference ownedElement[*] container : ModelElement oppositeOf namespace;
	}

	abstract class Classifier extends GeneralizableElement, Namespace {
		reference powertypeRange[*] : Generalization oppositeOf powertype;
		reference feature[*] ordered container : Feature oppositeOf owner;
	}

	abstract class Feature extends ModelElement {
		reference owner[0-1] : Classifier oppositeOf feature;
		attribute ownerScope : ScopeKind;
	}

	abstract class StructuralFeature extends Feature {
		reference type : Classifier;
		attribute multiplicity[0-1] : Multiplicity;
		attribute changeability[0-1] : ChangeableKind;
		attribute targetScope[0-1] : ScopeKind;
		attribute ordering[0-1] : OrderingKind;
	}

	class AssociationEnd extends ModelElement {
		reference association : Association oppositeOf connection;
		reference specification[*] : Classifier;
		reference participant : Classifier;
		reference qualifier[*] ordered container : Attribute oppositeOf associationEnd;
		attribute isNavigable : Boolean;
		attribute ordering[0-1] : OrderingKind;
		attribute aggregation[0-1] : AggregationKind;
		attribute targetScope[0-1] : ScopeKind;
		attribute multiplicity[0-1] : Multiplicity;
		attribute changeability[0-1] : ChangeableKind;
	}

	abstract class Relationship extends ModelElement { }

	class Association extends GeneralizableElement, Relationship {
		reference connection[2-*] ordered container : AssociationEnd oppositeOf association;
	}

	class Attribute extends StructuralFeature {
		reference associationEnd[0-1] : AssociationEnd oppositeOf qualifier;
		attribute initialValue[0-1] : Expression;
	}

	class Generalization extends Relationship {
		reference parent : GeneralizableElement;
		reference powertype[0-1] : Classifier oppositeOf powertypeRange;
		reference child : GeneralizableElement oppositeOf generalization;
		attribute discriminator[0-1] : String;
	}

}

package Common_Behavior {
	abstract class Instance extends ModelElement {
		reference ownedInstance[*] container : Instance;
		reference linkEnd[*] : LinkEnd oppositeOf instance;
		reference classifier[1-*] : Classifier;
		reference componentInstance[0-1] : ComponentInstance oppositeOf resident;
		reference slot[*] container : AttributeLink oppositeOf instance;
		reference ownedLink[*] container : Link;
	}

	class AttributeLink extends ModelElement {
		reference instance[0-1] : Instance oppositeOf slot;
		reference value : Instance;
		reference linkEnd[0-1] : LinkEnd oppositeOf qualifiedValue;
		reference "attribute" : Attribute;
	}

	class Link extends ModelElement {
		reference association : Association;
		reference connection[2-*] container : LinkEnd oppositeOf link;
	}

	class LinkEnd extends ModelElement {
		reference link : Link oppositeOf connection;
		reference qualifiedValue[*] ordered container : AttributeLink oppositeOf linkEnd;
		reference instance : Instance oppositeOf linkEnd;
		reference associationEnd : AssociationEnd;
	}

	class ComponentInstance extends Instance {
		reference resident[*] : Instance oppositeOf componentInstance;
		reference nodeInstance[0-1] : NodeInstance oppositeOf resident;
	}

	class NodeInstance extends Instance {
		reference resident[*] : ComponentInstance oppositeOf nodeInstance;
	}

}

package Use_Cases {
	class UseCase extends Classifier {
		reference include[*] : Include oppositeOf base;
		reference extend[*] : Extend oppositeOf extension;
		reference extensionPoint[*] container : ExtensionPoint oppositeOf useCase;
	}

	class Actor extends Classifier {
	}

	class UseCaseInstance extends Instance {
	}

	class Extend extends Relationship {
		reference extensionPoint[1-*] ordered : ExtensionPoint;
		reference extension : UseCase oppositeOf extend;
		reference base : UseCase;
		attribute condition : BooleanExpression;
	}

	class Include extends Relationship {
		reference addition : UseCase;
		reference base : UseCase oppositeOf include;
	}

	class ExtensionPoint extends ModelElement {
		reference useCase : UseCase oppositeOf extensionPoint;
		attribute location : String;
	}
}

package Data_Types {
	enumeration AggregationKind {
		literal ak_none;
		literal ak_aggregate;
		literal ak_composite;
	}

	enumeration ChangeableKind {
		literal ck_changeable;
		literal ck_frozen;
		literal ck_addOnly;
	}

	enumeration OrderingKind {
		literal ok_unordered;
		literal ok_ordered;
	}

	enumeration ScopeKind {
		literal sk_instance;
		literal sk_classifier;
	}

	enumeration VisibilityKind {
		literal vk_public;
		literal vk_protected;
		literal vk_private;
		literal vk_package;
	}

	class Multiplicity {
		reference range[1-*] container : MultiplicityRange oppositeOf multiplicity;
	}

	class MultiplicityRange {
		reference multiplicity : Multiplicity oppositeOf range;
		attribute lower : Integer;
		attribute upper : Integer;
	}

	class Expression {
		attribute language[0-1] : String;
		attribute body : String;
	}

	class BooleanExpression extends Expression {
	}

}

package PrimitiveTypes {
	datatype Boolean;
	datatype Float;
	datatype Integer;
	datatype Long;
	datatype String;
	datatype Double;
}
