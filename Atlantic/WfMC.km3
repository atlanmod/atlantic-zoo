-- @name		WfMC
-- @version		0.1
-- @domains		Workflow Process
-- @authors		Hugo Bruneliere (hugo.bruneliere <at> gmail.com), Pierrick Guyard (pierrick.guyard <at> gmail.com)
-- @date		2005/08/09
-- @description	This metamodel is inspired by the structure of WfMC (Workflow Management Coalition) process. A variety of different tools may be used to analyze, model, describe and document a business process. The workflow process definition interface defines a common interchange format, which supports the transfer of workflow process definitions between separate products. The interface also defines a formal separation between the development and run-time environments, enabling a process definition, generated by one modeling tool, to be used as input to a number of different workflow run-time products. A workflow process definition, generated by a build-time tool, is capable of interpretation in different workflow runtime products. Process definitions transferred between these products or stored in a separate repository are accessible via that common interchange format. To provide a common method to access and describe workflow definitions, a workflow process definition meta-data model has been established. This meta-data model identifies commonly used entities within a process definition. A variety of attributes describe the characteristics of this limited set of entities. Based on this model, vendor specific tools can transfer models via a common exchange format.

package WfMC {

	class WorkflowProcessDefinition {
		reference participantSpecificatons[*] container : WorkflowParticipantSpecification oppositeOf processDefinition;
		reference revelantDatas[*] container : WorkflowRelevantData oppositeOf processDefinition;
		reference applicationDeclarations[*] container : WorkflowApplicationDeclaration oppositeOf processDefinition;
		reference processActivities[*] container : WorkflowProcessActivity oppositeOf processDefinition;
		reference transitionInformations[*] container : TransitionInformation oppositeOf processDefinition;
	}
	
	class WorkflowApplicationDeclaration {
		reference processDefinition : WorkflowProcessDefinition oppositeOf applicationDeclarations;
		reference processActivities[*] : WorkflowProcessActivity oppositeOf applicationDeclarations;
		reference revelantDatas[*] : WorkflowRelevantData oppositeOf applicationDeclarations;
	}
		
	class WorkflowRelevantData {
		reference processDefinition : WorkflowProcessDefinition oppositeOf revelantDatas;
		reference applicationDeclarations[*] : WorkflowApplicationDeclaration oppositeOf revelantDatas;
		reference processActivities[*] : WorkflowProcessActivity oppositeOf revelantDatas;
		reference participantSpecifications[*] : WorkflowParticipantSpecification oppositeOf revelantDatas;
		reference transitionInformations[*] : TransitionInformation oppositeOf revelantDatas;
	}
			
	class WorkflowParticipantSpecification {
		reference processDefinition : WorkflowProcessDefinition oppositeOf participantSpecificatons;
		reference revelantDatas[*] : WorkflowRelevantData oppositeOf participantSpecifications;
		reference processActivities[*] : WorkflowProcessActivity  oppositeOf participantSpecifications;
	}
				
	class WorkflowProcessActivity {
		reference processDefinition : WorkflowProcessDefinition oppositeOf processActivities;
		reference applicationDeclarations[*] : WorkflowApplicationDeclaration oppositeOf processActivities;
		reference revelantDatas[*] : WorkflowRelevantData oppositeOf processActivities;
		reference participantSpecifications[*] : WorkflowParticipantSpecification oppositeOf processActivities;
		reference to_transitionInformation : TransitionInformation oppositeOf to_processActivity;
		reference from_transitionInformation : TransitionInformation oppositeOf from_processActivity;
	}
				
	class TransitionInformation {
		reference processDefinition : WorkflowProcessDefinition oppositeOf transitionInformations;
		reference revelantDatas[*] : WorkflowRelevantData oppositeOf transitionInformations;
		reference to_processActivity : WorkflowProcessActivity oppositeOf to_transitionInformation;
		reference from_processActivity : WorkflowProcessActivity oppositeOf from_transitionInformation;
		
	}
}

package PrimitiveTypes {	
	datatype String;
}