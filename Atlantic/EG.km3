-- @name		EG
-- @version		1.0
-- @authors		Youssef Srour (Srour.youssef@gmail.com)
-- @date		2006/07/24
-- @description	This metamodel describes EG. EG stands for Execution Graphs. In EG, nodes represent software workload components, and edges the transfer of control. Each Node in the EG metamodel is characterized by attributes such as name, time-demand, resource-type and service-name (demand vector). The node type (control, basic, etc.) derives directly from the EG terminology.
-- @see 		http://delivery.acm.org/10.1145/1080000/1071024/p25-grassi.pdf?key1=1071024&key2=9340095511&coll=GUIDE&dl=&CFID=15151515&CFTOKEN=6184618

package EG_MOF{

-- Begin class ExecutionGraph
	class ExecutionGraph {
		reference node[1-*] container : Node oppositeOf executionGraph;
		reference nodeNested : Node oppositeOf nested;
	}--End class ExecutionGraph

-- Begin class Node
	class Node {
		reference predecessor [*] : Node oppositeOf successor;
		reference successor [*] : Node oppositeOf predecessor;
		reference executionGraph : ExecutionGraph oppositeOf node;
		reference nested[*] : ExecutionGraph oppositeOf nodeNested;		
	}--End class Node

-- Begin class Start
	class Start extends Node {
		
	}--End class Start

-- Begin class End
	class End extends Node {
		
	}--End class End

-- Begin class Control
	class Control extends Node {
		
	}--End class Control

-- Begin class Basic
	class Basic extends Node {
		
	}--End class Basic

-- Begin class Branch
	class Branch extends Control {
		
	}--End class Branch

-- Begin class Loop
	class Loop extends Control {
		
	}--End class Loop

-- Begin class Fork
	class Fork extends Control {
		
	}--End class Fork

-- Begin class Join
	class Join extends Control {
		
	}--End class Join

-- Begin class Acquire
	class Acquire extends Control {
		
	}--End class Acquire

-- Begin class Release
	class Release  extends Control{
		
	}--End class Release

-- Begin class Split
	class Split extends Control {
		
	}--End class Split
}

package PrimitiveTypes {
	datatype String;
	datatype Boolean;
	datatype Integer;
} 