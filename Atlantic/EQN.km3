-- @name		EQN
-- @version		1.0
-- @authors		Youssef Srour (Srour.youssef@gmail.com)
-- @date		2006/07/24
-- @description	This metamodel describes EQN (Extended Queueing Network). It is an extension of QN (as LQN). EQN has been introduced in order to represent several interesting features of real systems, such as synchronization and concurrency constraints, finite capacity queues, memory and population constraints and simultaneous resource possession.
-- @see 		http://delivery.acm.org/10.1145/1080000/1071024/p25-grassi.pdf?key1=1071024&key2=9340095511&coll=GUIDE&dl=&CFID=15151515&CFTOKEN=6184618

package EQN {

-- Begin class RoutingChain
	class RoutingChain {
		reference queuingNetwork[0-*] : QueuingNetwork oppositeOf workLoad;
	}--End class RoutingChain

-- Begin class QueuingNetwork
	class QueuingNetwork {
		reference center [1-*] container : Center oppositeOf queuingNetwork;
		reference workLoad container : RoutingChain oppositeOf queuingNetwork;
	}--End class QueuingNetwork
	
-- Begin class ExecutionGraph
	class ExecutionGraph {
		reference nodeNested : Node oppositeOf nested;
		reference node [1-*] container : Node oppositeOf executionGraph;
	}--End class ExecutionGraph
	
-- Begin class Center
	class Center {
		reference  node : Node oppositeOf demand;
		reference queuingNetwork : QueuingNetwork oppositeOf center;
	}--End class Center
	
-- Begin class Node
	class Node {
		reference  nested : ExecutionGraph oppositeOf nodeNested;
		reference executionGraph : ExecutionGraph oppositeOf node;
		reference  demand [1-*]  : Center oppositeOf node;
	}--End class Node
	
-- Begin class Special
	class Special extends Center {
		
	}--End class Special
	
-- Begin class ActiveCenter
	class ActiveCenter extends Center {
		
	}--End class ActiveCenter
	
-- Begin class PassiveCenter
	class PassiveCenter extends Center {
		
	}--End class PassiveCenter
	
-- Begin class Source
	class Source extends Special {
		
	}--End class Source
	
-- Begin class Sink
	class Sink extends Special {
		
	}--End class Sink
	
-- Begin class Fork
	class Fork extends Special {
		
	}--End class Fork
	
-- Begin class Join
	class Join extends Special {
		
	}--End class Join
	
-- Begin class Split
	class Split extends Special {
		
	}--End class Split
	
-- Begin class Allocate
	class Allocate extends Special {
		
	}--End class Allocate
	
-- Begin class Release
	class Release extends Special {
		
	}--End class Release
}

package PrimitiveTypes {
	datatype String;
	datatype Boolean;
	datatype Integer;
} 