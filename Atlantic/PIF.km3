-- @name		PIF
-- @version		0.1
-- @domains		Interchange Format
-- @authors		Hugo Bruneliere (hugo.bruneliere <at> gmail.com), Pierrick Guyard (pierrick.guyard <at> gmail.com)
-- @date		2005/08/04
-- @description	This metamodel describes the structure of PIF (Process Interchange Format). The goal of the PIF Project is to develop an interchange format to help automatically exchange process descriptions among a wide variety of business process modeling and support systems such as workflow software, flow charting tools, process simulation systems, and process repositories. Instead of having to write ad hoc translators for each pair of such systems, each system will only need to have a single translator for converting process descriptions in that system into and out of the common PIF format. Then any system will be able to automatically exchange basic process descriptions with any other system. The PIF project aims to support sharing process descriptions such a way that that they can be automatically translated back and forth between PIF and other process representations with as little loss of meaning as possible. If translation cannot be done fully automatically, the human efforts needed to assist the translation should be minimized. If a translator cannot translate part of a PIF process description to its target format, it will: Translate as much of the description as possible (and not, for example, simply issue an error message and give up); Represent any untranslatable parts so that the translator can add them back to the process description when it is translated back into PIF.

package PIF {


	class Entity {}

	class Activity extends Entity {}

	class Object extends Entity {}

	class Timepoint extends Entity {}

	class Relation extends Entity {}

	class Decision extends Activity {}

	class Agent extends Object {}

	class Creates extends Relation {}

	class Modifies extends Relation {}

	class Before extends Relation {}

	class Uses extends Relation {}

	class Performs extends Relation {}

	class ActivityStatus extends Relation {}

	class Succesor extends Relation {}
	
}
