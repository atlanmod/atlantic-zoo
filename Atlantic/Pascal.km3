-- @name		Pascal
-- @version		0.1
-- @domains		Programming Language
-- @authors		Hugo Bruneliere (hugo.bruneliere <at> gmail.com), Pierrick Guyard (pierrick.guyard <at> gmail.com)
-- @date		2005/08/10
-- @description	This metamodel describes the Pascal programming language, which was originally developed by Niklaus Wirth, a member of the International Federation of Information Processing (IFIP) Working Group 2.1. Professor Niklaus Wirth developed Pascal to provide features that were lacking in other languages of the time. His principle objectives for Pascal were for the language to be efficient to implement and run, allow for the development of well structured and well organized programs, and to serve as a vehicle for the teaching of the important concepts of computer programming. Pascal, which was named after the mathematician Blaise Pascal, is a direct descendent from ALGOL 60, which Wirth helped develop. Pascal also draws programming components from ALGOL 68 and ALGOL-W. The original published definition for the Pascal language appeared in 1971 with latter revisions published in 1973. It was designed to teach programming techniques and topics to college students and was the language of choice to do so from the late sixties to the late heighties. Significant Language Features: Built in Data Types- Pascal contains it is own built in data types of Integer, Real, Character, and Boolean. User defined Data Types - Has the ability to define scalar types as well as sub-ranges of those data types. Provides a defined set of Data Structures- These data structures include Arrays, Records, Files and Sets. Has a strong data typing element - Pascal compliers can diagnose an incompatible assignment of one type to a variable to another type. Supports Structured Programming - This is accomplished through the use of subprograms called procedures and functions. Simplicity and Expressivity - Because the language is simple and expressive in nature it allows for effective teaching of computer programming techniques.  The Prime area of application that Pascal entails is the learning environment. This language was not really developed to be used for anything other than teaching students the basics of programming, after all it was originally developed for this purpose. In the early seventies to the early nineties Pascal was the language of choice for most major colleges and universities for teaching college level programming techniques.

package Pascal {

	class Program {
		attribute name : String;
		reference variables[*] container : Variable oppositeOf program;
		reference types[*] container : Type oppositeOf program;
		reference procedures[*] container : Procedure oppositeOf program;
	}
	
	class Variable {
		attribute name : String;
		reference program : Program oppositeOf variables;
		reference procedure : Procedure oppositeOf variables;
		reference type : Type oppositeOf variables;
	}

	class Type {
		attribute name : String;
		reference program : Program oppositeOf types;
		reference variables[*] : Variable oppositeOf type;
	}

	class Parameter extends Variable {
		reference procedure_parameter : Procedure oppositeOf parameters;
	}
	
	class Instruction {
		reference block : Block oppositeOf instructions;
	}

	class Calculation extends Instruction {}
	
	class Control extends Instruction {}
		
	class Assignment extends Instruction {}

	class Block extends Instruction {
		reference instructions[*] ordered container : Instruction oppositeOf block;
		reference procedure : Procedure oppositeOf block_procedure;
		reference loop : Loop oppositeOf block_loop;
		reference conditional : Conditional oppositeOf blocks;
	}
	
	class Conditional extends Control {
		reference blocks[1-2] ordered container : Block oppositeOf conditional;
	}

	class Loop extends Control {
		reference block_loop container : Block oppositeOf loop;
	}
		
	class Procedure extends Control {
		attribute name : String;
		reference program : Program oppositeOf procedures;
		reference variables[*] container : Variable oppositeOf procedure;
		reference parameters[*] container : Parameter oppositeOf procedure_parameter;
		reference block_procedure container : Block oppositeOf procedure;
	}
	
	class Function extends Procedure {
		reference returnType : Type;
	}
	
	class For extends Loop {}
	
	class While extends Loop {}
		
	class Repeat extends Loop {}

}


package PrimitiveTypes {
	datatype String;
}