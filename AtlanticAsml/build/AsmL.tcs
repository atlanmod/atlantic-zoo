--@begin AsmL TCS
syntax AsmL {

	--@begin primitive template
	primitiveTemplate identifier for String default using NAME:
		value = "%token%";

	primitiveTemplate stringSymbol for String using STRING:
		value = "%token%",
		serializer="'\'' + %value%.toCString() + '\''";

	primitiveTemplate integerSymbol for Integer default using INT:
		value = "Integer.valueOf(%token%)";

	primitiveTemplate floatSymbol for Double default using FLOAT:
		value = "Double.valueOf(%token%)";

	primitiveTemplate booleanSymbol for Boolean default using BOOLEAN:
		value = "Boolean.valueOf(%token%)";
	--@end primitive template

	--@begin root element AsmL File
	template AsmLFile main
		:	[
				elements
			] {indentIncr = 0, nbNL = 2, startNL = false, endNL = false}
			[
				main
			] {indentIncr = 0, nbNL = 2, startNL = true, endNL = false}
		;
	--@end root element AsmL File

	--@begin AsmL elements
	--@begin Namespace
	template Namespace
		:	"namespace" name
		;
	--@end Namespace
	
	--@begin Structure
	template Structure
		: 	"structure" name
			(isDefined(superStructureName) ? "extends" superStructureName)
			(isDefined(varOrCase) ? 
				[
					varOrCase
				] {endNL = false}
			)
		;
		
	template Case
		: 	"case" name
			(isDefined(variables) ?
				[
					variables
				] {endNL = false}
			)
		;
	--@end Structure
	
	--@begin Enumeration
	template Enumeration
		: 	"enum" name 
			(isDefined(enumerators) ?
				[
					enumerators
				] {endNL = false}
			)
		;

	template Enumerator
		: 	name (isDefined(value) ? "=" value)
		;
	--@end Enumeration
	
	--@begin Class
	template Class
		: 	(isAbstract ? "abstract") "class" name (isDefined(superClassName) ? "extends" superClassName)
			(isDefined(varOrMethod) ?
				[
					varOrMethod
				] {endNL = false}
			)
		;
	--@end Class
	--@end AsmL elements

	--@begin Functions
	--@begin Method and Procedure
	template Method
		: 	(isAbstract ? "abstract")
			name "(" (isDefined(parameters) ?  parameters{ separator = ","}) ")"
			(isDefined(returnType) ? "as" returnType)
			(isDefined(body) ?
				[
					body
				] {endNL = false}
			)
		;
	
	template Parameter
		:	name "as" type
		;
	--@end Method and Procedure
	
	--@begin Main Method 
	template Main
		: 	"Main()"
			(isDefined(initialisations) ?
				[
					initialisations
				] {endNL = false}
			)
			(isDefined(body) ?
				[
					body
				] {endNL = false}
			)
		;
	
	template Initially
		:  "initially" id "=" val 
		;
	--@end Main Method 
	--@end Functions 
	
	--@begin Variable 
	template VarDeclaration
		:	(isConstant ? "const") (isDeclaration ? "var")
			name "as" type
		;
	--@end Variable
	
	--@begin Types
	template NamedType
		: name (withNull ? "?")
		;
	
	template MapType
		: "Map" "of" ofType "to" toType
		;
	
	template TupletType
		:  "(" types{ separator = ","} ")"
		 	(withNull ? "?")
		;
	
	template SetType
		:	"Set" "of" of
		;
	
	template SeqType
		:	"Seq" "of" of
		;
	--@end Types
	
--	--@begin Term  	
--	template Term abstract operatored;
--	
--	template VarTerm
--		: name
--		;
--	
--	template MapTerm
--		:"todo"
--		;
--
--	template TupletTerm
--		: "(" terms{separator = ","} ")"
--		;
--	--@end Term  
--	
--	
--	--@begin Body
--	template Body 
--		:	[rules]{indentIncr = 0}
--		;
--	--@end Body
--
--	--@begin InWhereHolds
--	template InWhereHolds
--		: 	var 
--			"in" in 
--			(isDefined(where)?"where" where) 
--			(isDefined(holds)? "holds" holds)
--		;
--	--@begin InWhereHolds
--	
--	--@begin Rules
--	template Rule abstract;
--	
--	--@begin Steps	
--	template Step 
--		: 	"Step" (isDefined(name)? name ":")
--			[(isDefined(body)?body)]{startNL = false}
--		;
--	
--	template StepUntilFixPoint
--		: 	"step" "until" "fixpoint" 
--			[(isDefined(body)?body)]{startNL = false}
--		;
--		
--	template StepExpression abstract;
--	
--	template StepWhile
--		: 	"step" "while" expression
--		;
--		
--	template StepUntil
--		:	"step" "until" expression
--		;
--		
--	template StepForEach
--		: 	"step" "foreach" expressions{separator = ","}
--		;
--	--@end Steps
--	
--	template ReturnRule
--		: 	"return" term 
--		;
--
--	template MethodInvocation
--		: 	called
--		;
--		
--	template AddRule
--		: 	"add" val "to" set
--		;
--	
--	template RemoveRule
--		:	"remove" val "from" set
--		;
--		
--	--@begin update rules
--	template UpdateRule abstract;
--	
--	template UpdateVarRule
--		: 	updateVar ":=" term 
--		;
--		
--	template UpdateFieldRule
--		: 	path{ separator = "."} ":=" term 
--		;	
--	
--	template UpdateMapRule
--		:	updateMap "(" parameters { separator = ")[" } ")" ":=" term 
--		;	
--	--@begin update rules
--	
--	template ChooseRule context
--		:	"choose" expressions{separator=","}
--			[ifChoosenRules]
--			(isDefined(ifNotChoosenRule) ? "ifnone" [ ifNotChoosenRule ])
--		;
--	
--	template ConditionalRule
--		:	"if" condition "then"
--			[ thenRule ]{startNL = false}
--			(isDefined(elseRule) ? "else" [ elseRule ])
--			(isDefined(elseIfRule) ? [ elseIfRule ])
--		;		
--		
--	template ElseIf
--		:	"elseif" condition "then" 
--			[ thenRule ]{startNL = false}
--			(isDefined(elseRule) ? "else" [ elseRule ])
--			(isDefined(elseIfRule) ? [ elseIfRule ])
--		;		
--
--	template DoForallRule context
--		:	"forall" expressions{ separator = "," }
--			doRule
--		;
--	--@end Rules

	--@begin Constant
	template Constant abstract;
	
	template StringConstant
		: 	val --{as = stringSymbol}
		;
	
	template IntegerConstant
		:	val
		;
	
	template BooleanConstant
		:	val
		;
	
	template NullConstant
		:	"null"
		;
	--@end Constant

-- 	--@begin rule operator
-- 	operatorTemplate Operator(operators =
--				opNot opMinus1
--				opStar opSlash opMod
--				opPlus opMinus2
--				opEq opGt opLt opGe opLe opNe
--				opAnd opOr
--			, source = leftExp, storeOpTo = opName, storeRightTo = rightExp)
--			;
--	--@end rule operator

	--@begin grammar for operator
	symbols {
			excl		= "!";
			coma		= ","	: leftNone, rightSpace;
			lparen	= "("	: leftNone;
			rparen	= ")"	: rightSpace;
			lcurly		= "{"	: leftSpace;
			rcurly	= "}";
			semi		= ";";
			colon		= ":"	: leftSpace, rightSpace;	

			-- operator symbols
			minus	= "-";
			star		= "*";
			slash		= "/";
			plus		= "+";
			mod		= "mod";		
			gt			= ">";
			minusgt	= "->"	: leftSpace, rightSpace;
			gtminus	= "<-"	: leftSpace, rightSpace;
			lt			= "<"	: leftSpace, rightSpace;
			ge			= ">=";
			le			= "<=";
			ne			= "!=";
			eq			= "=";
			coloneq	= ":=";
	}
	operators {
		priority 0 {
			opNot = excl, 1;		-- no corresponding symbol => symbol is the keyword defined by the quoted string (which is also the name)
			opMinus1 = minus, 1;
		}
		priority 1 {
			opStar = star, 2;
			opSlash = slash, 2;
			opMod = "mod", 2;
		}
		priority 2 {
			opPlus = plus, 2;
			opMinus2 = minus, 2;
		}
		priority 3 {
			opEq = eq, 2;
			opGt = gt, 2;
			opLt = lt, 2;
			opGe = ge, 2;
			opLe = le, 2;
			opNe = ne, 2;
			opAnd = "and", 2;			
			opOr = "or", 2;
		}
	}

	lexer = "
		class ASMLexer extends Lexer;	

		options {
			k = 2;
			charVocabulary = '\\0' .. '\\u00FF';
			testLiterals = false;
		}	

		{
			protected Token makeToken(int t) {
				org.atl.engine.injectors.ebnf.LocationToken ret = null;
				tokenObjectClass = org.atl.engine.injectors.ebnf.LocationToken.class;
				ret = (org.atl.engine.injectors.ebnf.LocationToken)super.makeToken(t);
				ret.setEndLine(getLine());
				ret.setEndColumn(getColumn());	
				return ret;
			}
		}

		protected
		NL
			:	(	'\\r' '\\n'
				|	'\\n' '\\r'	//Improbable
				|	'\\r'
				|	'\\n'
				)
				{newline();}
			;	

		WS
			:	(	' '
				|	'\\t'
				|	NL
				)
				{ $setType(Token.SKIP); }
			;	

		COMMENT
			:	\"--\"
				(~(	'\\r'
				|	'\\n'
				))*
				({LA(1) != EOF_CHAR}? NL)?
				{ $setType(Token.SKIP); }
			;	

		protected
		DIGIT
			:	'0'..'9'
			;	

		protected
		ALPHA
			:	'a'..'z'
			|	'A'..'Z'
			|	'_'
			//For Unicode compatibility (from 0000 to 00ff)
			|	'\\u00C0' .. '\\u00D6'
			|	'\\u00D8' .. '\\u00F6'
			|	'\\u00F8' .. '\\u00FF'
			;

		protected
		SNAME
			options {
				testLiterals = true;
			}
			:	(ALPHA) (ALPHA | DIGIT)*
			;	

		NAME
			:	s:SNAME {if(s.getType() != SNAME) $setType(s.getType());}
			{
				if($getText.equals(\"true\")) $setType(BOOLEAN);
				if($getText.equals(\"false\")) $setType(BOOLEAN);
			}
			;	

		INT
			:	(DIGIT)+
				(('.' DIGIT)=> '.' (DIGIT)+ {$setType(FLOAT);})?
			;

		protected
		ESC
			:	'\\\\'!
				(	'n' {$setText(\"\\n\");}
				|	'r' {$setText(\"\\r\");}
				|	't' {$setText(\"\\t\");}
				|	'b' {$setText(\"\\b\");}
				|	'f' {$setText(\"\\f\");}
				|	'\"' {$setText(\"\\\"\");}
				|	'\\'' {$setText(\"\\'\");}
				|	'\\\\' {$setText(\"\\\\\");}
				|	(
					('0'..'3')
					(
						options {
							warnWhenFollowAmbig = false;
						}
					:	('0'..'7')
						(
							options {
								warnWhenFollowAmbig = false;
							}
					:	'0'..'7'
						)?
					)?
				|	('4'..'7')
					(
						options {
							warnWhenFollowAmbig = false;
						}
					:	('0'..'7')
					)?
				)
				{
					s	String s = $getText;
					int i;
					int ret = 0;
					String ans; 
					for (i=0; i<s.length(); ++i)
						ret = ret*8 + s.charAt(i) - '0';
					ans = String.valueOf((char) ret);
					$setText(ans);
				}
			)
		;

		STRING
			:	'\\\"'!
				(	ESC
				|	'\\n' {newline();}
				|	~('\\\\'|'\\\"'|'\\n')
				)*
				'\\\"'!
			;
	";
--@end grammar for operator
				
}
--@end AsmL TCS
