( defstruct TemplateExp )
( defstruct ObjectTemplateExp :referredClass )
( defstruct CollectionTemplateExp )
( defstruct PropertyTemplateItem :objContainer :value :referredProperty )
( defstruct ImperativeIterateExp :target :body )
( defstruct AssignExp :left )
( defstruct BlockExp )
( defstruct SwitchExp )
( defstruct VariableInitExp :referredVariable )
( defstruct WhileExp :condition :body )
( defstruct ComputeExp :returnedElement :body )
( defstruct AltExp :condition :body )
( defstruct UnlinkExp :target :item )
( defstruct ReturnExp :value )
( defstruct BreakExp )
( defstruct TryExp :tryBody )
( defstruct RaiseExp :exception )
( defstruct ContinueExp )
( defstruct ForExp :body )
( defstruct TupleExp :element )
( defstruct Typedef :base :package )
( defstruct InstantiationExp :instantiatedClass )
( defstruct DictionaryType :package )
( defstruct DictLiteralExp )
( defstruct DictLiteralPart :key :value )
( defstruct TemplateParameterType :package )
( defstruct LogExp )
( defstruct AssertExp :assertion )
( defstruct ImperativeLoopExp :body )
( defstruct CollectorExp :target :body )
( defstruct ImperativeExpression )
( defstruct UnpackExp :variable )
( defstruct AnonymousTupleType :package )
( defstruct AnonymousTupleLiteralExp )
( defstruct AnonymousTupleLiteralPart )
( defstruct ListType :package )
( defstruct Class :package )
( defstruct DataType :package )
( defstruct Element )
( defstruct Tag )
( defstruct Enumeration :package )
( defstruct NamedElement )
( defstruct Extent )
( defstruct Object )
( defstruct Operation :class )
( defstruct MultiplicityElement )
( defstruct Package )
( defstruct Type :package )
( defstruct Parameter )
( defstruct EnumerationLiteral )
( defstruct Property :Class )
( defstruct TypedElement )
( defstruct PrimitiveType :package )
( defstruct URIExtent )
( defstruct Comment )
( defstruct MappingBody )
( defstruct Helper :class )
( defstruct ResolveExp )
( defstruct ResolveInExp )
( defstruct OperationalTransformation :package )
( defstruct MappingParameter )
( defstruct MappingOperation :refinedRelation :class :class )
( defstruct MappingCallExp )
( defstruct Constructor :class )
( defstruct ContextualProperty :context :Class )
( defstruct EntryOperation :class )
( defstruct ImperativeCallExp )
( defstruct ImperativeOperation :class )
( defstruct Library :package )
( defstruct ModelParameter )
( defstruct ModelType :package )
( defstruct Module :package )
( defstruct ModuleImport :importedModule )
( defstruct VarParameter )
( defstruct OperationBody )
( defstruct ConstructorBody )
( defstruct ObjectExp :body :instantiatedClass )
( defstruct Area :guardPattern :bottomPattern )
( defstruct Assignment :bottomPattern :slotExpression :value :targetProperty )
( defstruct BottomPattern :area )
( defstruct GuardPattern :area )
( defstruct Mapping :transformation :guardPattern :bottomPattern )
( defstruct RealizedVariable )
( defstruct CoreDomain :rule :typedModel :guardPattern :bottomPattern )
( defstruct CorePattern )
( defstruct EnforcementOperation :operationCallExp )
( defstruct Domain :rule :typedModel )
( defstruct Transformation :package )
( defstruct TypedModel :transformation :usedPackage )
( defstruct Rule :transformation )
( defstruct Pattern )
( defstruct Predicate :conditionExpression :pattern )
( defstruct Function :class )
( defstruct FunctionParameter )
( defstruct RelationalTransformation :package )
( defstruct Relation :transformation )
( defstruct RelationDomain :pattern :rootVariable :rule :typedModel )
( defstruct DomainPattern )
( defstruct RelationImplementation :impl :inDirectionOf )
( defstruct Key :identifies :part )
( defstruct BooleanLiteralExp )
( defstruct CallExp )
( defstruct OclExpression )
( defstruct UnlimitedNaturalExp )
( defstruct IfExp :condition :thenExpression :elseExpression )
( defstruct LetExp :variable )
( defstruct Variable )
( defstruct PropertyCallExp )
( defstruct VariableExp )
( defstruct TypeExp )
( defstruct LoopExp :body )
( defstruct IteratorExp :body )
( defstruct StringLiteralExp )
( defstruct IntegerLiteralExp )
( defstruct OperationCallExp )
( defstruct RealLiteralExp )
( defstruct LiteralExp )
( defstruct IterateExp :body )
( defstruct PrimitiveLiteralExp )
( defstruct NumericLiteralExp )
( defstruct CollectionLiteralExp )
( defstruct CollectionLiteralPart :CollectionLiteralExp )
( defstruct CollectionItem :item :CollectionLiteralExp )
( defstruct CollectionRange :first :last :CollectionLiteralExp )
( defstruct TupleLiteralExp )
( defstruct NullLiteralExp )
( defstruct ExpressionInOcl :bodyExpression )
( defstruct OpaqueExpression )
( defstruct InvalidLiteralExp )
( defstruct FeaturePropertyCall )
( defstruct TupleLiteralPart )
( defstruct BagType :package )
( defstruct CollectionType :package )
( defstruct EnumLiteralExp )
( defstruct InvalidType :package )
( defstruct OrderedSetType :package )
( defstruct SequenceType :package )
( defstruct SetType :package )
( defstruct TupleType :package :package )
( defstruct VoidType :package )
( defstruct AnyType :package :package )
