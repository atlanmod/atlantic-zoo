( defstruct AbstractTransformationRule :ruleID )
( defstruct AbstractProductionRule :ruleID )
( defstruct AbstractReactionRule :ruleID )
( defstruct AbstractDerivationRule :ruleID )
( defstruct AbstractIntegrityRule :ruleID )
( defstruct Rule :ruleID )
( defstruct DerivationRule :conditions :conclusions :ruleID )
( defstruct ReactionRule :producedAction :triggeringEvent :ruleID )
( defstruct ProductionRule :conditions :producedAction :ruleID )
( defstruct DeonticIntegrityRule :constraint :ruleID )
( defstruct AlethicIntegrityRule :constraint :ruleID )
( defstruct IntegrityRule :constraint :ruleID )
( defstruct DataClassificationAtom :type :term :isNegated )
( defstruct DatatypePredicateAtom :predicate :dataArguments :isNegated )
( defstruct InequalityAtom :terms :isNegated )
( defstruct EqualityAtom :terms :isNegated )
( defstruct ObjectClassificationAtom :term :type :isNegated )
( defstruct GenericAtom :predicate :isNegated )
( defstruct DataAtom :isNegated )
( defstruct ObjectAtom :isNegated )
( defstruct Slot )
( defstruct PropertyAtom :property :value :subject :isNegated )
( defstruct DataSlot :value :attribute )
( defstruct ObjectSlot :object :referenceProperty )
( defstruct ReferencePropertyAtom :object :referenceProperty :subject :isNegated )
( defstruct AttributionAtom :attribute :subject :dataValue :isNegated )
( defstruct ObjectDescriptionAtom :subject :baseType :isNegated )
( defstruct AssociationAtom :associationPredicate :objectArguments :isNegated )
( defstruct Atom :isNegated )
( defstruct DatatypeFunction :arity :name )
( defstruct GenericFunction :arity :name )
( defstruct Function :arity :name )
( defstruct DataOperation :arity :name )
( defstruct ObjectOperation :arity :name )
( defstruct Operation :arity :name )
( defstruct EnumerationDatatype :name )
( defstruct ExternalVocabulary :externalVocabularyID :externalVocabularyLanguage )
( defstruct GenericEntityName )
( defstruct VocabularyEntry :name )
( defstruct Vocabulary :entries )
( defstruct Property :name )
( defstruct DatatypePredicate :arity :name )
( defstruct Predicate :name )
( defstruct Attribute :name )
( defstruct TypedLiteral :type :lexicalValue )
( defstruct PlainLiteral :lexicalValue )
( defstruct DataLiteral :lexicalValue )
( defstruct ReferenceProperty :name )
( defstruct ObjectName :name )
( defstruct Datatype :name )
( defstruct Class :name )
( defstruct Type :name )
( defstruct AssociationPredicate :name )
( defstruct GenericPredicate :name )
( defstruct ReactionRuleSet )
( defstruct ProductionRuleSet )
( defstruct EventType :eventTypeID )
( defstruct SOAPMessageBody )
( defstruct SOAPConversationalMsgEvtExpression :body :sender :receiver :actor :type :startDateTime :duration :occurDateTime )
( defstruct SOAPRPCResponseMsgEvtExpression :body :sender :receiver :actor :type :startDateTime :duration :occurDateTime )
( defstruct SOAPRPCRequestMsgEvtExpression :body :sender :receiver :actor :type :startDateTime :duration :occurDateTime )
( defstruct SOAPMessageHeaderBlock :nameSpaceName :localName )
( defstruct SOAPMessageHeader )
( defstruct SOAPMessageBodyChild :localName )
( defstruct EveryYearTimeEventExpression :dayOfYear :type :startDateTime :duration :occurDateTime )
( defstruct EveryMonthTimeEventExpression :dayOfMonth :type :startDateTime :duration :occurDateTime )
( defstruct EveryWeekTimeEventExpression :dayOfWeek :time :type :startDateTime :duration :occurDateTime )
( defstruct EveryDayTimeEventExpression :time :type :startDateTime :duration :occurDateTime )
( defstruct EveryHourTimeEventExpression :minute :type :startDateTime :duration :occurDateTime )
( defstruct EveryMinuteTimeEventExpression :second :type :startDateTime :duration :occurDateTime )
( defstruct MessageEventExpression :sender :receiver :actor :type :startDateTime :duration :occurDateTime )
( defstruct SOAPMessageEventExpression :body :sender :receiver :actor :type :startDateTime :duration :occurDateTime )
( defstruct PeriodicTimeEventExpression :type :startDateTime :duration :occurDateTime )
( defstruct SingularTimeEventExpression :dateTime :type :startDateTime :duration :occurDateTime )
( defstruct ActionEventExpression :actor :type :startDateTime :duration :occurDateTime )
( defstruct TimeEventExpression :type :startDateTime :duration :occurDateTime )
( defstruct ParallelEventExpression :timeWindow :startDateTime :duration :occurDateTime )
( defstruct SequenceEventExpression :timeWindow :startDateTime :duration :occurDateTime )
( defstruct ChoiceEventExpression :expressions :minOccurs :maxOccurs :timeWindow :startDateTime :duration :occurDateTime )
( defstruct AtomicEventExpression :type :startDateTime :duration :occurDateTime )
( defstruct AndNotEventExpression :timeWndow :startDateTime :duration :occurDateTime )
( defstruct EventExpression :startDateTime :duration :occurDateTime )
( defstruct InvokeActionExpression :operation )
( defstruct SOAPRPCAction :operation )
( defstruct SOAPAction :operation )
( defstruct DeleteActionExpression :contextArgument :context )
( defstruct CreateActionExpression :context )
( defstruct AssignActionExpression :contextArgument :property )
( defstruct MessageAction )
( defstruct ActionExpression )
( defstruct AtLeastAndAtMostQuantifiedFormula :maxCardinality :minCardinality :formula :variables )
( defstruct AtMostQuantifiedFormula :maxCardinality :formula :variables )
( defstruct AtLeastQuantifiedFormula :minCardinality :formula :variables )
( defstruct QFStrongNegation :formula )
( defstruct QFNegationAsFailure :formula )
( defstruct QFNegation :formula )
( defstruct LiteralConjunction :atoms )
( defstruct QFDisjunction :formulas )
( defstruct QFConjunction :formulas )
( defstruct AndOrNafNegFormula )
( defstruct Conjuction :formulas )
( defstruct UniversallyQuantifiedFormula :formula :variables )
( defstruct StrongNegation :formula )
( defstruct QuantifiedFormula :formula :variables )
( defstruct NegationAsFailure :formula )
( defstruct Negation )
( defstruct LogicalFormula )
( defstruct Implication :consequent :antecedent )
( defstruct ExistentiallyQuantifiedFormula :formula :variables )
( defstruct Disjunction :formulas )
( defstruct Variable :name )
( defstruct ObjectVariable :name )
( defstruct DataVariable :name )
( defstruct GenericVariable :name )
( defstruct DatatypeFunctionTerm :function :dataArguments )
( defstruct DataFunctionTerm )
( defstruct AttributeFunctionTerm :contextArgument :attribute )
( defstruct DataOperationTerm :dataOperationRef )
( defstruct ReferencePropertyFunctionTerm :contextArgument :referencePropertyRef )
( defstruct ObjectOperationTerm :operation )
( defstruct GenericFunctionTerm :functor )
( defstruct GenericTerm )
( defstruct Term )
( defstruct ObjectTerm )
( defstruct DataTerm )
( defstruct RuleSet )
( defstruct RuleBase :ruleBaseID )
( defstruct IntegrityRuleSet )
( defstruct DerivationRuleSet )
