( defstruct Element )
( defstruct ModelElement :isSpecification )
( defstruct GeneralizableElement :isRoot :isLeaf :isAbstract :isSpecification )
( defstruct Namespace :isSpecification )
( defstruct Classifier :isRoot :isLeaf :isAbstract :isSpecification :isSpecification )
( defstruct Feature :ownerScope :isSpecification )
( defstruct StructuralFeature :type :ownerScope :isSpecification )
( defstruct AssociationEnd :association :participant :isNavigable :isSpecification )
( defstruct Relationship :isSpecification )
( defstruct Association :connection :isRoot :isLeaf :isAbstract :isSpecification :isSpecification )
( defstruct Attribute :type :ownerScope :isSpecification )
( defstruct Generalization :parent :child :isSpecification )
( defstruct Instance :classifier :isSpecification )
( defstruct AttributeLink :value :attribute :isSpecification )
( defstruct Link :association :connection :isSpecification )
( defstruct LinkEnd :link :instance :associationEnd :isSpecification )
( defstruct ComponentInstance :classifier :isSpecification )
( defstruct NodeInstance :classifier :isSpecification )
( defstruct UseCase :isRoot :isLeaf :isAbstract :isSpecification :isSpecification )
( defstruct Actor :isRoot :isLeaf :isAbstract :isSpecification :isSpecification )
( defstruct UseCaseInstance :classifier :isSpecification )
( defstruct Extend :extensionPoint :extension :base :condition :isSpecification )
( defstruct Include :addition :base :isSpecification )
( defstruct ExtensionPoint :useCase :location :isSpecification )
( defstruct Multiplicity :range )
( defstruct MultiplicityRange :multiplicity :lower :upper )
( defstruct Expression :body )
( defstruct BooleanExpression :body )
