( defstruct LocatedElement )
( defstruct Unit :name )
( defstruct Library :name )
( defstruct Query :body :name )
( defstruct Module :isRefining :inModels :outModels :name )
( defstruct ModuleElement :module )
( defstruct Helper :definition :module )
( defstruct Rule :name :module )
( defstruct MatchedRule :isAbstract :isRefining :isNoDefault :name :module )
( defstruct LazyMatchedRule :isUnique :isAbstract :isRefining :isNoDefault :name :module )
( defstruct CalledRule :isEntrypoint :isEndpoint :name :module )
( defstruct InPattern :elements :rule )
( defstruct OutPattern :rule :elements )
( defstruct PatternElement :varName )
( defstruct InPatternElement :mapsTo :inPattern :varName )
( defstruct SimpleInPatternElement :mapsTo :inPattern :varName )
( defstruct OutPatternElement :outPattern :varName )
( defstruct SimpleOutPatternElement :outPattern :varName )
( defstruct ForEachOutPatternElement :collection :iterator :outPattern :varName )
( defstruct Binding :value :outPatternElement :propertyName :isAssignment )
( defstruct RuleVariableDeclaration :rule :varName )
( defstruct LibraryRef :unit :name )
( defstruct ActionBlock :rule )
( defstruct Statement )
( defstruct ExpressionStat :expression )
( defstruct BindingStat :source :propertyName :isAssignment :value )
( defstruct IfStat :condition )
( defstruct ForStat :iterator :collection )
( defstruct OclExpression )
( defstruct VariableExp :referredVariable )
( defstruct SuperExp )
( defstruct PrimitiveExp )
( defstruct StringExp :stringSymbol )
( defstruct BooleanExp :booleanSymbol )
( defstruct NumericExp )
( defstruct RealExp :realSymbol )
( defstruct IntegerExp :integerSymbol )
( defstruct CollectionExp )
( defstruct BagExp )
( defstruct OrderedSetExp )
( defstruct SequenceExp )
( defstruct SetExp )
( defstruct TupleExp )
( defstruct TuplePart :tuple :varName )
( defstruct MapExp )
( defstruct MapElement :map :key :value )
( defstruct EnumLiteralExp :name )
( defstruct OclUndefinedExp )
( defstruct PropertyCallExp :source )
( defstruct NavigationOrAttributeCallExp :name :source )
( defstruct OperationCallExp :operationName :source )
( defstruct OperatorCallExp :operationName :source )
( defstruct CollectionOperationCallExp :operationName :source )
( defstruct LoopExp :body :iterators :source )
( defstruct IterateExp :result :body :iterators :source )
( defstruct IteratorExp :name :body :iterators :source )
( defstruct LetExp :variable :in_ )
( defstruct IfExp :thenExpression :condition :elseExpression )
( defstruct VariableDeclaration :varName )
( defstruct Iterator :varName )
( defstruct Parameter :operation :varName )
( defstruct CollectionType :elementType :name )
( defstruct OclType :name )
( defstruct Primitive :name )
( defstruct StringType :name )
( defstruct BooleanType :name )
( defstruct NumericType :name )
( defstruct IntegerType :name )
( defstruct RealType :name )
( defstruct BagType :elementType :name )
( defstruct OrderedSetType :elementType :name )
( defstruct SequenceType :elementType :name )
( defstruct SetType :elementType :name )
( defstruct OclAnyType :name )
( defstruct TupleType :name )
( defstruct TupleTypeAttribute :type :tupleType :name )
( defstruct OclModelElement :model :name )
( defstruct MapType :valueType :keyType :name )
( defstruct OclFeatureDefinition :feature )
( defstruct OclContextDefinition :definition :context_ )
( defstruct OclFeature )
( defstruct Attribute :name :initExpression :type )
( defstruct Operation :name :returnType :body )
( defstruct OclModel :name :metamodel )
