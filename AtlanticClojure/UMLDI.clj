( defstruct Instance :classifier :isSpecification )
( defstruct Signal :isRoot :isLeaf :isAbstract :isSpecification :isSpecification )
( defstruct Action :isAsynchronous :isSpecification )
( defstruct CreateAction :instantiation :isAsynchronous :isSpecification )
( defstruct DestroyAction :isAsynchronous :isSpecification )
( defstruct UninterpretedAction :isAsynchronous :isSpecification )
( defstruct AttributeLink :value :attribute :isSpecification )
( defstruct Object :classifier :isSpecification )
( defstruct Link :association :connection :isSpecification )
( defstruct LinkObject :classifier :isSpecification :association :connection :isSpecification )
( defstruct DataValue :classifier :isSpecification )
( defstruct CallAction :operation :isAsynchronous :isSpecification )
( defstruct SendAction :signal :isAsynchronous :isSpecification )
( defstruct ActionSequence :isAsynchronous :isSpecification )
( defstruct Argument :value :isSpecification )
( defstruct Reception :signal :isRoot :isLeaf :isAbstract :isQuery :ownerScope :isSpecification )
( defstruct LinkEnd :link :instance :associationEnd :isSpecification )
( defstruct ReturnAction :isAsynchronous :isSpecification )
( defstruct TerminateAction :isAsynchronous :isSpecification )
( defstruct Stimulus :receiver :dispatchAction :sender :isSpecification )
( defstruct Exception :isRoot :isLeaf :isAbstract :isSpecification :isSpecification )
( defstruct ComponentInstance :classifier :isSpecification )
( defstruct NodeInstance :classifier :isSpecification )
( defstruct SubsystemInstance :classifier :isSpecification )
( defstruct Multiplicity :range )
( defstruct MultiplicityRange :multiplicity :lower :upper )
( defstruct Expression :body )
( defstruct BooleanExpression :body )
( defstruct TypeExpression :body )
( defstruct MappingExpression :body )
( defstruct ProcedureExpression :body )
( defstruct ObjectSetExpression :body )
( defstruct ActionExpression :body )
( defstruct IterationExpression :body )
( defstruct TimeExpression :body )
( defstruct ArgListsExpression :body )
( defstruct Package :isRoot :isLeaf :isAbstract :isSpecification :isSpecification )
( defstruct Model :isRoot :isLeaf :isAbstract :isSpecification :isSpecification )
( defstruct Subsystem :isInstantiable :isRoot :isLeaf :isAbstract :isSpecification :isSpecification :isRoot :isLeaf :isAbstract :isSpecification :isSpecification )
( defstruct ElementImport :package :importedElement :isSpecification )
( defstruct Element )
( defstruct ModelElement :isSpecification )
( defstruct GeneralizableElement :isRoot :isLeaf :isAbstract :isSpecification )
( defstruct Namespace :isSpecification )
( defstruct Classifier :isRoot :isLeaf :isAbstract :isSpecification :isSpecification )
( defstruct Class :isActive :isRoot :isLeaf :isAbstract :isSpecification :isSpecification )
( defstruct DataType :isRoot :isLeaf :isAbstract :isSpecification :isSpecification )
( defstruct Feature :ownerScope :isSpecification )
( defstruct StructuralFeature :type :ownerScope :isSpecification )
( defstruct AssociationEnd :association :participant :isNavigable :isSpecification )
( defstruct Interface :isRoot :isLeaf :isAbstract :isSpecification :isSpecification )
( defstruct Constraint :isSpecification )
( defstruct Relationship :isSpecification )
( defstruct Association :connection :isRoot :isLeaf :isAbstract :isSpecification :isSpecification )
( defstruct Attribute :type :ownerScope :isSpecification )
( defstruct BehavioralFeature :isQuery :ownerScope :isSpecification )
( defstruct Operation :isRoot :isLeaf :isAbstract :isQuery :ownerScope :isSpecification )
( defstruct Parameter :type :kind :isSpecification )
( defstruct Method :specification :body :isQuery :ownerScope :isSpecification )
( defstruct Generalization :parent :child :isSpecification )
( defstruct AssociationClass :connection :isRoot :isLeaf :isAbstract :isSpecification :isSpecification :isActive :isRoot :isLeaf :isAbstract :isSpecification :isSpecification )
( defstruct Dependency :client :supplier :isSpecification )
( defstruct Abstraction :client :supplier :isSpecification )
( defstruct PresentationElement )
( defstruct Usage :client :supplier :isSpecification )
( defstruct Binding :argument :client :supplier :isSpecification )
( defstruct Component :isRoot :isLeaf :isAbstract :isSpecification :isSpecification )
( defstruct Node :isRoot :isLeaf :isAbstract :isSpecification :isSpecification )
( defstruct Permission :client :supplier :isSpecification )
( defstruct Comment :body :isSpecification )
( defstruct Flow :isSpecification )
( defstruct ElementResidence :container :resident )
( defstruct TemplateParameter :template :parameter )
( defstruct Primitive :isRoot :isLeaf :isAbstract :isSpecification :isSpecification )
( defstruct Enumeration :literal :isRoot :isLeaf :isAbstract :isSpecification :isSpecification )
( defstruct EnumerationLiteral :enumeration :isSpecification )
( defstruct Stereotype :baseClass :isRoot :isLeaf :isAbstract :isSpecification )
( defstruct TagDefinition :isSpecification )
( defstruct TaggedValue :type :modelElement :isSpecification )
( defstruct ProgrammingLanguageDataType :expression :isRoot :isLeaf :isAbstract :isSpecification :isSpecification )
( defstruct Artifact :isRoot :isLeaf :isAbstract :isSpecification :isSpecification )
( defstruct TemplateArgument :binding :modelElement )
( defstruct Collaboration :isRoot :isLeaf :isAbstract :isSpecification :isSpecification )
( defstruct ClassifierRole :base :isRoot :isLeaf :isAbstract :isSpecification :isSpecification )
( defstruct AssociationRole :connection :isRoot :isLeaf :isAbstract :isSpecification :isSpecification )
( defstruct AssociationEndRole :association :participant :isNavigable :isSpecification )
( defstruct Message :interaction :action :receiver :sender :isSpecification )
( defstruct Interaction :message :context :isSpecification )
( defstruct InteractionInstanceSet :context :participatingStimulus :isSpecification )
( defstruct CollaborationInstanceSet :participatingInstance :isSpecification )
( defstruct StateMachine :top :isSpecification )
( defstruct Event :isSpecification )
( defstruct StateVertex :isSpecification )
( defstruct State :isSpecification )
( defstruct TimeEvent :when :isSpecification )
( defstruct CallEvent :operation :isSpecification )
( defstruct SignalEvent :signal :isSpecification )
( defstruct Transition :target :source :isSpecification )
( defstruct CompositeState :isConcurrent :isSpecification )
( defstruct ChangeEvent :changeExpression :isSpecification )
( defstruct Guard :transition :expression :isSpecification )
( defstruct Pseudostate :kind :isSpecification )
( defstruct SimpleState :isSpecification )
( defstruct SubmachineState :submachine :isConcurrent :isSpecification )
( defstruct SynchState :bound :isSpecification )
( defstruct StubState :referenceState :isSpecification )
( defstruct FinalState :isSpecification )
( defstruct Point :x :y )
( defstruct Dimension :width :height )
( defstruct BezierPoint :base :control1 :control2 )
( defstruct DiagramElement :isVisible )
( defstruct GraphElement :semanticModel :position :isVisible )
( defstruct SemanticModelBridge :graphElement :presentation )
( defstruct GraphEdge :anchor :waypoints :semanticModel :position :isVisible )
( defstruct GraphNode :semanticModel :position :isVisible )
( defstruct GraphConnector :graphElement :position )
( defstruct LeafElement :isVisible )
( defstruct Reference :referenced :isVisible )
( defstruct TextElement :text :isVisible )
( defstruct GraphicPrimitive :isVisible )
( defstruct Polyline :waypoints :closed :isVisible )
( defstruct Ellipse :center :radiusX :radiusY :rotation :startAngle :endAngle :isVisible )
( defstruct Image :uri :mimeType :isVisible )
( defstruct Property :key :value )
( defstruct SimpleSemanticModelElement :typeInfo :graphElement :presentation )
( defstruct Uml1SemanticModelBridge :element :graphElement :presentation )
( defstruct CoreSemanticModelBridge :graphElement :presentation )
( defstruct DiagramLink :graphElement :diagram :zoom :viewport )
( defstruct Diagram :owner :name :zoom :viewport :semanticModel :position :isVisible )
( defstruct ActivityGraph :top :isSpecification )
( defstruct Partition :activityGraph :isSpecification )
( defstruct SubactivityState :isDynamic :submachine :isConcurrent :isSpecification )
( defstruct ActionState :isDynamic :isSpecification )
( defstruct CallState :isDynamic :isSpecification )
( defstruct ObjectFlowState :type :isSynch :isSpecification )
( defstruct ClassifierInState :inState :type :isRoot :isLeaf :isAbstract :isSpecification :isSpecification )
( defstruct UseCase :isRoot :isLeaf :isAbstract :isSpecification :isSpecification )
( defstruct Actor :isRoot :isLeaf :isAbstract :isSpecification :isSpecification )
( defstruct UseCaseInstance :classifier :isSpecification )
( defstruct Extend :extensionPoint :extension :base :condition :isSpecification )
( defstruct Include :addition :base :isSpecification )
( defstruct ExtensionPoint :useCase :location :isSpecification )
