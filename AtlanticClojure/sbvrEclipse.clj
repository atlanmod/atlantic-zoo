( defstruct Actuality )
( defstruct StateOfAffairs )
( defstruct Thing )
( defstruct Name :signifier :meaning :expression )
( defstruct Designation :signifier :meaning :expression )
( defstruct Representation :meaning :expression )
( defstruct Meaning )
( defstruct Expression )
( defstruct BindableTarget )
( defstruct AdoptedDefinition :meaning :expression )
( defstruct Definition :meaning :expression )
( defstruct Advice )
( defstruct ElementOfGuidance )
( defstruct Proposition )
( defstruct Statement :meaning :expression )
( defstruct AdviceOfContingency )
( defstruct AdviceOfPossibility )
( defstruct AdviceOfOptionality )
( defstruct AdviceOfPermission )
( defstruct AdviceStatement :meaning :expression )
( defstruct GuidanceStatement :meaning :expression )
( defstruct AggregationFormulation :projection )
( defstruct ProjectingFormulation :projection )
( defstruct LogicalFormulation )
( defstruct SemanticFormulation )
( defstruct Projection :projectionVariable )
( defstruct Variable )
( defstruct PositiveInteger :extension )
( defstruct NonnegativeInteger :extension )
( defstruct Integer :extension )
( defstruct Number :extension )
( defstruct Quantity :extension )
( defstruct NounConcept :extension )
( defstruct Concept :extension )
( defstruct AttributiveNamespace )
( defstruct Namespace )
( defstruct Uri )
( defstruct Text )
( defstruct Characteristic :role :extension )
( defstruct FactType :role :extension )
( defstruct FactTypeForm :placeholder :meaning :expression )
( defstruct Placeholder :signifier :meaning :expression )
( defstruct FactTypeRole :extension )
( defstruct Role :extension )
( defstruct RoleBinding )
( defstruct ReferenceScheme )
( defstruct Set )
( defstruct AuxiliaryVariable )
( defstruct AnswerNominalization :projection )
( defstruct AssociativeFactType :role :extension )
( defstruct AssortmentFactType :role :extension )
( defstruct AtleastnQuantification :minimumCardinality )
( defstruct Quantification )
( defstruct AtmostnQuantification :maximumCardinality )
( defstruct AtmostoneQuantification :maximumCardinality )
( defstruct AtomicFormulation )
( defstruct BagProjection :projectionVariable )
( defstruct BinaryFactType :role :extension )
( defstruct BinaryLogicalOperation :logicalOperand )
( defstruct LogicalOperation :logicalOperand )
( defstruct BodyOfSharedConcepts )
( defstruct BodyOfSharedGuidance )
( defstruct BodyOfSharedMeanings )
( defstruct BusinessPolicy )
( defstruct ElementOfGovernance )
( defstruct BusinessPolicyStatement :meaning :expression )
( defstruct BusinessRule )
( defstruct Rule )
( defstruct BusinessVocabulary )
( defstruct Vocabulary )
( defstruct CategorizationFactType :role :extension )
( defstruct SpecializationFactType :role :extension )
( defstruct CategorizationScheme )
( defstruct CategorizationType :extension )
( defstruct CharacteristicType :extension )
( defstruct ConceptType :extension )
( defstruct ObjectType :extension )
( defstruct ClosedLogicalFormulation )
( defstruct ClosedSemanticFormulation )
( defstruct ClosedProjection :projectionVariable )
( defstruct CommunicationContent :meaning :expression )
( defstruct Community )
( defstruct ConceptOfThingAsComposite :extension )
( defstruct ConceptOfThingAsContinuant :extension )
( defstruct ConceptOfThingAsDeveloped :extension )
( defstruct ConceptOfThingAsOccurrent :extension )
( defstruct ConceptOfThingAsPrimitive :extension )
( defstruct ConceptOfThingAsUnitary :extension )
( defstruct ConceptOfThingExistingDependently :extension )
( defstruct ConceptOfThingExistingIndependently :extension )
( defstruct ConceptualSchema )
( defstruct Conjunction :logicalOperand )
( defstruct ContextOfThing )
( defstruct Segmentation )
( defstruct ContextualizationFactType :role :extension )
( defstruct ContextualizedConcept :extension )
( defstruct ContingencyStatement :meaning :expression )
( defstruct StatementOfAdviceOfPossibility :meaning :expression )
( defstruct DefiniteDescription :meaning :expression )
( defstruct IntensionalDefinition :meaning :expression )
( defstruct DerivableConcept :extension )
( defstruct Description :meaning :expression )
( defstruct DescriptiveExample :meaning :expression )
( defstruct Disjunction :logicalOperand )
( defstruct Equivalence :logicalOperand )
( defstruct ExactlynQuantification :cardinality )
( defstruct ExactlyoneQuantification :cardinality )
( defstruct ExclusiveDisjunction :logicalOperand )
( defstruct ExistentialQuantification :minimumCardinality )
( defstruct ExplicitnessOfRepresentation )
( defstruct ExtensionalDefinition :meaning :expression )
( defstruct Facet :extension )
( defstruct Fact )
( defstruct FactModel )
( defstruct FactSymbol :signifier :meaning :expression )
( defstruct FactTypeHasFactInFactModel :factType :fact :factModel )
( defstruct FactTypeNominalization :projection )
( defstruct FactTypeRoleDesignation :signifier :meaning :expression )
( defstruct FactTypeTemplating )
( defstruct FormalRepresentation :meaning :expression )
( defstruct FundamentalConcept :extension )
( defstruct Icon :signifier :meaning :expression )
( defstruct NonverbalDesignation :signifier :meaning :expression )
( defstruct Implication :logicalOperand )
( defstruct ImpossibilityStatement :meaning :expression )
( defstruct StructuralRuleStatement :meaning :expression )
( defstruct RuleStatement :meaning :expression )
( defstruct IndividualConcept :extension )
( defstruct InformalRepresentation :meaning :expression )
( defstruct InstantiationFormulation )
( defstruct IsfacetofFactType :role :extension )
( defstruct IspropertyofFactType :role :extension )
( defstruct IsroleofFactType :role :extension )
( defstruct KindOfGuidanceStatement )
( defstruct Language )
( defstruct LevelOfEnforcement )
( defstruct LogicalFormulationKind :extension )
( defstruct LogicalNegation :logicalOperand )
( defstruct ModalFormulation )
( defstruct NandFormulation :logicalOperand )
( defstruct NecessityFormulation )
( defstruct NecessityStatement :meaning :expression )
( defstruct NonnecessityStatement :meaning :expression )
( defstruct NonobligationStatement :meaning :expression )
( defstruct StatementOfAdviceOfPermission :meaning :expression )
( defstruct NorFormulation :logicalOperand )
( defstruct Note :meaning :expression )
( defstruct NounConceptNominalization :projection )
( defstruct NounForm :placeholder :meaning :expression )
( defstruct NumericRangeQuantification :maximumCardinality :minimumCardinality )
( defstruct Objectification )
( defstruct ObligationFormulation )
( defstruct ObligationStatement :meaning :expression )
( defstruct OperativeBusinessRuleStatement :meaning :expression )
( defstruct OperativeBusinessRule )
( defstruct OptionalityStatement :meaning :expression )
( defstruct OwnedDefinition :meaning :expression )
( defstruct PartitiveFactType :role :extension )
( defstruct PermissibilityFormulation )
( defstruct PermissionStatement :meaning :expression )
( defstruct PossibilityFormulation )
( defstruct PossibilityStatement :meaning :expression )
( defstruct PreferredDesignation :signifier :meaning :expression )
( defstruct ProhibitedDesignation :signifier :meaning :expression )
( defstruct ProhibitionStatement :meaning :expression )
( defstruct PropositionNominalization )
( defstruct Question )
( defstruct QuestionNominalization :projection )
( defstruct RealworldNumericalCorrespondence )
( defstruct Reference :meaning :expression )
( defstruct RepresentationFormality )
( defstruct Res )
( defstruct RestrictedPermissionStatement :meaning :expression )
( defstruct RestrictedPossibilityStatement :meaning :expression )
( defstruct Rulebook )
( defstruct SemanticCommunity )
( defstruct SpeechCommunity )
( defstruct SententialForm :placeholder :meaning :expression )
( defstruct SetProjection :projectionVariable )
( defstruct Situation )
( defstruct SituationalRole :extension :extension )
( defstruct SpeechCommunityAdoptsAdoptedDefinitionCitingReference :speechCommunity :adoptedDefinition :reference )
( defstruct StateOfAffairsInvolvesThingInRole :stateOfAffairs :thing :role )
( defstruct StructuralBusinessRule )
( defstruct StructuralRule )
( defstruct SubjectField )
( defstruct Term :signifier :meaning :expression )
( defstruct TerminologicalDictionary )
( defstruct ThingInContext )
( defstruct UniversalQuantification )
( defstruct Viewpoint )
( defstruct VocabularyNamespace )
( defstruct WhetherornotFormulation :logicalOperand )
( defstruct AtleastnQuantificationHasMinimumCardinality :atleastnQuantification :minimumCardinality )
( defstruct AtmostnQuantificationHasMaximumCardinality :atmostnQuantification :maximumCardinality )
( defstruct AtomicFormulationIsBasedOnFactType :atomicFormulation :factType )
( defstruct AttributiveNamespaceIsForSubjectConcept :attributiveNamespace :subjectConcept )
( defstruct AttributiveNamespaceIsWithinVocabularyNamespace :attributiveNamespace :vocabularyNamespace )
( defstruct BinaryLogicalOperationHasLogicalOperand1 :binaryLogicalOperation :logicalOperand1 )
( defstruct BinaryLogicalOperationHasLogicalOperand2 :binaryLogicalOperation :logicalOperand2 )
( defstruct BodyOfSharedMeaningsIncludesBodyOfSharedConcepts :bodyOfSharedMeanings :bodyOfSharedConcepts )
( defstruct BodyOfSharedMeaningsIncludesBodyOfSharedGuidance :bodyOfSharedMeanings :bodyOfSharedGuidance )
( defstruct BodyOfSharedMeaningsUnitesSemanticCommunity :bodyOfSharedMeanings :semanticCommunity )
( defstruct BodyOfSharedMeanings1ContainsBodyOfSharedMeanings2 :bodyOfSharedMeanings1 :bodyOfSharedMeanings2 )
( defstruct BusinessPolicyIsBasisForAdvice :businessPolicy :advice )
( defstruct BusinessRuleIsDerivedFromBusinessPolicy :businessRule :businessPolicy )
( defstruct CategorizationSchemeContainsCategory :categorizationScheme :category )
( defstruct CategorizationSchemeIsForGeneralConcept :categorizationScheme :generalConcept )
( defstruct CategorizationTypeIsForGeneralConcept :categorizationType :generalConcept )
( defstruct ClosedLogicalFormulationFormalizesStatement :closedLogicalFormulation :statement )
( defstruct ClosedLogicalFormulationMeansProposition :closedLogicalFormulation :proposition )
( defstruct ClosedProjectionDefinesFactType :closedProjection :factType )
( defstruct ClosedProjectionDefinesNounConcept :closedProjection :nounConcept )
( defstruct ClosedProjectionFormalizesDefinition :closedProjection :definition )
( defstruct ClosedProjectionMeansQuestion :closedProjection :question )
( defstruct ClosedSemanticFormulationFormulatesMeaning :closedSemanticFormulation :meaning )
( defstruct CommunicationContentIsComposedOfRepresentation :communicationContent :representation )
( defstruct CommunityHasSubcommunity :community :subcommunity )
( defstruct CommunityHasUri :community :uri )
( defstruct ConceptHasDefinition :concept :definition )
( defstruct ConceptHasDesignation :concept :designation )
( defstruct ConceptHasExtension :concept :extension )
( defstruct ConceptHasImpliedCharacteristic :concept :impliedCharacteristic )
( defstruct ConceptHasInstance :concept :instance )
( defstruct ConceptHasNecessaryCharacteristic :concept :necessaryCharacteristic )
( defstruct ConceptHasSharedUnderstandingBySemanticCommunity :concept :semanticCommunity )
( defstruct ConceptIncorporatesCharacteristic :concept :characteristic )
( defstruct ConceptIsClosedInConceptualSchema :concept :conceptualSchema )
( defstruct ConceptIsIncludedInBodyOfSharedConcepts :concept :bodyOfSharedConcepts )
( defstruct Concept1IsCoextensiveWithConcept2 :concept1 :concept2 )
( defstruct Concept1SpecializesConcept2 :concept1 :concept2 )
( defstruct ConceptualSchemaIncludesConcept :conceptualSchema :concept )
( defstruct ConceptualSchemaIncludesFact :conceptualSchema :fact )
( defstruct DefinitionServesAsDesignation :definition :designation )
( defstruct DescriptionPortraysMeaning :description :meaning )
( defstruct DescriptiveExampleIllustratesMeaning :descriptiveExample :meaning )
( defstruct DesignationHasSignifier :designation :signifier )
( defstruct DesignationIsInNamespace :designation :namespace )
( defstruct ElementOfGuidanceAuthorizesStateOfAffairs :elementOfGuidance :stateOfAffairs )
( defstruct ElementOfGuidanceIsIncludedInBodyOfSharedGuidance :elementOfGuidance :bodyOfSharedGuidance )
( defstruct ElementOfGuidanceObligatesStateOfAffairs :elementOfGuidance :stateOfAffairs )
( defstruct ElementOfGuidanceProhibitsStateOfAffairs :elementOfGuidance :stateOfAffairs )
( defstruct ExactlynQuantificationHasCardinality :exactlynQuantification :cardinality )
( defstruct ExpressionRepresentsMeaning :expression :meaning )
( defstruct FactModelIncludesFact :factModel :fact )
( defstruct FactModelIsBasedOnConceptualSchema :factModel :conceptualSchema )
( defstruct FactTypeFormDemonstratesDesignation :factTypeForm :designation )
( defstruct FactTypeFormIncorporatesFactSymbol :factTypeForm :factSymbol )
( defstruct FactTypeFormIsInNamespace :factTypeForm :namespace )
( defstruct FactTypeHasFactTypeForm :factType :factTypeForm )
( defstruct FactTypeInternallyIsClosedInConceptualSchema :factType :conceptualSchema )
( defstruct FactTypeIsElementaryInBodyOfSharedMeanings :factType :bodyOfSharedMeanings )
( defstruct FactTypeRoleHasRoleBinding :factTypeRole :roleBinding )
( defstruct FactTypeRoleIsInFactType :factTypeRole :factType )
( defstruct ImplicationHasAntecedent :implication :antecedent )
( defstruct ImplicationHasConsequent :implication :consequent )
( defstruct InstantiationFormulationBindsToBindableTarget :instantiationFormulation :bindableTarget )
( defstruct InstantiationFormulationConsidersConcept :instantiationFormulation :concept )
( defstruct IntensionalDefinitionUsesDelimitingCharacteristic :intensionalDefinition :delimitingCharacteristic )
( defstruct LogicalFormulationConstrainsProjection :logicalFormulation :projection )
( defstruct LogicalFormulationRestrictsVariable :logicalFormulation :variable )
( defstruct LogicalOperationHasLogicalOperand :logicalOperation :logicalOperand )
( defstruct MeaningCorrespondsToThing :meaning :thing )
( defstruct ModalFormulationEmbedsLogicalFormulation :modalFormulation :logicalFormulation )
( defstruct NameReferencesThing :name :thing )
( defstruct NamespaceHasUri :namespace :uri )
( defstruct Namespace1IncorporatesNamespace2 :namespace1 :namespace2 )
( defstruct NoteCommentsOnMeaning :note :meaning )
( defstruct NumericRangeQuantificationHasMaximumCardinality :numericRangeQuantification :maximumCardinality )
( defstruct NumericRangeQuantificationHasMinimumCardinality :numericRangeQuantification :minimumCardinality )
( defstruct ObjectificationBindsToBindableTarget :objectification :bindableTarget )
( defstruct ObjectificationConsidersLogicalFormulation :objectification :logicalFormulation )
( defstruct OperativeBusinessRuleHasLevelOfEnforcement :operativeBusinessRule :levelOfEnforcement )
( defstruct PlaceholderIsAtStartingCharacterPosition :placeholder :startingCharacterPosition )
( defstruct PlaceholderIsInFactTypeForm :placeholder :factTypeForm )
( defstruct PlaceholderUsesDesignation :placeholder :designation )
( defstruct ProjectingFormulationBindsToBindableTarget :projectingFormulation :bindableTarget )
( defstruct ProjectingFormulationHasProjection :projectingFormulation :projection )
( defstruct ProjectionHasAuxiliaryVariable :projection :auxiliaryVariable )
( defstruct ProjectionIsOnVariable :projection :variable )
( defstruct PropositionIsBasedOnFactType :proposition :factType )
( defstruct PropositionNominalizationBindsToBindableTarget :propositionNominalization :bindableTarget )
( defstruct PropositionNominalizationConsidersLogicalFormulation :propositionNominalization :logicalFormulation )
( defstruct QuantificationIntroducesVariable :quantification :variable )
( defstruct QuantificationScopesOverLogicalFormulation :quantification :logicalFormulation )
( defstruct Quantity1EqualsQuantity2 :quantity1 :quantity2 )
( defstruct Quantity1IsLessThanQuantity2 :quantity1 :quantity2 )
( defstruct ReferencePointsToInformationSource :reference :informationSource )
( defstruct ReferenceSchemeExtensionallyUsesFactTypeRole :referenceScheme :factTypeRole )
( defstruct ReferenceSchemeIsForConcept :referenceScheme :concept )
( defstruct ReferenceSchemeSimplyUsesFactTypeRole :referenceScheme :factTypeRole )
( defstruct ReferenceSchemeUsesCharacteristic :referenceScheme :characteristic )
( defstruct ReferenceSupportsMeaning :reference :meaning )
( defstruct RepresentationHasExpression :representation :expression )
( defstruct RepresentationIsInDesignationContext :representation :designationContext )
( defstruct RepresentationIsInSubjectField :representation :subjectField )
( defstruct RepresentationRepresentsMeaning :representation :meaning )
( defstruct RepresentationUsesVocabulary :representation :vocabulary )
( defstruct ResIsSensoryManifestationOfSignifier :res :signifier )
( defstruct RoleBindingBindsToBindableTarget :roleBinding :bindableTarget )
( defstruct RoleBindingOccursInAtomicFormulation :roleBinding :atomicFormulation )
( defstruct RoleRangesOverObjectType :role :objectType )
( defstruct RulebookIncludesRepresentation :rulebook :representation )
( defstruct SemanticCommunityHasSpeechCommunity :semanticCommunity :speechCommunity )
( defstruct SetHasCardinality :set :cardinality )
( defstruct SpeechCommunityDeterminesRulebook :speechCommunity :rulebook )
( defstruct SpeechCommunityOwnsOwnedDefinition :speechCommunity :ownedDefinition )
( defstruct SpeechCommunityOwnsVocabulary :speechCommunity :vocabulary )
( defstruct SpeechCommunityRegulatesItsUsageOfSignifier :speechCommunity :signifier )
( defstruct SpeechCommunityUsesLanguage :speechCommunity :language )
( defstruct SpeechCommunityUsesVocabulary :speechCommunity :vocabulary )
( defstruct StatementExpressesProposition :statement :proposition )
( defstruct TermDenotesThing :term :thing )
( defstruct TerminologicalDictionaryExpressesBodyOfSharedMeanings :terminologicalDictionary :bodyOfSharedMeanings )
( defstruct TerminologicalDictionaryHasUri :terminologicalDictionary :uri )
( defstruct TerminologicalDictionaryPresentsVocabulary :terminologicalDictionary :vocabulary )
( defstruct ThingIsInSet :thing :set )
( defstruct Thing1IsThing2 :thing1 :thing2 )
( defstruct VariableHasProjectionPosition :variable :projectionPosition )
( defstruct VariableIsFreesWithinSemanticFormulation :variable :semanticFormulation )
( defstruct VariableMapsToFactTypeRole :variable :factTypeRole )
( defstruct VariableRangesOverConcept :variable :concept )
( defstruct VocabularyIsDesignedForSpeechCommunity :vocabulary :speechCommunity )
( defstruct VocabularyIsExpressedInLanguage :vocabulary :language )
( defstruct VocabularyIsUsedToExpressBodyOfSharedMeanings :vocabulary :bodyOfSharedMeanings )
( defstruct VocabularyNamespaceIsDerivedFromVocabulary :vocabularyNamespace :vocabulary )
( defstruct VocabularyNamespaceIsForLanguage :vocabularyNamespace :language )
( defstruct VocabularyNamespaceIsSpecificToDesignationContext :vocabularyNamespace :designationContext )
( defstruct VocabularyNamespaceIsSpecificToSubjectField :vocabularyNamespace :subjectField )
( defstruct Vocabulary1IncorporatesVocabulary2 :vocabulary1 :vocabulary2 )
( defstruct WhetherornotFormulationHasConsequent :whetherornotFormulation :consequent )
( defstruct WhetherornotFormulationHasInconsequent :whetherornotFormulation :inconsequent )
