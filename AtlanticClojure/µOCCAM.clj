( defstruct Process )
( defstruct StopProcess )
( defstruct SkipProcess )
( defstruct Action )
( defstruct Construction )
( defstruct Instance :name )
( defstruct Assignment :variable :expression )
( defstruct Input :channel :variable )
( defstruct Output :channel :expression )
( defstruct Sequence :process )
( defstruct NormalSequence :process )
( defstruct ReplicatorSequence :replicator :process )
( defstruct Conditional :choice )
( defstruct NormalConditional :choice )
( defstruct ReplicatorConditional :replicator :choice )
( defstruct Loop :boolean :process )
( defstruct Parallel :process )
( defstruct NormalParallel :process )
( defstruct ReplicatorParallel :replicator :process )
( defstruct Alternation :alternative )
( defstruct NormalAlternation :process )
( defstruct ReplicatorAlternation :replicator :process )
( defstruct Choice :boolean :process )
( defstruct BooleanRef :expression )
( defstruct Alternative :guard :process )
( defstruct Guard :input )
( defstruct InputGuard :input )
( defstruct BooleanGuard :boolean :input )
( defstruct Replicator :name :base :count )
( defstruct Base :expression )
( defstruct Count :expression )
( defstruct Type :primitiveType )
( defstruct PrimitiveType :isInt :isChan )
( defstruct Literal :integer )
( defstruct Element :name )
( defstruct Subscript :expression )
( defstruct Variable :element )
( defstruct Channel :element )
( defstruct Operand )
( defstruct VariableOPerand :element )
( defstruct LiteralOperand :integer )
( defstruct ExpressionOperand :operand )
( defstruct Expression :operand )
( defstruct MonadicExpression :monadicOperator :operand )
( defstruct DyadicExpression :operandRight :dyadicOperator :operand )
( defstruct SimpleExpression :operand )
( defstruct Specification )
( defstruct Declaration )
( defstruct TypeDeclaration :type )
( defstruct IntDeclaration :name :expression )
( defstruct ValDeclaration :name :expression )
( defstruct Definition :name :procedureBody )
( defstruct Formal :name :primitiveType )
( defstruct ProcedureBody :name :process )
( defstruct Actual :element )
( defstruct MonadicOperator :minus :not )
( defstruct DyadicOperator :plus :minus :star :slash :or :inverseSlash :and :eq :ne :lt :gt :le :ge )
