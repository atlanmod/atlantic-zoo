<?xml version = '1.0' encoding = 'ISO-8859-1' ?>
<Metamodel>
  <Package name = 'SBVRvoc'>
    <Class name = 'LocatedElement' isAbstract = 'true' supertypes = ''>
      <Attribute name = 'location' lower = '0' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::String'/>
      <Attribute name = 'commentsBefore' lower = '0' upper = '-1' isOrdered = 'true' isUnique = 'false' type = 'PrimitiveTypes::String'/>
      <Attribute name = 'commentsAfter' lower = '0' upper = '-1' isOrdered = 'true' isUnique = 'false' type = 'PrimitiveTypes::String'/>
    </Class>
    <Class name = 'Root' isAbstract = 'false' supertypes = 'SBVRvoc::LocatedElement'>
      <Reference name = 'entries' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'SBVRvoc::VocabularyEntry' opposite = ''/>
    </Class>
    <Class name = 'VocabularyEntry' isAbstract = 'false' supertypes = 'SBVRvoc::LocatedElement'>
      <Reference name = 'primaryRep' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::PrimaryRepresentation' opposite = ''/>
      <Reference name = 'caption' lower = '0' upper = '-1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::Caption' opposite = ''/>
    </Class>
    <Class name = 'Caption' isAbstract = 'true' supertypes = 'SBVRvoc::LocatedElement'/>
    <Class name = 'DefCaption' isAbstract = 'false' supertypes = 'SBVRvoc::Caption'>
      <Reference name = 'definition' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::ConceptDefinition' opposite = ''/>
    </Class>
    <Class name = 'DescCaption' isAbstract = 'false' supertypes = 'SBVRvoc::Caption'>
      <Reference name = 'description' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::Note' opposite = ''/>
    </Class>
    <Class name = 'SrcCaption' isAbstract = 'false' supertypes = 'SBVRvoc::Caption'>
      <Reference name = 'source' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::ConceptSource' opposite = ''/>
    </Class>
    <Class name = 'DBCaption' isAbstract = 'false' supertypes = 'SBVRvoc::Caption'>
      <Reference name = 'dictionaryBasis' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::ConceptSource' opposite = ''/>
    </Class>
    <Class name = 'GenCCaption' isAbstract = 'false' supertypes = 'SBVRvoc::Caption'>
      <Reference name = 'generalConcept' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::PrimaryRepresentation' opposite = ''/>
    </Class>
    <Class name = 'CTypCaption' isAbstract = 'false' supertypes = 'SBVRvoc::Caption'>
      <Reference name = 'conceptType' lower = '0' upper = '-1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::PrimaryRepresentation' opposite = ''/>
    </Class>
    <Class name = 'Necessity' isAbstract = 'false' supertypes = 'SBVRvoc::Caption'>
      <Reference name = 'exp' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::SBVRExpression' opposite = ''/>
    </Class>
    <Class name = 'Possibility' isAbstract = 'false' supertypes = 'SBVRvoc::Caption'>
      <Reference name = 'exp' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::SBVRExpression' opposite = ''/>
    </Class>
    <Class name = 'RefSCaption' isAbstract = 'false' supertypes = 'SBVRvoc::Caption'>
      <Reference name = 'referenceScheme' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::PrimaryRepresentation' opposite = ''/>
    </Class>
    <Class name = 'NoteCaption' isAbstract = 'false' supertypes = 'SBVRvoc::Caption'>
      <Reference name = 'note' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::Note' opposite = ''/>
    </Class>
    <Class name = 'ExCaption' isAbstract = 'false' supertypes = 'SBVRvoc::Caption'>
      <Reference name = 'example' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'SBVRvoc::SBVRExpression' opposite = ''/>
    </Class>
    <Class name = 'SynCaption' isAbstract = 'false' supertypes = 'SBVRvoc::Caption'>
      <Reference name = 'synonym' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'SBVRvoc::PrimaryRepresentation' opposite = ''/>
    </Class>
    <Class name = 'SynFCaption' isAbstract = 'false' supertypes = 'SBVRvoc::Caption'>
      <Reference name = 'synonymousForm' lower = '0' upper = '-1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::SBVRExpression' opposite = ''/>
    </Class>
    <Class name = 'SeeCaption' isAbstract = 'false' supertypes = 'SBVRvoc::Caption'>
      <Reference name = 'see' lower = '0' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::PrimaryRepresentation' opposite = ''/>
    </Class>
    <Class name = 'SFCaption' isAbstract = 'false' supertypes = 'SBVRvoc::Caption'>
      <Reference name = 'subjectField' lower = '0' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::PrimaryRepresentation' opposite = ''/>
    </Class>
    <Class name = 'NSURICaption' isAbstract = 'false' supertypes = 'SBVRvoc::Caption'>
      <Reference name = 'namespaceURI' lower = '0' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::NameSpaceURI' opposite = ''/>
    </Class>
    <Class name = 'PrimaryRepresentation' isAbstract = 'true' supertypes = 'SBVRvoc::LocatedElement'/>
    <Class name = 'NotFactTypeRepresentation' isAbstract = 'true' supertypes = 'SBVRvoc::PrimaryRepresentation'/>
    <Class name = 'TermRepresentation' isAbstract = 'false' supertypes = 'SBVRvoc::NotFactTypeRepresentation'>
      <Reference name = 'term' lower = '1' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'SBVRvoc::StringWord' opposite = ''/>
    </Class>
    <Class name = 'NameRepresentation' isAbstract = 'false' supertypes = 'SBVRvoc::NotFactTypeRepresentation'>
      <Attribute name = 'hasThe' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Boolean'/>
      <Reference name = 'name' lower = '1' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'SBVRvoc::NameWord' opposite = ''/>
    </Class>
    <Class name = 'FactTypeFormRepresentation' isAbstract = 'false' supertypes = 'SBVRvoc::PrimaryRepresentation'>
      <Reference name = 'primaryRep1' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::NotFactTypeRepresentation' opposite = ''/>
      <Attribute name = 'verbExp' lower = '1' upper = '-1' isOrdered = 'true' isUnique = 'false' type = 'SBVRvoc::Verb'/>
      <Reference name = 'primaryRep2' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::NotFactTypeRepresentation' opposite = ''/>
    </Class>
    <Class name = 'ConceptDefinition' isAbstract = 'false' supertypes = 'SBVRvoc::LocatedElement'>
      <Reference name = 'exp' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::Concept' opposite = ''/>
      <Reference name = 'conjexp' lower = '0' upper = '-1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::ConjConcept' opposite = ''/>
    </Class>
    <Class name = 'ConceptSource' isAbstract = 'false' supertypes = 'SBVRvoc::LocatedElement'>
      <Reference name = 'source' lower = '1' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'SBVRvoc::Word' opposite = ''/>
    </Class>
    <Class name = 'Note' isAbstract = 'false' supertypes = 'SBVRvoc::LocatedElement'>
      <Reference name = 'sentences' lower = '1' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'SBVRvoc::Sentence' opposite = ''/>
    </Class>
    <Class name = 'Sentence' isAbstract = 'false' supertypes = 'SBVRvoc::LocatedElement'>
      <Reference name = 'words' lower = '1' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'SBVRvoc::Word' opposite = ''/>
    </Class>
    <Class name = 'NameSpaceURI' isAbstract = 'false' supertypes = 'SBVRvoc::LocatedElement'>
      <Reference name = 'URI' lower = '1' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'SBVRvoc::Word' opposite = ''/>
    </Class>
    <Class name = 'Word' isAbstract = 'true' supertypes = 'SBVRvoc::LocatedElement'>
      <Attribute name = 'val' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::String'/>
    </Class>
    <Class name = 'StringWord' isAbstract = 'false' supertypes = 'SBVRvoc::Word'/>
    <Class name = 'QuotedStringWord' isAbstract = 'false' supertypes = 'SBVRvoc::Word'/>
    <Class name = 'NameWord' isAbstract = 'false' supertypes = 'SBVRvoc::Word'/>
    <Enumeration name = 'Verb'>
      <EnumLiteral name = 'is'/>
      <EnumLiteral name = 'relevant'/>
      <EnumLiteral name = 'comprises'/>
      <EnumLiteral name = 'to'/>
      <EnumLiteral name = 'work'/>
      <EnumLiteral name = 'in'/>
      <EnumLiteral name = 'trades'/>
      <EnumLiteral name = 'as'/>
      <EnumLiteral name = 'are'/>
      <EnumLiteral name = 'accepted'/>
      <EnumLiteral name = 'generally'/>
      <EnumLiteral name = 'important'/>
      <EnumLiteral name = 'across'/>
      <EnumLiteral name = 'share'/>
      <EnumLiteral name = 'sets'/>
      <EnumLiteral name = 'assigned'/>
      <EnumLiteral name = 'by'/>
      <EnumLiteral name = 'contains'/>
      <EnumLiteral name = 'for'/>
      <EnumLiteral name = 'has'/>
      <EnumLiteral name = 'specifies'/>
      <EnumLiteral name = 'specified'/>
    </Enumeration>
    <Enumeration name = 'ConjonctionnalKeyWord'>
      <EnumLiteral name = 'and'/>
      <EnumLiteral name = 'or'/>
      <EnumLiteral name = 'if'/>
      <EnumLiteral name = 'whether'/>
    </Enumeration>
    <Enumeration name = 'ModalVerb'>
      <EnumLiteral name = 'must'/>
      <EnumLiteral name = 'may'/>
      <EnumLiteral name = 'never'/>
      <EnumLiteral name = 'always'/>
    </Enumeration>
    <Enumeration name = 'Join'>
      <EnumLiteral name = 'that'/>
      <EnumLiteral name = 'who'/>
    </Enumeration>
    <Enumeration name = 'Link'>
      <EnumLiteral name = 'of'/>
      <EnumLiteral name = 'quoteS'/>
    </Enumeration>
    <Enumeration name = 'Qualif'>
      <EnumLiteral name = 'the'/>
      <EnumLiteral name = 'The'/>
      <EnumLiteral name = 'a'/>
      <EnumLiteral name = 'A'/>
      <EnumLiteral name = 'an'/>
      <EnumLiteral name = 'An'/>
      <EnumLiteral name = 'Each'/>
      <EnumLiteral name = 'each'/>
      <EnumLiteral name = 'Some'/>
      <EnumLiteral name = 'some'/>
      <EnumLiteral name = 'At'/>
      <EnumLiteral name = 'at'/>
      <EnumLiteral name = 'Exactly'/>
      <EnumLiteral name = 'exactly'/>
    </Enumeration>
    <Enumeration name = 'EndOperator'>
      <EnumLiteral name = 'given'/>
      <EnumLiteral name = 'thanone'/>
      <EnumLiteral name = 'one'/>
      <EnumLiteral name = 'isobligatorythat'/>
      <EnumLiteral name = 'ispermittedthat'/>
      <EnumLiteral name = 'isprohibitedthat'/>
      <EnumLiteral name = 'isnecessarythat'/>
      <EnumLiteral name = 'ispossiblethat'/>
      <EnumLiteral name = 'isimpossiblethat'/>
      <EnumLiteral name = 'isnotthecasethat'/>
      <EnumLiteral name = 'least'/>
      <EnumLiteral name = 'leastone'/>
      <EnumLiteral name = 'most'/>
      <EnumLiteral name = 'mostone'/>
      <EnumLiteral name = 'leastnandatmostm'/>
      <EnumLiteral name = 'andonlyif'/>
      <EnumLiteral name = 'ornot'/>
      <EnumLiteral name = 'not'/>
      <EnumLiteral name = 'of'/>
    </Enumeration>
    <Class name = 'SBVRExpression' isAbstract = 'false' supertypes = 'SBVRvoc::LocatedElement'>
      <Attribute name = 'hasPoint' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Boolean'/>
      <Reference name = 'firstProposition' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::SimpleSBVRProp' opposite = ''/>
      <Reference name = 'nextProposition' lower = '0' upper = '-1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::SBVRPropWithKW' opposite = ''/>
    </Class>
    <Class name = 'SBVRPropWithKW' isAbstract = 'false' supertypes = 'SBVRvoc::LocatedElement'>
      <Attribute name = 'conjonction' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'SBVRvoc::ConjonctionnalKeyWord'/>
      <Attribute name = 'endConj' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'SBVRvoc::EndOperator'/>
      <Reference name = 'proposition' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::SimpleSBVRProp' opposite = ''/>
    </Class>
    <Class name = 'ModalForm' isAbstract = 'false' supertypes = 'SBVRvoc::LocatedElement'>
      <Attribute name = 'modal' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'SBVRvoc::ModalVerb'/>
      <Attribute name = 'isNeg' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Boolean'/>
    </Class>
    <Class name = 'SimpleSBVRProp' isAbstract = 'false' supertypes = 'SBVRvoc::LocatedElement'>
      <Reference name = 'modal' lower = '0' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::ModalBegin' opposite = ''/>
      <Reference name = 'concept1' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::Concept' opposite = ''/>
      <Reference name = 'modalVerb' lower = '0' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::ModalForm' opposite = ''/>
      <Attribute name = 'verbs' lower = '1' upper = '-1' isOrdered = 'false' isUnique = 'false' type = 'SBVRvoc::Verb'/>
      <Reference name = 'concept2' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::Concept' opposite = ''/>
    </Class>
    <Class name = 'SubSBVRProp' isAbstract = 'false' supertypes = 'SBVRvoc::LocatedElement'>
      <Attribute name = 'join' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'SBVRvoc::Join'/>
      <Attribute name = 'modalVerb' lower = '0' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'SBVRvoc::ModalVerb'/>
      <Attribute name = 'verbs' lower = '1' upper = '-1' isOrdered = 'false' isUnique = 'false' type = 'SBVRvoc::Verb'/>
      <Reference name = 'concept2' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::Concept' opposite = ''/>
    </Class>
    <Class name = 'LinkSBVRConcept' isAbstract = 'false' supertypes = 'SBVRvoc::LocatedElement'>
      <Attribute name = 'link' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'SBVRvoc::Link'/>
      <Reference name = 'concept' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::Concept' opposite = ''/>
    </Class>
    <Class name = 'ConjConcept' isAbstract = 'false' supertypes = 'SBVRvoc::LocatedElement'>
      <Attribute name = 'conjonction' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'SBVRvoc::ConjonctionnalKeyWord'/>
      <Reference name = 'concept' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::Concept' opposite = ''/>
    </Class>
    <Class name = 'Concept' isAbstract = 'true' supertypes = 'SBVRvoc::LocatedElement'>
      <Reference name = 'subProp' lower = '0' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::SubSBVRProp' opposite = ''/>
      <Reference name = 'linkedConcept' lower = '0' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::LinkSBVRConcept' opposite = ''/>
    </Class>
    <Class name = 'NameConcept' isAbstract = 'false' supertypes = 'SBVRvoc::Concept'>
      <Attribute name = 'the' lower = '0' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'SBVRvoc::Qualif'/>
      <Reference name = 'name' lower = '1' upper = '-1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::NameWord' opposite = ''/>
    </Class>
    <Class name = 'ObjectConcept' isAbstract = 'false' supertypes = 'SBVRvoc::Concept'>
      <Reference name = 'operatoredConcept' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::NounConcept' opposite = ''/>
      <Reference name = 'qualify' lower = '0' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::Qualification' opposite = ''/>
    </Class>
    <Class name = 'StringConcept' isAbstract = 'false' supertypes = 'SBVRvoc::Concept'>
      <Reference name = 'stringWord' lower = '1' upper = '-1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::QuotedStringWord' opposite = ''/>
    </Class>
    <Class name = 'NounConcept' isAbstract = 'false' supertypes = 'SBVRvoc::LocatedElement'>
      <Reference name = 'qualif' lower = '0' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::Qualifier' opposite = ''/>
      <Reference name = 'noun' lower = '1' upper = '-1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::StringWord' opposite = ''/>
    </Class>
    <Class name = 'Qualification' isAbstract = 'false' supertypes = 'SBVRvoc::LocatedElement'>
      <Reference name = 'generalConcept' lower = '1' upper = '-1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::GeneralConcept' opposite = ''/>
    </Class>
    <Class name = 'GeneralConcept' isAbstract = 'true' supertypes = 'SBVRvoc::LocatedElement'/>
    <Class name = 'NameGConcept' isAbstract = 'false' supertypes = 'SBVRvoc::GeneralConcept'>
      <Reference name = 'name' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::NameConcept' opposite = ''/>
    </Class>
    <Class name = 'NounGConcept' isAbstract = 'false' supertypes = 'SBVRvoc::GeneralConcept'>
      <Reference name = 'noun' lower = '1' upper = '-1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::StringWord' opposite = ''/>
    </Class>
    <Class name = 'Qualifier' isAbstract = 'false' supertypes = 'SBVRvoc::LocatedElement'>
      <Attribute name = 'op' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'SBVRvoc::Qualif'/>
      <Attribute name = 'endOperator' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'SBVRvoc::EndOperator'/>
      <Reference name = 'min' lower = '0' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::StringWord' opposite = ''/>
      <Reference name = 'max' lower = '0' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'SBVRvoc::StringWord' opposite = ''/>
    </Class>
    <Class name = 'ModalBegin' isAbstract = 'false' supertypes = 'SBVRvoc::LocatedElement'>
      <Attribute name = 'endOperator' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'SBVRvoc::EndOperator'/>
    </Class>
    <Class name = 'ModalBeginC' isAbstract = 'false' supertypes = 'SBVRvoc::ModalBegin'/>
  </Package>
  <Package name = 'PrimitiveTypes'>
    <DataType name = 'Boolean'/>
    <DataType name = 'Double'/>
    <DataType name = 'Integer'/>
    <DataType name = 'String'/>
  </Package>
</Metamodel>
