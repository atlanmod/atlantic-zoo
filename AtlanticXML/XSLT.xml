<?xml version = '1.0' encoding = 'ISO-8859-1' ?>
<Metamodel>
  <Package name = 'XSLT'>
    <Class name = 'Node' isAbstract = 'true' supertypes = ''>
      <Attribute name = 'name' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::String'/>
      <Reference name = 'parentNode' lower = '0' upper = '1' isOrdered = 'false' isContainer = 'false' type = 'XSLT::ElementNode' opposite = 'XSLT::ElementNode::nodes'/>
    </Class>
    <Class name = 'ElementNode' isAbstract = 'false' supertypes = 'XSLT::Node'>
      <Reference name = 'nodes' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'XSLT::Node' opposite = 'XSLT::Node::parentNode'/>
    </Class>
    <Class name = 'AttributeNode' isAbstract = 'false' supertypes = 'XSLT::Node'/>
    <Class name = 'RootNode' isAbstract = 'false' supertypes = 'XSLT::ElementNode'>
      <Reference name = 'document' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'XSLT::Document' opposite = 'XSLT::Document::document'/>
    </Class>
    <Class name = 'TextNode' isAbstract = 'false' supertypes = 'XSLT::ElementNode'>
      <Attribute name = 'value' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::String'/>
    </Class>
    <Class name = 'XSLTNode' isAbstract = 'true' supertypes = 'XSLT::ElementNode'/>
    <Class name = 'XSLTRootNode' isAbstract = 'false' supertypes = 'XSLT::RootNode'/>
    <Class name = 'Document' isAbstract = 'false' supertypes = ''>
      <Attribute name = 'documentName' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::String'/>
      <Reference name = 'document' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'XSLT::RootNode' opposite = 'XSLT::RootNode::document'/>
    </Class>
    <Class name = 'ApplyTemplates' isAbstract = 'false' supertypes = 'XSLT::XSLTNode'>
      <Attribute name = 'select' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::String'/>
    </Class>
    <Class name = 'If' isAbstract = 'false' supertypes = 'XSLT::XSLTNode'>
      <Attribute name = 'test' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::String'/>
    </Class>
    <Class name = 'Template' isAbstract = 'false' supertypes = 'XSLT::XSLTNode'>
      <Attribute name = 'match' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::String'/>
    </Class>
    <Class name = 'ValueOf' isAbstract = 'false' supertypes = 'XSLT::XSLTNode'>
      <Attribute name = 'select' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::String'/>
    </Class>
    <Class name = 'When' isAbstract = 'false' supertypes = 'XSLT::XSLTNode'>
      <Attribute name = 'test' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::String'/>
    </Class>
    <Class name = 'Choose' isAbstract = 'false' supertypes = 'XSLT::XSLTNode'>
      <Reference name = 'when' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'XSLT::When' opposite = ''/>
      <Reference name = 'otherwise' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'XSLT::Otherwise' opposite = ''/>
    </Class>
    <Class name = 'Otherwise' isAbstract = 'false' supertypes = 'XSLT::XSLTNode'/>
    <Class name = 'Sort' isAbstract = 'false' supertypes = 'XSLT::XSLTNode'>
      <Attribute name = 'select' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::String'/>
    </Class>
  </Package>
  <Package name = 'PrimitiveTypes'>
    <DataType name = 'Boolean'/>
    <DataType name = 'Integer'/>
    <DataType name = 'String'/>
  </Package>
</Metamodel>
